[
  {
    "split": "train",
    "db_id": "farm",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Official_Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Host_city_ID ] Output [ countstar AS Count_Star , Official_Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Host_city_ID = #2.City_ID ] Output [ #1.Host_city_ID , #2.Official_Name , #2.City_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ farm_competition ] Output [ Host_city_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ city ] Output [ City_ID , Official_Name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'official_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "farm",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Official_Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Host_city_ID ] Output [ countstar AS Count_Star , Official_Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Host_city_ID = #2.City_ID ] Output [ #1.Host_city_ID , #2.Official_Name , #2.City_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ farm_competition ] Output [ Host_city_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ city ] Output [ City_ID , Official_Name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'official_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "student_assessment",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.student_id = #1.student_id ] Output [ #1.registration_date , #1.course_id , #1.student_id ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Student_Course_Registrations ] Output [ student_id , course_id , registration_date ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ student_id ] Output [ student_id ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Student_Course_Attendance ] Output [ student_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'Courses, People, Student_Course_Registrations' and 'People'"
  },
  {
    "split": "train",
    "db_id": "student_assessment",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.student_id = #1.student_id ] Output [ #1.registration_date , #1.course_id , #1.student_id ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Student_Course_Registrations ] Output [ student_id , course_id , registration_date ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ student_id ] Output [ student_id ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Student_Course_Attendance ] Output [ student_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'Courses, People, Student_Course_Registrations' and 'People'"
  },
  {
    "split": "train",
    "db_id": "bike_1",
    "line_num": 6,
    "op": "Aggregate",
    "qpl_line": "#6 = Aggregate [ #5 ] Output [ AVG(long) AS Avg_long ]",
    "children": [
      {
        "line_num": 5,
        "op": "Except",
        "qpl_line": "#5 = Except [ #1 , #4 ] Predicate [ #4.station_id IS NULL OR #1.id = #4.station_id ] Output [ #1.long ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ station ] Output [ long , id ]",
            "children": []
          },
          {
            "line_num": 4,
            "op": "Filter",
            "qpl_line": "#4 = Filter [ #3 ] Predicate [ Max_bikes_available > 10 ] Output [ station_id ]",
            "children": [
              {
                "line_num": 3,
                "op": "Aggregate",
                "qpl_line": "#3 = Aggregate [ #2 ] Output [ station_id , MAX(bikes_available) AS Max_bikes_available ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ status ] Output [ station_id , bikes_available ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #3: Column 'station_id' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "bike_1",
    "line_num": 6,
    "op": "Aggregate",
    "qpl_line": "#6 = Aggregate [ #5 ] Output [ AVG(long) AS Avg_long ]",
    "children": [
      {
        "line_num": 5,
        "op": "Except",
        "qpl_line": "#5 = Except [ #1 , #4 ] Predicate [ #4.station_id IS NULL OR #1.id = #4.station_id ] Output [ #1.long ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ station ] Output [ long , id ]",
            "children": []
          },
          {
            "line_num": 4,
            "op": "Filter",
            "qpl_line": "#4 = Filter [ #3 ] Predicate [ Max_bikes_available > 10 ] Output [ station_id ]",
            "children": [
              {
                "line_num": 3,
                "op": "Aggregate",
                "qpl_line": "#3 = Aggregate [ #2 ] Output [ station_id , MAX(bikes_available) AS Max_bikes_available ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ status ] Output [ station_id , bikes_available ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #3: Column 'station_id' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "bike_1",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.duration >= #2.Avg_duration ] Output [ #3.id ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(duration) AS Avg_duration ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ trip ] Predicate [ zip_code = 94103 ] Output [ zip_code , duration ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ trip ] Output [ duration , id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'trip'"
  },
  {
    "split": "train",
    "db_id": "bike_1",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.duration >= #2.Avg_duration ] Output [ #3.id ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(duration) AS Avg_duration ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ trip ] Predicate [ zip_code = 94103 ] Output [ zip_code , duration ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ trip ] Output [ duration , id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'trip'"
  },
  {
    "split": "train",
    "db_id": "bike_1",
    "line_num": 3,
    "op": "Intersect",
    "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #2.station_id = #1.id ] Output [ #1.name , #1.id ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ station ] Output [ name , id ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ status ] Predicate [ bikes_available > 12 ] Output [ station_id , bikes_available ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'station' and 'station, status'"
  },
  {
    "split": "train",
    "db_id": "bike_1",
    "line_num": 3,
    "op": "Intersect",
    "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #2.station_id = #1.id ] Output [ #1.name , #1.id ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ station ] Output [ name , id ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ status ] Predicate [ bikes_available > 12 ] Output [ station_id , bikes_available ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'station' and 'station, status'"
  },
  {
    "split": "train",
    "db_id": "twitter_1",
    "line_num": 2,
    "op": "Aggregate",
    "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ f1 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ follows ] Output [ f1 ]",
        "children": []
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #2: GroupBy column 'f1' not found in aggregate output: ['count_star']."
  },
  {
    "split": "train",
    "db_id": "product_catalog",
    "line_num": 3,
    "op": "Join",
    "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.attribute_id = #2.attribute_id ] Output [ #1.attribute_name , #1.attribute_id ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Attribute_Definitions ] Output [ attribute_id , attribute_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Catalog_Contents_Additional_Attributes ] Predicate [ attribute_value = 0 ] Output [ attribute_id , attribute_value ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Join': 'Attribute_Definitions' and 'Catalog_Contents_Additional_Attributes'"
  },
  {
    "split": "train",
    "db_id": "product_catalog",
    "line_num": 3,
    "op": "Join",
    "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.attribute_id = #2.attribute_id ] Output [ #1.attribute_name , #1.attribute_id ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Attribute_Definitions ] Output [ attribute_id , attribute_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Catalog_Contents_Additional_Attributes ] Predicate [ attribute_value = 0 ] Output [ attribute_id , attribute_value ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Join': 'Attribute_Definitions' and 'Catalog_Contents_Additional_Attributes'"
  },
  {
    "split": "train",
    "db_id": "flight_1",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.distance > #2.Avg_distance ] Output [ #3.name ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(distance) AS Avg_distance ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ aircraft ] Output [ distance ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ aircraft ] Output [ name , distance ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'aircraft'"
  },
  {
    "split": "train",
    "db_id": "flight_1",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.distance > #2.Avg_distance ] Output [ #3.name ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(distance) AS Avg_distance ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ aircraft ] Output [ distance ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ aircraft ] Output [ name , distance ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'aircraft'"
  },
  {
    "split": "train",
    "db_id": "flight_1",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.salary > #2.Avg_salary ] Output [ #3.name ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(salary) AS Avg_salary ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ employee ] Output [ salary ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ employee ] Output [ name , salary ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'employee'"
  },
  {
    "split": "train",
    "db_id": "flight_1",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.salary > #2.Avg_salary ] Output [ #3.name ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(salary) AS Avg_salary ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ employee ] Output [ salary ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ employee ] Output [ name , salary ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'employee'"
  },
  {
    "split": "train",
    "db_id": "flight_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ aid ] Output [ name , countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.aid = #2.aid ] Output [ #1.aid , #2.name ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ flight ] Output [ aid ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ aircraft ] Output [ aid , name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "flight_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ aid ] Output [ name , countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.aid = #2.aid ] Output [ #1.aid , #2.name ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ flight ] Output [ aid ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ aircraft ] Output [ aid , name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "flight_1",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ aid ] Output [ name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.aid = #2.aid ] Output [ #1.aid , #2.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ flight ] Output [ aid ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ aircraft ] Output [ aid , name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "flight_1",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ aid ] Output [ name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.aid = #2.aid ] Output [ #1.aid , #2.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ flight ] Output [ aid ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ aircraft ] Output [ aid , name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "flight_1",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ eid ] Output [ name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.eid = #4.eid ] Output [ #4.eid , #4.name ]",
            "children": [
              {
                "line_num": 3,
                "op": "Join",
                "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.aid = #2.aid ] Output [ #2.eid ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ aircraft ] Predicate [ distance > 5000 ] Output [ aid , distance ]",
                    "children": []
                  },
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ certificate ] Output [ aid , eid ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 4,
                "op": "Scan",
                "qpl_line": "#4 = Scan Table [ employee ] Output [ name , eid ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #6: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "flight_1",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ eid ] Output [ name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.eid = #4.eid ] Output [ #4.eid , #4.name ]",
            "children": [
              {
                "line_num": 3,
                "op": "Join",
                "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.aid = #2.aid ] Output [ #2.eid ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ aircraft ] Predicate [ distance > 5000 ] Output [ aid , distance ]",
                    "children": []
                  },
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ certificate ] Output [ aid , eid ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 4,
                "op": "Scan",
                "qpl_line": "#4 = Scan Table [ employee ] Output [ name , eid ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #6: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "allergy_1",
    "line_num": 5,
    "op": "Except",
    "qpl_line": "#5 = Except [ #1 , #4 ] ExceptColumns [ #1.StuID ] Output [ #1.LName , #1.Fname ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Student ] Output [ LName , Fname , StuID ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Allergy = #2.Allergy ] Output [ #2.Allergy , #3.AllergyType , #2.StuID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Has_Allergy ] Predicate [ StuID IS NULL OR StuID = StuID ] Output [ StuID , Allergy ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ Allergy_Type ] Predicate [ AllergyType = 'food' ] Output [ AllergyType , Allergy ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Except': 'Student' and 'Allergy_Type, Student'"
  },
  {
    "split": "train",
    "db_id": "allergy_1",
    "line_num": 5,
    "op": "Except",
    "qpl_line": "#5 = Except [ #1 , #4 ] ExceptColumns [ #1.StuID ] Output [ #1.LName , #1.Fname ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Student ] Output [ LName , Fname , StuID ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Allergy = #2.Allergy ] Output [ #2.Allergy , #3.AllergyType , #2.StuID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Has_Allergy ] Predicate [ StuID IS NULL OR StuID = StuID ] Output [ StuID , Allergy ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ Allergy_Type ] Predicate [ AllergyType = 'food' ] Output [ AllergyType , Allergy ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Except': 'Student' and 'Allergy_Type, Student'"
  },
  {
    "split": "train",
    "db_id": "allergy_1",
    "line_num": 6,
    "op": "Aggregate",
    "qpl_line": "#6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 5,
        "op": "Except",
        "qpl_line": "#5 = Except [ #1 , #4 ] ExceptColumns [ #1.StuID ] Output [ #1.Age , #1.StuID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Student ] Predicate [ Age > 18 ] Output [ StuID , Age ]",
            "children": []
          },
          {
            "line_num": 4,
            "op": "Join",
            "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Allergy = #2.Allergy ] Output [ #2.Allergy , #3.AllergyType , #2.StuID ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Has_Allergy ] Predicate [ StuID IS NULL OR StuID = StuID ] Output [ StuID , Allergy ]",
                "children": []
              },
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ Allergy_Type ] Predicate [ AllergyType = 'animal' OR AllergyType = 'food' ] Output [ AllergyType , Allergy ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Except': 'Student' and 'Allergy_Type, Student'"
  },
  {
    "split": "train",
    "db_id": "allergy_1",
    "line_num": 6,
    "op": "Aggregate",
    "qpl_line": "#6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 5,
        "op": "Except",
        "qpl_line": "#5 = Except [ #1 , #4 ] ExceptColumns [ #1.StuID ] Output [ #1.Age , #1.StuID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Student ] Predicate [ Age > 18 ] Output [ StuID , Age ]",
            "children": []
          },
          {
            "line_num": 4,
            "op": "Join",
            "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Allergy = #2.Allergy ] Output [ #2.Allergy , #3.AllergyType , #2.StuID ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Has_Allergy ] Predicate [ StuID IS NULL OR StuID = StuID ] Output [ StuID , Allergy ]",
                "children": []
              },
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ Allergy_Type ] Predicate [ AllergyType = 'animal' OR AllergyType = 'food' ] Output [ AllergyType , Allergy ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Except': 'Student' and 'Allergy_Type, Student'"
  },
  {
    "split": "train",
    "db_id": "allergy_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.StuID IS NULL OR #1.StuID = #2.StuID ] Output [ #1.Major , #1.Fname ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Student ] Output [ Fname , StuID , Major ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Has_Allergy ] Predicate [ Allergy = 'Soy' ] Output [ StuID , Allergy ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Student' and 'Allergy_Type, Student'"
  },
  {
    "split": "train",
    "db_id": "allergy_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.StuID IS NULL OR #1.StuID = #2.StuID ] Output [ #1.Major , #1.Fname ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Student ] Output [ Fname , StuID , Major ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Has_Allergy ] Predicate [ Allergy = 'Soy' ] Output [ StuID , Allergy ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Student' and 'Allergy_Type, Student'"
  },
  {
    "split": "train",
    "db_id": "store_1",
    "line_num": 3,
    "op": "Join",
    "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.genre_id = #2.id ] Output [ #2.title ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ tracks ] Predicate [ name = 'Balls to the Wall' ] Output [ name , genre_id ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ albums ] Output [ title , id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Join': 'genres, tracks' and 'albums'"
  },
  {
    "split": "train",
    "db_id": "store_1",
    "line_num": 3,
    "op": "Join",
    "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.genre_id = #2.id ] Output [ #2.title ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ tracks ] Predicate [ name = 'Balls to the Wall' ] Output [ name , genre_id ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ albums ] Output [ title , id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Join': 'genres, tracks' and 'albums'"
  },
  {
    "split": "train",
    "db_id": "store_1",
    "line_num": 3,
    "op": "Join",
    "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.genre_id ] Output [ #2.name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ albums ] Predicate [ title = 'Balls to the Wall' ] Output [ title , id ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ tracks ] Output [ name , genre_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Join': 'albums' and 'genres, tracks'"
  },
  {
    "split": "train",
    "db_id": "store_1",
    "line_num": 3,
    "op": "Join",
    "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.genre_id ] Output [ #2.name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ albums ] Predicate [ title = 'Balls to the Wall' ] Output [ title , id ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ tracks ] Output [ name , genre_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Join': 'albums' and 'genres, tracks'"
  },
  {
    "split": "train",
    "db_id": "journal_committee",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Editor_ID ] Output [ countstar AS Count_Star , Name , Editor_ID ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Editor_ID = #2.Editor_ID ] Output [ #2.Name , #2.Editor_ID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ journal_committee ] Output [ Editor_ID ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ editor ] Output [ Name , Editor_ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "customers_card_transactions",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ customer_last_name , customer_id , customer_first_name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_last_name , customer_id , customer_first_name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.customer_first_name , #1.customer_id , #2.customer_last_name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Customers_Cards ] Output [ customer_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , customer_first_name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'customer_last_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "customers_card_transactions",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ customer_last_name , customer_id , customer_first_name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_last_name , customer_id , customer_first_name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.customer_first_name , #1.customer_id , #2.customer_last_name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Customers_Cards ] Output [ customer_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , customer_first_name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'customer_last_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "race_track",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Seating > #2.Avg_Seating ] Output [ #3.Name , #3.Year_Opened , #3.Location ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Seating) AS Avg_Seating ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ track ] Output [ Seating ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ track ] Output [ Location , Name , Year_Opened , Seating ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'track'"
  },
  {
    "split": "train",
    "db_id": "race_track",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Seating > #2.Avg_Seating ] Output [ #3.Name , #3.Year_Opened , #3.Location ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Seating) AS Avg_Seating ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ track ] Output [ Seating ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ track ] Output [ Location , Name , Year_Opened , Seating ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'track'"
  },
  {
    "split": "train",
    "db_id": "race_track",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Track_ID ] Output [ countstar AS Count_Star , Name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Track_ID = #2.Track_ID ] Output [ #2.Name , #1.Track_ID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ race ] Output [ Track_ID ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ track ] Output [ Track_ID , Name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "race_track",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Track_ID ] Output [ countstar AS Count_Star , Name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Track_ID = #2.Track_ID ] Output [ #2.Name , #1.Track_ID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ race ] Output [ Track_ID ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ track ] Output [ Track_ID , Name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "race_track",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Track_ID ] Output [ countstar AS Count_Star , Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Track_ID = #2.Track_ID ] Output [ #2.Name , #1.Track_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ race ] Output [ Track_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ track ] Output [ Track_ID , Name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "race_track",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Track_ID ] Output [ countstar AS Count_Star , Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Track_ID = #2.Track_ID ] Output [ #2.Name , #1.Track_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ race ] Output [ Track_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ track ] Output [ Track_ID , Name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "race_track",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star = 1 ] Output [ Location , Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Track_ID ] Output [ countstar AS Count_Star , Location , Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Track_ID = #2.Track_ID ] Output [ #2.Name , #1.Track_ID , #2.Location ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ race ] Output [ Track_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ track ] Output [ Track_ID , Location , Name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'location' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "race_track",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star = 1 ] Output [ Location , Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Track_ID ] Output [ countstar AS Count_Star , Location , Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Track_ID = #2.Track_ID ] Output [ #2.Name , #1.Track_ID , #2.Location ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ race ] Output [ Track_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ track ] Output [ Track_ID , Location , Name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'location' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "coffee_shop",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Score < #2.Avg_Score ] Output [ #3.Shop_ID , #3.Address ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Score) AS Avg_Score ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ shop ] Output [ Score ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ shop ] Output [ Score , Shop_ID , Address ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'shop'"
  },
  {
    "split": "train",
    "db_id": "chinook_1",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star <= 20 ] Output [ LastName ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ SupportRepId , LastName ] Output [ countstar AS Count_Star , LastName ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.EmployeeId = #2.SupportRepId ] Output [ #2.LastName , #2.SupportRepId ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Employee ] Output [ EmployeeId ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Customer ] Output [ LastName , SupportRepId ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: GroupBy column 'supportrepid' not found in aggregate output: ['count_star', 'lastname']."
  },
  {
    "split": "train",
    "db_id": "chinook_1",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star <= 20 ] Output [ LastName ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ SupportRepId , LastName ] Output [ countstar AS Count_Star , LastName ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.EmployeeId = #2.SupportRepId ] Output [ #2.LastName , #2.SupportRepId ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Employee ] Output [ EmployeeId ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Customer ] Output [ LastName , SupportRepId ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: GroupBy column 'supportrepid' not found in aggregate output: ['count_star', 'lastname']."
  },
  {
    "split": "train",
    "db_id": "medicine_enzyme_interaction",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ name , id ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ id ] Output [ name , countstar AS Count_Star , id ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.medicine_id = #2.id ] Output [ #2.id , #2.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ medicine_enzyme_interaction ] Output [ medicine_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ medicine ] Output [ name , id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "medicine_enzyme_interaction",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ name , id ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ id ] Output [ name , countstar AS Count_Star , id ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.medicine_id = #2.id ] Output [ #2.id , #2.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ medicine_enzyme_interaction ] Output [ medicine_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ medicine ] Output [ name , id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "medicine_enzyme_interaction",
    "line_num": 5,
    "op": "Sort",
    "qpl_line": "#5 = Sort [ #4 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star , FDA_approved , id ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ id ] Output [ name , FDA_approved , countstar AS Count_Star , id ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.medicine_id = #2.id ] Output [ #2.FDA_approved , #2.id , #2.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ medicine_enzyme_interaction ] Output [ medicine_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ medicine ] Output [ name , FDA_approved , id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "medicine_enzyme_interaction",
    "line_num": 5,
    "op": "Sort",
    "qpl_line": "#5 = Sort [ #4 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star , FDA_approved , id ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ id ] Output [ name , FDA_approved , countstar AS Count_Star , id ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.medicine_id = #2.id ] Output [ #2.FDA_approved , #2.id , #2.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ medicine_enzyme_interaction ] Output [ medicine_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ medicine ] Output [ name , FDA_approved , id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "medicine_enzyme_interaction",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 3 ] Output [ Trade_Name , id ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ id ] Output [ countstar AS Count_Star , Trade_Name , id ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.medicine_id = #2.id ] Output [ #2.id , #2.Trade_Name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ medicine_enzyme_interaction ] Output [ medicine_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ medicine ] Output [ Trade_Name , id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'trade_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "medicine_enzyme_interaction",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 3 ] Output [ Trade_Name , id ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ id ] Output [ countstar AS Count_Star , Trade_Name , id ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.medicine_id = #2.id ] Output [ #2.id , #2.Trade_Name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ medicine_enzyme_interaction ] Output [ medicine_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ medicine ] Output [ Trade_Name , id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'trade_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "university_basketball",
    "line_num": 6,
    "op": "Join",
    "qpl_line": "#6 = Join [ #2 , #5 ] Predicate [ #5.Enrollment < #2.Avg_Enrollment ] Output [ #5.Team_Name ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Enrollment) AS Avg_Enrollment ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ university ] Output [ Enrollment ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 5,
        "op": "Join",
        "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #4.School_ID = #3.School_ID ] Output [ #3.Enrollment , #4.Team_Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ university ] Output [ Enrollment , School_ID ]",
            "children": []
          },
          {
            "line_num": 4,
            "op": "Scan",
            "qpl_line": "#4 = Scan Table [ basketball_match ] Output [ Team_Name , School_ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #6: Incompatible types for operator 'Join': 'Number' and 'basketball_match, university'"
  },
  {
    "split": "train",
    "db_id": "university_basketball",
    "line_num": 6,
    "op": "Join",
    "qpl_line": "#6 = Join [ #2 , #5 ] Predicate [ #5.Enrollment < #2.Avg_Enrollment ] Output [ #5.Team_Name ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Enrollment) AS Avg_Enrollment ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ university ] Output [ Enrollment ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 5,
        "op": "Join",
        "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #4.School_ID = #3.School_ID ] Output [ #3.Enrollment , #4.Team_Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ university ] Output [ Enrollment , School_ID ]",
            "children": []
          },
          {
            "line_num": 4,
            "op": "Scan",
            "qpl_line": "#4 = Scan Table [ basketball_match ] Output [ Team_Name , School_ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #6: Incompatible types for operator 'Join': 'Number' and 'basketball_match, university'"
  },
  {
    "split": "train",
    "db_id": "game_injury",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Score , id , Date ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ id ] Output [ countstar AS Count_Star , Score , id , Date ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.game_id = #2.id ] Output [ #2.id , #2.Score , #2.Date ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ injury_accident ] Output [ game_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ game ] Output [ Score , id , Date ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'score' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "game_injury",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star , id ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ id ] Output [ name , countstar AS Count_Star , id ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.id = #4.stadium_id ] Output [ #1.name , #1.id ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ stadium ] Output [ name , id ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.game_id = #3.id ] Output [ #3.stadium_id ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ injury_accident ] Output [ game_id ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ game ] Output [ stadium_id , id ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #6: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "game_injury",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star , id ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ id ] Output [ name , countstar AS Count_Star , id ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.id = #4.stadium_id ] Output [ #1.name , #1.id ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ stadium ] Output [ name , id ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.game_id = #3.id ] Output [ #3.stadium_id ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ injury_accident ] Output [ game_id ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ game ] Output [ stadium_id , id ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #6: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "soccer_1",
    "line_num": 3,
    "op": "Intersect",
    "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #2.player_api_id = #1.player_api_id ] Output [ #1.player_api_id ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Player ] Predicate [ height >= 180 ] Output [ player_api_id , height ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Player_Attributes ] Predicate [ overall_rating > 85 ] Output [ player_api_id , overall_rating ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'Player' and 'Player, Player_Attributes'"
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.budget > #2.Avg_budget ] Output [ #3.dept_name , #3.building ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(budget) AS Avg_budget ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ department ] Output [ budget ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ department ] Output [ dept_name , budget , building ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'department'"
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.budget > #2.Avg_budget ] Output [ #3.dept_name , #3.building ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(budget) AS Avg_budget ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ department ] Output [ budget ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ department ] Output [ dept_name , budget , building ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'department'"
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.budget > #2.Avg_budget ] Output [ #3.dept_name , #3.budget ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(budget) AS Avg_budget ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ department ] Output [ budget ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ department ] Output [ dept_name , budget ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'department'"
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.budget > #2.Avg_budget ] Output [ #3.dept_name , #3.budget ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(budget) AS Avg_budget ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ department ] Output [ budget ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ department ] Output [ dept_name , budget ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'department'"
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ s_ID ] Output [ name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.ID = #2.s_ID ] Output [ #1.ID , #1.name , #2.s_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ student ] Output [ name , ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ advisor ] Output [ s_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ s_ID ] Output [ name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.ID = #2.s_ID ] Output [ #1.ID , #1.name , #2.s_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ student ] Output [ name , ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ advisor ] Output [ s_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 7,
    "op": "Join",
    "qpl_line": "#7 = Join [ #5 , #6 ] Predicate [ #5.ID = #6.ID ] Output [ #6.name ]",
    "children": [
      {
        "line_num": 5,
        "op": "Intersect",
        "qpl_line": "#5 = Intersect [ #1 , #4 ] Predicate [ #4.prereq_id = #1.course_id ] Output [ #1.ID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ takes ] Output [ course_id , ID ]",
            "children": []
          },
          {
            "line_num": 4,
            "op": "Join",
            "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #3.prereq_id ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ course ] Predicate [ title = 'International Finance' ] Output [ course_id , title ]",
                "children": []
              },
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ prereq ] Output [ prereq_id , course_id ]",
                "children": []
              }
            ]
          }
        ]
      },
      {
        "line_num": 6,
        "op": "Scan",
        "qpl_line": "#6 = Scan Table [ student ] Output [ name , ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Intersect': 'course, student' and 'course'"
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 7,
    "op": "Join",
    "qpl_line": "#7 = Join [ #5 , #6 ] Predicate [ #5.ID = #6.ID ] Output [ #6.name ]",
    "children": [
      {
        "line_num": 5,
        "op": "Intersect",
        "qpl_line": "#5 = Intersect [ #1 , #4 ] Predicate [ #4.prereq_id = #1.course_id ] Output [ #1.ID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ takes ] Output [ course_id , ID ]",
            "children": []
          },
          {
            "line_num": 4,
            "op": "Join",
            "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #3.prereq_id ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ course ] Predicate [ title = 'International Finance' ] Output [ course_id , title ]",
                "children": []
              },
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ prereq ] Output [ prereq_id , course_id ]",
                "children": []
              }
            ]
          }
        ]
      },
      {
        "line_num": 6,
        "op": "Scan",
        "qpl_line": "#6 = Scan Table [ student ] Output [ name , ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Intersect': 'course, student' and 'course'"
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.salary < #2.Avg_salary ] Output [ #3.name , #3.salary ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(salary) AS Avg_salary ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ instructor ] Predicate [ dept_name = 'Physics' ] Output [ dept_name , salary ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ instructor ] Output [ name , salary ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'instructor'"
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.salary < #2.Avg_salary ] Output [ #3.name , #3.salary ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(salary) AS Avg_salary ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ instructor ] Predicate [ dept_name = 'Physics' ] Output [ dept_name , salary ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ instructor ] Output [ name , salary ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'instructor'"
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 4,
    "op": "Intersect",
    "qpl_line": "#4 = Intersect [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #2.course_id ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ course_id ] Output [ course_id ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ section ] Predicate [ year = 2009 AND semester = 'Fall' ] Output [ course_id , semester , year ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ section ] Predicate [ year = 2010 AND semester = 'Spring' ] Output [ course_id , semester , year ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Intersect': 'course' and 'course, section'"
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 4,
    "op": "Intersect",
    "qpl_line": "#4 = Intersect [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #2.course_id ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ course_id ] Output [ course_id ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ section ] Predicate [ year = 2009 AND semester = 'Fall' ] Output [ course_id , semester , year ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ section ] Predicate [ year = 2010 AND semester = 'Spring' ] Output [ course_id , semester , year ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Intersect': 'course' and 'course, section'"
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #2.course_id ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ course_id ] Output [ course_id ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ section ] Predicate [ year = 2009 AND semester = 'Fall' ] Output [ course_id , semester , year ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ section ] Predicate [ year = 2010 AND semester = 'Spring' ] Output [ course_id , semester , year ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'course' and 'course, section'"
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #2.course_id ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ course_id ] Output [ course_id ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ section ] Predicate [ year = 2009 AND semester = 'Fall' ] Output [ course_id , semester , year ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ section ] Predicate [ year = 2010 AND semester = 'Spring' ] Output [ course_id , semester , year ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'course' and 'course, section'"
  },
  {
    "split": "train",
    "db_id": "customers_and_invoices",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.transaction_amount > #2.Avg_transaction_amount ] Output [ #3.transaction_id ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(transaction_amount) AS Avg_transaction_amount ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Financial_Transactions ] Output [ transaction_amount ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ Financial_Transactions ] Output [ transaction_id , transaction_amount ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'Financial_Transactions'"
  },
  {
    "split": "train",
    "db_id": "customers_and_invoices",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.transaction_amount > #2.Avg_transaction_amount ] Output [ #3.transaction_id ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(transaction_amount) AS Avg_transaction_amount ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Financial_Transactions ] Output [ transaction_amount ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ Financial_Transactions ] Output [ transaction_id , transaction_amount ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'Financial_Transactions'"
  },
  {
    "split": "train",
    "db_id": "wedding",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Age < #2.Avg_Age ] Output [ #3.Name , #3.Country ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Age) AS Avg_Age ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ people ] Output [ Age ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ people ] Output [ Country , Name , Age ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'people'"
  },
  {
    "split": "train",
    "db_id": "wedding",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Church_ID ] Output [ countstar AS Count_Star , Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Church_ID = #2.Church_ID ] Output [ #2.Name , #2.Church_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ wedding ] Output [ Church_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ church ] Output [ Church_ID , Name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "theme_gallery",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Artist_ID ] Output [ countstar AS Count_Star , Name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Artist_ID = #2.Artist_ID ] Output [ #2.Name , #1.Artist_ID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ exhibition ] Output [ Artist_ID ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ artist ] Output [ Artist_ID , Name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "theme_gallery",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Artist_ID ] Output [ countstar AS Count_Star , Name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Artist_ID = #2.Artist_ID ] Output [ #2.Name , #1.Artist_ID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ exhibition ] Output [ Artist_ID ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ artist ] Output [ Artist_ID , Name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "theme_gallery",
    "line_num": 6,
    "op": "Join",
    "qpl_line": "#6 = Join [ #1 , #5 ] Predicate [ #5.Artist_ID = #1.Artist_ID ] Output [ #5.Theme , #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ artist ] Output [ Artist_ID , Name ]",
        "children": []
      },
      {
        "line_num": 5,
        "op": "Join",
        "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #4.Ticket_Price > #3.Avg_Ticket_Price ] Output [ #4.Theme , #4.Artist_ID ]",
        "children": [
          {
            "line_num": 3,
            "op": "Aggregate",
            "qpl_line": "#3 = Aggregate [ #2 ] Output [ AVG(Ticket_Price) AS Avg_Ticket_Price ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ exhibition ] Output [ Ticket_Price ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 4,
            "op": "Scan",
            "qpl_line": "#4 = Scan Table [ exhibition ] Output [ Theme , Artist_ID , Ticket_Price ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Join': 'Number' and 'artist, exhibition'"
  },
  {
    "split": "train",
    "db_id": "theme_gallery",
    "line_num": 6,
    "op": "Join",
    "qpl_line": "#6 = Join [ #1 , #5 ] Predicate [ #5.Artist_ID = #1.Artist_ID ] Output [ #5.Theme , #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ artist ] Output [ Artist_ID , Name ]",
        "children": []
      },
      {
        "line_num": 5,
        "op": "Join",
        "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #4.Ticket_Price > #3.Avg_Ticket_Price ] Output [ #4.Theme , #4.Artist_ID ]",
        "children": [
          {
            "line_num": 3,
            "op": "Aggregate",
            "qpl_line": "#3 = Aggregate [ #2 ] Output [ AVG(Ticket_Price) AS Avg_Ticket_Price ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ exhibition ] Output [ Ticket_Price ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 4,
            "op": "Scan",
            "qpl_line": "#4 = Scan Table [ exhibition ] Output [ Theme , Artist_ID , Ticket_Price ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Join': 'Number' and 'artist, exhibition'"
  },
  {
    "split": "train",
    "db_id": "epinions_1",
    "line_num": 6,
    "op": "Join",
    "qpl_line": "#6 = Join [ #1 , #5 ] Predicate [ #5.i_id = #1.i_id ] Output [ #1.title ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ item ] Output [ i_id , title ]",
        "children": []
      },
      {
        "line_num": 5,
        "op": "Join",
        "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #4.rating > #3.Avg_rating ] Output [ #4.i_id ]",
        "children": [
          {
            "line_num": 3,
            "op": "Aggregate",
            "qpl_line": "#3 = Aggregate [ #2 ] Output [ AVG(rating) AS Avg_rating ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ review ] Output [ rating ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 4,
            "op": "Scan",
            "qpl_line": "#4 = Scan Table [ review ] Output [ i_id , rating ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Join': 'Number' and 'item, review'"
  },
  {
    "split": "train",
    "db_id": "small_bank_1",
    "line_num": 5,
    "op": "Aggregate",
    "qpl_line": "#5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.balance > #2.Avg_balance ] Output [ 1 AS One ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(balance) AS Avg_balance ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ SAVINGS ] Output [ balance ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ SAVINGS ] Output [ balance ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'SAVINGS'"
  },
  {
    "split": "train",
    "db_id": "small_bank_1",
    "line_num": 5,
    "op": "Aggregate",
    "qpl_line": "#5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.balance > #2.Avg_balance ] Output [ 1 AS One ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(balance) AS Avg_balance ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ SAVINGS ] Output [ balance ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ SAVINGS ] Output [ balance ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'SAVINGS'"
  },
  {
    "split": "train",
    "db_id": "small_bank_1",
    "line_num": 14,
    "op": "Intersect",
    "qpl_line": "#14 = Intersect [ #7 , #13 ] Predicate [ #7.name = #13.name ] Output [ #7.name ]",
    "children": [
      {
        "line_num": 7,
        "op": "Aggregate",
        "qpl_line": "#7 = Aggregate [ #6 ] GroupBy [ name ] Output [ name ]",
        "children": [
          {
            "line_num": 6,
            "op": "Join",
            "qpl_line": "#6 = Join [ #2 , #5 ] Predicate [ #5.balance > #2.Avg_balance ] Output [ #5.name ]",
            "children": [
              {
                "line_num": 2,
                "op": "Aggregate",
                "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(balance) AS Avg_balance ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ CHECKING ] Output [ balance ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 5,
                "op": "Join",
                "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #4.custid = #3.custid ] Output [ #3.name , #4.balance ]",
                "children": [
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ ACCOUNTS ] Output [ name , custid ]",
                    "children": []
                  },
                  {
                    "line_num": 4,
                    "op": "Scan",
                    "qpl_line": "#4 = Scan Table [ CHECKING ] Output [ custid , balance ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "line_num": 13,
        "op": "Join",
        "qpl_line": "#13 = Join [ #8 , #12 ] Predicate [ #12.custid = #8.custid ] Output [ #8.name ]",
        "children": [
          {
            "line_num": 8,
            "op": "Scan",
            "qpl_line": "#8 = Scan Table [ ACCOUNTS ] Output [ name , custid ]",
            "children": []
          },
          {
            "line_num": 12,
            "op": "Join",
            "qpl_line": "#12 = Join [ #10 , #11 ] Predicate [ #11.balance < #10.Avg_balance ] Output [ #11.custid ]",
            "children": [
              {
                "line_num": 10,
                "op": "Aggregate",
                "qpl_line": "#10 = Aggregate [ #9 ] Output [ AVG(balance) AS Avg_balance ]",
                "children": [
                  {
                    "line_num": 9,
                    "op": "Scan",
                    "qpl_line": "#9 = Scan Table [ SAVINGS ] Output [ balance ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 11,
                "op": "Scan",
                "qpl_line": "#11 = Scan Table [ SAVINGS ] Output [ custid , balance ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #6: Incompatible types for operator 'Join': 'Number' and 'ACCOUNTS, CHECKING'"
  },
  {
    "split": "train",
    "db_id": "small_bank_1",
    "line_num": 14,
    "op": "Intersect",
    "qpl_line": "#14 = Intersect [ #7 , #13 ] Predicate [ #7.name = #13.name ] Output [ #7.name ]",
    "children": [
      {
        "line_num": 7,
        "op": "Aggregate",
        "qpl_line": "#7 = Aggregate [ #6 ] GroupBy [ name ] Output [ name ]",
        "children": [
          {
            "line_num": 6,
            "op": "Join",
            "qpl_line": "#6 = Join [ #2 , #5 ] Predicate [ #5.balance > #2.Avg_balance ] Output [ #5.name ]",
            "children": [
              {
                "line_num": 2,
                "op": "Aggregate",
                "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(balance) AS Avg_balance ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ CHECKING ] Output [ balance ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 5,
                "op": "Join",
                "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #4.custid = #3.custid ] Output [ #3.name , #4.balance ]",
                "children": [
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ ACCOUNTS ] Output [ name , custid ]",
                    "children": []
                  },
                  {
                    "line_num": 4,
                    "op": "Scan",
                    "qpl_line": "#4 = Scan Table [ CHECKING ] Output [ custid , balance ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "line_num": 13,
        "op": "Join",
        "qpl_line": "#13 = Join [ #8 , #12 ] Predicate [ #12.custid = #8.custid ] Output [ #8.name ]",
        "children": [
          {
            "line_num": 8,
            "op": "Scan",
            "qpl_line": "#8 = Scan Table [ ACCOUNTS ] Output [ name , custid ]",
            "children": []
          },
          {
            "line_num": 12,
            "op": "Join",
            "qpl_line": "#12 = Join [ #10 , #11 ] Predicate [ #11.balance < #10.Avg_balance ] Output [ #11.custid ]",
            "children": [
              {
                "line_num": 10,
                "op": "Aggregate",
                "qpl_line": "#10 = Aggregate [ #9 ] Output [ AVG(balance) AS Avg_balance ]",
                "children": [
                  {
                    "line_num": 9,
                    "op": "Scan",
                    "qpl_line": "#9 = Scan Table [ SAVINGS ] Output [ balance ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 11,
                "op": "Scan",
                "qpl_line": "#11 = Scan Table [ SAVINGS ] Output [ custid , balance ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #6: Incompatible types for operator 'Join': 'Number' and 'ACCOUNTS, CHECKING'"
  },
  {
    "split": "train",
    "db_id": "small_bank_1",
    "line_num": 11,
    "op": "Join",
    "qpl_line": "#11 = Join [ #9 , #10 ] Predicate [ #10.custid = #9.custid ] Output [ #10.balance ]",
    "children": [
      {
        "line_num": 9,
        "op": "Aggregate",
        "qpl_line": "#9 = Aggregate [ #8 ] GroupBy [ custid ] Output [ custid ]",
        "children": [
          {
            "line_num": 8,
            "op": "Join",
            "qpl_line": "#8 = Join [ #2 , #7 ] Predicate [ #7.balance > #2.Avg_balance ] Output [ #7.custid ]",
            "children": [
              {
                "line_num": 2,
                "op": "Aggregate",
                "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(balance) AS Avg_balance ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ SAVINGS ] Output [ balance ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 7,
                "op": "Join",
                "qpl_line": "#7 = Join [ #5 , #6 ] Predicate [ #6.custid = #5.custid ] Output [ #6.balance , #5.custid ]",
                "children": [
                  {
                    "line_num": 5,
                    "op": "Join",
                    "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.name = #4.name ] Output [ #3.custid ]",
                    "children": [
                      {
                        "line_num": 3,
                        "op": "Scan",
                        "qpl_line": "#3 = Scan Table [ ACCOUNTS ] Output [ name , custid ]",
                        "children": []
                      },
                      {
                        "line_num": 4,
                        "op": "Scan",
                        "qpl_line": "#4 = Scan Table [ ACCOUNTS ] Output [ name , custid ]",
                        "children": []
                      }
                    ]
                  },
                  {
                    "line_num": 6,
                    "op": "Scan",
                    "qpl_line": "#6 = Scan Table [ SAVINGS ] Output [ custid , balance ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "line_num": 10,
        "op": "Scan",
        "qpl_line": "#10 = Scan Table [ CHECKING ] Output [ custid , balance ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #8: Incompatible types for operator 'Join': 'Number' and 'ACCOUNTS, SAVINGS'"
  },
  {
    "split": "train",
    "db_id": "small_bank_1",
    "line_num": 11,
    "op": "Join",
    "qpl_line": "#11 = Join [ #9 , #10 ] Predicate [ #10.custid = #9.custid ] Output [ #10.balance ]",
    "children": [
      {
        "line_num": 9,
        "op": "Aggregate",
        "qpl_line": "#9 = Aggregate [ #8 ] GroupBy [ custid ] Output [ custid ]",
        "children": [
          {
            "line_num": 8,
            "op": "Join",
            "qpl_line": "#8 = Join [ #2 , #7 ] Predicate [ #7.balance > #2.Avg_balance ] Output [ #7.custid ]",
            "children": [
              {
                "line_num": 2,
                "op": "Aggregate",
                "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(balance) AS Avg_balance ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ SAVINGS ] Output [ balance ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 7,
                "op": "Join",
                "qpl_line": "#7 = Join [ #5 , #6 ] Predicate [ #6.custid = #5.custid ] Output [ #6.balance , #5.custid ]",
                "children": [
                  {
                    "line_num": 5,
                    "op": "Join",
                    "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.name = #4.name ] Output [ #3.custid ]",
                    "children": [
                      {
                        "line_num": 3,
                        "op": "Scan",
                        "qpl_line": "#3 = Scan Table [ ACCOUNTS ] Output [ name , custid ]",
                        "children": []
                      },
                      {
                        "line_num": 4,
                        "op": "Scan",
                        "qpl_line": "#4 = Scan Table [ ACCOUNTS ] Output [ name , custid ]",
                        "children": []
                      }
                    ]
                  },
                  {
                    "line_num": 6,
                    "op": "Scan",
                    "qpl_line": "#6 = Scan Table [ SAVINGS ] Output [ custid , balance ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "line_num": 10,
        "op": "Scan",
        "qpl_line": "#10 = Scan Table [ CHECKING ] Output [ custid , balance ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #8: Incompatible types for operator 'Join': 'Number' and 'ACCOUNTS, SAVINGS'"
  },
  {
    "split": "train",
    "db_id": "small_bank_1",
    "line_num": 6,
    "op": "Join",
    "qpl_line": "#6 = Join [ #1 , #5 ] Predicate [ #5.custid = #1.custid ] Output [ #1.name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ ACCOUNTS ] Output [ name , custid ]",
        "children": []
      },
      {
        "line_num": 5,
        "op": "Join",
        "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #4.balance < #3.Avg_balance ] Output [ #4.custid ]",
        "children": [
          {
            "line_num": 3,
            "op": "Aggregate",
            "qpl_line": "#3 = Aggregate [ #2 ] Output [ AVG(balance) AS Avg_balance ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ CHECKING ] Output [ balance ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 4,
            "op": "Scan",
            "qpl_line": "#4 = Scan Table [ CHECKING ] Output [ custid , balance ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Join': 'Number' and 'ACCOUNTS, CHECKING'"
  },
  {
    "split": "train",
    "db_id": "small_bank_1",
    "line_num": 6,
    "op": "Join",
    "qpl_line": "#6 = Join [ #1 , #5 ] Predicate [ #5.custid = #1.custid ] Output [ #1.name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ ACCOUNTS ] Output [ name , custid ]",
        "children": []
      },
      {
        "line_num": 5,
        "op": "Join",
        "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #4.balance < #3.Avg_balance ] Output [ #4.custid ]",
        "children": [
          {
            "line_num": 3,
            "op": "Aggregate",
            "qpl_line": "#3 = Aggregate [ #2 ] Output [ AVG(balance) AS Avg_balance ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ CHECKING ] Output [ balance ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 4,
            "op": "Scan",
            "qpl_line": "#4 = Scan Table [ CHECKING ] Output [ custid , balance ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Join': 'Number' and 'ACCOUNTS, CHECKING'"
  },
  {
    "split": "train",
    "db_id": "school_finance",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Enrollment > #2.Avg_Enrollment ] Output [ #3.Mascot ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Enrollment) AS Avg_Enrollment ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ School ] Output [ Enrollment ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ School ] Output [ Enrollment , Mascot ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'School'"
  },
  {
    "split": "train",
    "db_id": "school_finance",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ School_name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ School_id ] Output [ School_name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.School_id = #2.School_id ] Output [ #1.School_name , #2.School_id ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ School ] Output [ School_name , School_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ endowment ] Predicate [ amount > 8.5 ] Output [ amount , School_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'school_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "protein_institute",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Height_feet , Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ building_id ] Output [ Height_feet , countstar AS Count_Star , Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.building_id = #2.building_id ] Output [ #1.Name , #1.Height_feet , #1.building_id ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ building ] Output [ Height_feet , Name , building_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Institution ] Predicate [ Founded > 1880.0 ] Output [ Founded , building_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'height_feet' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "protein_institute",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Institution_id ] Output [ countstar AS Count_Star , Institution ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Institution_id = #2.Institution_id ] Output [ #2.Institution , #2.Institution_id ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ protein ] Output [ Institution_id ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Institution ] Output [ Institution_id , Institution ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'institution' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "cinema",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Capacity > #2.Avg_Capacity ] Output [ #3.Name , #3.Location ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Capacity) AS Avg_Capacity ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ cinema ] Output [ Capacity ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ cinema ] Output [ Location , Capacity , Name ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'cinema'"
  },
  {
    "split": "train",
    "db_id": "cinema",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Cinema_ID ] Output [ SUM(Show_times_per_day) AS Sum_Show_times_per_day , Name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Cinema_ID = #2.Cinema_ID ] Output [ #2.Name , #1.Cinema_ID , #1.Show_times_per_day ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ schedule ] Output [ Cinema_ID , Show_times_per_day ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ cinema ] Output [ Cinema_ID , Name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "cinema",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Film_ID ] Output [ Title , MAX(Price) AS Max_Price ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Film_ID = #2.Film_ID ] Output [ #2.Price , #1.Title , #2.Film_ID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ film ] Output [ Film_ID , Title ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ schedule ] Output [ Film_ID , Price ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'title' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "cinema",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Film_ID ] Output [ Title , MAX(Price) AS Max_Price ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Film_ID = #2.Film_ID ] Output [ #2.Price , #1.Title , #2.Film_ID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ film ] Output [ Film_ID , Title ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ schedule ] Output [ Film_ID , Price ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'title' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "products_for_hire",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 3,
        "op": "Except",
        "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ 1 AS One ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Products_for_Hire ] Output [ product_id ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Products_Booked ] Predicate [ booked_amount > 200.0 ] Output [ product_id , booked_amount ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Products_for_Hire' and 'Products_Booked, Products_for_Hire'"
  },
  {
    "split": "train",
    "db_id": "gas_company",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Company_ID ] Output [ countstar AS Count_Star , Company ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Company_ID = #2.Company_ID ] Output [ #1.Company_ID , #2.Company ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ station_company ] Output [ Company_ID ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ company ] Output [ Company_ID , Company ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'company' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "gas_company",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Company_ID ] Output [ countstar AS Count_Star , Company ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Company_ID = #2.Company_ID ] Output [ #1.Company_ID , #2.Company ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ station_company ] Output [ Company_ID ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ company ] Output [ Company_ID , Company ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'company' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "party_people",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Member_Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Member_in_charge_ID ] Output [ countstar AS Count_Star , Member_Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Member_in_charge_ID = #2.Member_ID ] Output [ #2.Member_ID , #2.Member_Name , #1.Member_in_charge_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ party_events ] Output [ Member_in_charge_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ member ] Output [ Member_Name , Member_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'member_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "party_people",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Member_Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Member_in_charge_ID ] Output [ countstar AS Count_Star , Member_Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Member_in_charge_ID = #2.Member_ID ] Output [ #2.Member_ID , #2.Member_Name , #1.Member_in_charge_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ party_events ] Output [ Member_in_charge_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ member ] Output [ Member_Name , Member_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'member_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "cre_Doc_Control_Systems",
    "line_num": 5,
    "op": "Except",
    "qpl_line": "#5 = Except [ #1 , #4 ] Predicate [ #1.document_id = #4.document_id ] Output [ #1.document_id ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Documents ] Predicate [ document_status_code = 'done' AND document_type_code = 'Paper' ] Output [ document_status_code , document_id , document_type_code ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.shipping_agent_code = #3.shipping_agent_code ] Output [ #3.document_id ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Ref_Shipping_Agents ] Predicate [ shipping_agent_name = 'USPS' ] Output [ shipping_agent_code , shipping_agent_name ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ Documents ] Output [ shipping_agent_code , document_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Except': 'Documents, Ref_Document_Status, Ref_Document_Types' and 'Documents'"
  },
  {
    "split": "train",
    "db_id": "cre_Doc_Control_Systems",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , employee_name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ employee_name , document_id , draft_number , copy_number ] Output [ countstar AS Count_Star , employee_name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.employee_id = #2.employee_id ] Output [ #1.draft_number , #1.copy_number , #1.document_id , #2.employee_name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Circulation_History ] Output [ draft_number , employee_id , copy_number , document_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Employees ] Output [ employee_id , employee_name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: GroupBy column 'document_id' not found in aggregate output: ['count_star', 'employee_name']."
  },
  {
    "split": "train",
    "db_id": "local_govt_in_alabama",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Service_Type_Code , Count_Star , Service_ID ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ Service_ID ] Output [ countstar AS Count_Star , Service_Type_Code , Service_ID ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.Service_ID = #4.Service_ID ] Output [ #1.Service_Type_Code , #4.Service_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Services ] Output [ Service_Type_Code , Service_ID ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.Event_ID = #3.Event_ID ] Output [ #2.Service_ID ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Events ] Output [ Event_ID , Service_ID ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ Participants_in_Events ] Output [ Event_ID ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #6: Column 'service_type_code' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "formula_1",
    "line_num": 3,
    "op": "Intersect",
    "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #2.driverId = #1.driverId ] Output [ #1.driverId , #1.nationality ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ drivers ] Output [ driverId , nationality ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ lapTimes ] Predicate [ milliseconds > 100000 ] Output [ driverId , milliseconds ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'drivers' and 'drivers, lapTimes'"
  },
  {
    "split": "train",
    "db_id": "formula_1",
    "line_num": 3,
    "op": "Intersect",
    "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #2.driverId = #1.driverId ] Output [ #1.driverId , #1.nationality ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ drivers ] Output [ driverId , nationality ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ lapTimes ] Predicate [ milliseconds > 100000 ] Output [ driverId , milliseconds ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'drivers' and 'drivers, lapTimes'"
  },
  {
    "split": "train",
    "db_id": "formula_1",
    "line_num": 11,
    "op": "Filter",
    "qpl_line": "#11 = Filter [ #10 ] Predicate [ Count_Star > 5 ] Output [ driverId , surname ]",
    "children": [
      {
        "line_num": 10,
        "op": "Aggregate",
        "qpl_line": "#10 = Aggregate [ #9 ] GroupBy [ driverId ] Output [ driverId , countstar AS Count_Star , surname ]",
        "children": [
          {
            "line_num": 9,
            "op": "Join",
            "qpl_line": "#9 = Join [ #7 , #8 ] Predicate [ #7.driverId = #8.driverId ] Output [ #7.driverId , #7.surname ]",
            "children": [
              {
                "line_num": 7,
                "op": "Join",
                "qpl_line": "#7 = Join [ #5 , #6 ] Predicate [ #5.surname = #6.surname ] Output [ #5.surname , #5.driverId ]",
                "children": [
                  {
                    "line_num": 5,
                    "op": "Filter",
                    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star = 11 ] Output [ driverId , surname ]",
                    "children": [
                      {
                        "line_num": 4,
                        "op": "Join",
                        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.driverId = #3.driverId ] Output [ #3.surname , #3.driverId , #2.Count_Star ]",
                        "children": [
                          {
                            "line_num": 2,
                            "op": "Aggregate",
                            "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ driverId ] Output [ driverId , countstar AS Count_Star ]",
                            "children": [
                              {
                                "line_num": 1,
                                "op": "Scan",
                                "qpl_line": "#1 = Scan Table [ pitStops ] Output [ driverId ]",
                                "children": []
                              }
                            ]
                          },
                          {
                            "line_num": 3,
                            "op": "Scan",
                            "qpl_line": "#3 = Scan Table [ drivers ] Output [ driverId , surname ]",
                            "children": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "line_num": 6,
                    "op": "Scan",
                    "qpl_line": "#6 = Scan Table [ drivers ] Output [ driverId , surname ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 8,
                "op": "Scan",
                "qpl_line": "#8 = Scan Table [ results ] Output [ driverId ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #10: Column 'surname' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "formula_1",
    "line_num": 11,
    "op": "Filter",
    "qpl_line": "#11 = Filter [ #10 ] Predicate [ Count_Star > 5 ] Output [ driverId , surname ]",
    "children": [
      {
        "line_num": 10,
        "op": "Aggregate",
        "qpl_line": "#10 = Aggregate [ #9 ] GroupBy [ driverId ] Output [ driverId , countstar AS Count_Star , surname ]",
        "children": [
          {
            "line_num": 9,
            "op": "Join",
            "qpl_line": "#9 = Join [ #7 , #8 ] Predicate [ #7.driverId = #8.driverId ] Output [ #7.driverId , #7.surname ]",
            "children": [
              {
                "line_num": 7,
                "op": "Join",
                "qpl_line": "#7 = Join [ #5 , #6 ] Predicate [ #5.surname = #6.surname ] Output [ #5.surname , #5.driverId ]",
                "children": [
                  {
                    "line_num": 5,
                    "op": "Filter",
                    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star = 11 ] Output [ driverId , surname ]",
                    "children": [
                      {
                        "line_num": 4,
                        "op": "Join",
                        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.driverId = #3.driverId ] Output [ #3.surname , #3.driverId , #2.Count_Star ]",
                        "children": [
                          {
                            "line_num": 2,
                            "op": "Aggregate",
                            "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ driverId ] Output [ driverId , countstar AS Count_Star ]",
                            "children": [
                              {
                                "line_num": 1,
                                "op": "Scan",
                                "qpl_line": "#1 = Scan Table [ pitStops ] Output [ driverId ]",
                                "children": []
                              }
                            ]
                          },
                          {
                            "line_num": 3,
                            "op": "Scan",
                            "qpl_line": "#3 = Scan Table [ drivers ] Output [ driverId , surname ]",
                            "children": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "line_num": 6,
                    "op": "Scan",
                    "qpl_line": "#6 = Scan Table [ drivers ] Output [ driverId , surname ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 8,
                "op": "Scan",
                "qpl_line": "#8 = Scan Table [ results ] Output [ driverId ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #10: Column 'surname' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "csu_1",
    "line_num": 5,
    "op": "Aggregate",
    "qpl_line": "#5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.CampusFee > #2.Avg_CampusFee ] Output [ 1 AS One ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(CampusFee) AS Avg_CampusFee ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ csu_fees ] Output [ CampusFee ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ csu_fees ] Output [ CampusFee ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'csu_fees'"
  },
  {
    "split": "train",
    "db_id": "csu_1",
    "line_num": 5,
    "op": "Aggregate",
    "qpl_line": "#5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.CampusFee > #2.Avg_CampusFee ] Output [ 1 AS One ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(CampusFee) AS Avg_CampusFee ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ csu_fees ] Output [ CampusFee ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ csu_fees ] Output [ CampusFee ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'csu_fees'"
  },
  {
    "split": "train",
    "db_id": "csu_1",
    "line_num": 5,
    "op": "Aggregate",
    "qpl_line": "#5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.CampusFee > #2.Avg_CampusFee ] Output [ 1 AS One ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(CampusFee) AS Avg_CampusFee ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ csu_fees ] Output [ CampusFee ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ csu_fees ] Output [ CampusFee ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'csu_fees'"
  },
  {
    "split": "train",
    "db_id": "candidate_poll",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Height < #2.Avg_Height ] Output [ #3.Name ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Height) AS Avg_Height ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ people ] Output [ Height ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ people ] Output [ Name , Height ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'people'"
  },
  {
    "split": "train",
    "db_id": "candidate_poll",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Height < #2.Avg_Height ] Output [ #3.Name ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Height) AS Avg_Height ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ people ] Output [ Height ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ people ] Output [ Name , Height ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'people'"
  },
  {
    "split": "train",
    "db_id": "movie_1",
    "line_num": 8,
    "op": "Join",
    "qpl_line": "#8 = Join [ #1 , #7 ] Predicate [ #7.mID = #1.mID ] Output [ #1.title , #1.director ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Movie ] Output [ director , mID , title ]",
        "children": []
      },
      {
        "line_num": 7,
        "op": "Join",
        "qpl_line": "#7 = Join [ #5 , #6 ] Predicate [ #6.stars > #5.Avg_stars ] Output [ #6.mID ]",
        "children": [
          {
            "line_num": 5,
            "op": "Aggregate",
            "qpl_line": "#5 = Aggregate [ #4 ] Output [ AVG(stars) AS Avg_stars ]",
            "children": [
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.mID = #2.mID ] Output [ #3.stars ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Movie ] Predicate [ director = 'James Cameron' ] Output [ director , mID ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ Rating ] Output [ stars , mID ]",
                    "children": []
                  }
                ]
              }
            ]
          },
          {
            "line_num": 6,
            "op": "Scan",
            "qpl_line": "#6 = Scan Table [ Rating ] Output [ stars , mID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #7: Incompatible types for operator 'Join': 'Number' and 'Movie, Rating'"
  },
  {
    "split": "train",
    "db_id": "movie_1",
    "line_num": 8,
    "op": "Join",
    "qpl_line": "#8 = Join [ #1 , #7 ] Predicate [ #7.mID = #1.mID ] Output [ #1.title , #1.director ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Movie ] Output [ director , mID , title ]",
        "children": []
      },
      {
        "line_num": 7,
        "op": "Join",
        "qpl_line": "#7 = Join [ #5 , #6 ] Predicate [ #6.stars > #5.Avg_stars ] Output [ #6.mID ]",
        "children": [
          {
            "line_num": 5,
            "op": "Aggregate",
            "qpl_line": "#5 = Aggregate [ #4 ] Output [ AVG(stars) AS Avg_stars ]",
            "children": [
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.mID = #2.mID ] Output [ #3.stars ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Movie ] Predicate [ director = 'James Cameron' ] Output [ director , mID ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ Rating ] Output [ stars , mID ]",
                    "children": []
                  }
                ]
              }
            ]
          },
          {
            "line_num": 6,
            "op": "Scan",
            "qpl_line": "#6 = Scan Table [ Rating ] Output [ stars , mID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #7: Incompatible types for operator 'Join': 'Number' and 'Movie, Rating'"
  },
  {
    "split": "train",
    "db_id": "movie_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.rID = #2.rID ] Output [ #1.rID ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Rating ] Distinct [ true ] Output [ rID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Rating ] Predicate [ stars = 4 ] Output [ rID , stars ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Reviewer' and 'Rating, Reviewer'"
  },
  {
    "split": "train",
    "db_id": "movie_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.rID = #2.rID ] Output [ #1.rID ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Rating ] Distinct [ true ] Output [ rID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Rating ] Predicate [ stars = 4 ] Output [ rID , stars ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Reviewer' and 'Rating, Reviewer'"
  },
  {
    "split": "train",
    "db_id": "inn_1",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.basePrice > #2.Avg_basePrice ] Output [ #3.roomName ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(basePrice) AS Avg_basePrice ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Rooms ] Output [ basePrice ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ Rooms ] Output [ basePrice , roomName ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'Rooms'"
  },
  {
    "split": "train",
    "db_id": "inn_1",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.basePrice > #2.Avg_basePrice ] Output [ #3.roomName ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(basePrice) AS Avg_basePrice ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Rooms ] Output [ basePrice ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ Rooms ] Output [ basePrice , roomName ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'Rooms'"
  },
  {
    "split": "train",
    "db_id": "local_govt_mdm",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 1 ] Output [ cmi_cross_ref_id , source_system_code ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ cmi_cross_ref_id ] Output [ cmi_cross_ref_id , countstar AS Count_Star , source_system_code ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.cmi_cross_ref_id = #2.cmi_cross_ref_id ] Output [ #2.source_system_code , #2.cmi_cross_ref_id ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Council_Tax ] Output [ cmi_cross_ref_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ CMI_Cross_References ] Output [ cmi_cross_ref_id , source_system_code ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'source_system_code' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "storm_record",
    "line_num": 5,
    "op": "Aggregate",
    "qpl_line": "#5 = Aggregate [ #4 ] Output [ SUM(Damage_millions_USD) AS Sum_Damage_millions_USD , SUM(Number_Deaths) AS Sum_Number_Deaths ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Max_speed > #2.Avg_Max_speed ] Output [ #3.Damage_millions_USD , #3.Number_Deaths ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Max_speed) AS Avg_Max_speed ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ storm ] Output [ Max_speed ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ storm ] Output [ Damage_millions_USD , Number_Deaths , Max_speed ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'storm'"
  },
  {
    "split": "train",
    "db_id": "storm_record",
    "line_num": 5,
    "op": "Aggregate",
    "qpl_line": "#5 = Aggregate [ #4 ] Output [ SUM(Damage_millions_USD) AS Sum_Damage_millions_USD , SUM(Number_Deaths) AS Sum_Number_Deaths ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Max_speed > #2.Avg_Max_speed ] Output [ #3.Damage_millions_USD , #3.Number_Deaths ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Max_speed) AS Avg_Max_speed ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ storm ] Output [ Max_speed ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ storm ] Output [ Damage_millions_USD , Number_Deaths , Max_speed ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'storm'"
  },
  {
    "split": "train",
    "db_id": "restaurant_1",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ LName , Count_Star , Fname ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ StuID ] Output [ countstar AS Count_Star , LName , Fname ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #2.LName , #2.Fname , #2.StuID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Visits_Restaurant ] Output [ StuID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Student ] Output [ LName , Fname , StuID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'lname' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "icfp_1",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , lname ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ fname , lname ] Output [ countstar AS Count_Star , lname ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.authID = #2.authID ] Output [ #1.lname , #1.fname ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Authors ] Output [ fname , authID , lname ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Authorship ] Output [ authID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: GroupBy column 'fname' not found in aggregate output: ['count_star', 'lname']."
  },
  {
    "split": "train",
    "db_id": "icfp_1",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , lname ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ fname , lname ] Output [ countstar AS Count_Star , lname ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.authID = #2.authID ] Output [ #1.lname , #1.fname ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Authors ] Output [ fname , authID , lname ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Authorship ] Output [ authID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: GroupBy column 'fname' not found in aggregate output: ['count_star', 'lname']."
  },
  {
    "split": "train",
    "db_id": "sakila_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.customer_id = #1.customer_id ] Output [ #1.first_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ customer ] Output [ customer_id , first_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ rental ] Predicate [ rental_date > '2005-08-23 02:06:01.000' ] Output [ rental_date , customer_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'customer' and 'customer, rental'"
  },
  {
    "split": "train",
    "db_id": "sakila_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.customer_id = #1.customer_id ] Output [ #1.first_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ customer ] Output [ customer_id , first_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ rental ] Predicate [ rental_date > '2005-08-23 02:06:01.000' ] Output [ rental_date , customer_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'customer' and 'customer, rental'"
  },
  {
    "split": "train",
    "db_id": "loan_1",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.credit_score < #2.Avg_credit_score ] Output [ #3.cust_name ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(credit_score) AS Avg_credit_score ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ customer ] Output [ credit_score ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ customer ] Output [ cust_name , credit_score ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'customer'"
  },
  {
    "split": "train",
    "db_id": "loan_1",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.credit_score < #2.Avg_credit_score ] Output [ #3.cust_name ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(credit_score) AS Avg_credit_score ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ customer ] Output [ credit_score ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ customer ] Output [ cust_name , credit_score ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'customer'"
  },
  {
    "split": "train",
    "db_id": "assets_maintenance",
    "line_num": 11,
    "op": "Union",
    "qpl_line": "#11 = Union [ #5 , #10 ] Output [ #5.company_id , #5.company_name ]",
    "children": [
      {
        "line_num": 5,
        "op": "Filter",
        "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ company_id , company_name ]",
        "children": [
          {
            "line_num": 4,
            "op": "Aggregate",
            "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ company_id ] Output [ company_id , countstar AS Count_Star , company_name ]",
            "children": [
              {
                "line_num": 3,
                "op": "Join",
                "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.company_id = #2.company_id ] Output [ #2.company_name , #2.company_id ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ Maintenance_Engineers ] Output [ company_id ]",
                    "children": []
                  },
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Third_Party_Companies ] Output [ company_id , company_name ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "line_num": 10,
        "op": "Filter",
        "qpl_line": "#10 = Filter [ #9 ] Predicate [ Count_Star >= 2 ] Output [ company_id , company_name ]",
        "children": [
          {
            "line_num": 9,
            "op": "Aggregate",
            "qpl_line": "#9 = Aggregate [ #8 ] GroupBy [ company_id ] Output [ company_id , countstar AS Count_Star , company_name ]",
            "children": [
              {
                "line_num": 8,
                "op": "Join",
                "qpl_line": "#8 = Join [ #6 , #7 ] Predicate [ #6.maintenance_contract_company_id = #7.company_id ] Output [ #7.company_name , #7.company_id ]",
                "children": [
                  {
                    "line_num": 6,
                    "op": "Scan",
                    "qpl_line": "#6 = Scan Table [ Maintenance_Contracts ] Output [ maintenance_contract_company_id ]",
                    "children": []
                  },
                  {
                    "line_num": 7,
                    "op": "Scan",
                    "qpl_line": "#7 = Scan Table [ Third_Party_Companies ] Output [ company_id , company_name ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'company_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "assets_maintenance",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ part_id , Count_Star , part_name ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ part_id ] Output [ countstar AS Count_Star , part_id , part_name ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.part_fault_id = #4.part_fault_id ] Output [ #4.part_id , #4.part_name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Skills_Required_To_Fix ] Output [ part_fault_id ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.part_id = #3.part_id ] Output [ #3.part_fault_id , #2.part_id , #2.part_name ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Parts ] Output [ part_id , part_name ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ Part_Faults ] Output [ part_id , part_fault_id ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #6: Column 'part_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "college_1",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Sum_CRS_CREDIT DESC ] Output [ Sum_CRS_CREDIT , DEPT_NAME ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ DEPT_CODE ] Output [ SUM(CRS_CREDIT) AS Sum_CRS_CREDIT , DEPT_NAME ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.CRS_CODE = #4.CRS_CODE ] Output [ #3.DEPT_NAME , #3.DEPT_CODE , #3.CRS_CREDIT ]",
            "children": [
              {
                "line_num": 3,
                "op": "Join",
                "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.DEPT_CODE = #2.DEPT_CODE ] Output [ #2.DEPT_NAME , #1.CRS_CODE , #1.DEPT_CODE , #1.CRS_CREDIT ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ COURSE ] Output [ CRS_CREDIT , DEPT_CODE , CRS_CODE ]",
                    "children": []
                  },
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ DEPARTMENT ] Output [ DEPT_NAME , DEPT_CODE ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 4,
                "op": "Scan",
                "qpl_line": "#4 = Scan Table [ CLASS ] Output [ CRS_CODE ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #6: Column 'dept_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "college_1",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Sum_CRS_CREDIT DESC ] Output [ Sum_CRS_CREDIT , DEPT_NAME ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ DEPT_CODE ] Output [ SUM(CRS_CREDIT) AS Sum_CRS_CREDIT , DEPT_NAME ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.CRS_CODE = #4.CRS_CODE ] Output [ #3.DEPT_NAME , #3.DEPT_CODE , #3.CRS_CREDIT ]",
            "children": [
              {
                "line_num": 3,
                "op": "Join",
                "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.DEPT_CODE = #2.DEPT_CODE ] Output [ #2.DEPT_NAME , #1.CRS_CODE , #1.DEPT_CODE , #1.CRS_CREDIT ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ COURSE ] Output [ CRS_CREDIT , DEPT_CODE , CRS_CODE ]",
                    "children": []
                  },
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ DEPARTMENT ] Output [ DEPT_NAME , DEPT_CODE ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 4,
                "op": "Scan",
                "qpl_line": "#4 = Scan Table [ CLASS ] Output [ CRS_CODE ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #6: Column 'dept_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "college_1",
    "line_num": 9,
    "op": "TopSort",
    "qpl_line": "#9 = TopSort [ #8 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , DEPT_NAME ]",
    "children": [
      {
        "line_num": 8,
        "op": "Aggregate",
        "qpl_line": "#8 = Aggregate [ #7 ] GroupBy [ DEPT_CODE ] Output [ countstar AS Count_Star , DEPT_NAME ]",
        "children": [
          {
            "line_num": 7,
            "op": "Join",
            "qpl_line": "#7 = Join [ #5 , #6 ] Predicate [ #5.DEPT_CODE = #6.DEPT_CODE ] Output [ #5.DEPT_CODE , #6.DEPT_NAME ]",
            "children": [
              {
                "line_num": 5,
                "op": "Join",
                "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.CRS_CODE = #4.CRS_CODE ] Output [ #1.DEPT_CODE ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ COURSE ] Output [ DEPT_CODE , CRS_CODE ]",
                    "children": []
                  },
                  {
                    "line_num": 4,
                    "op": "Join",
                    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.CLASS_CODE = #3.CLASS_CODE ] Output [ #3.CRS_CODE ]",
                    "children": [
                      {
                        "line_num": 2,
                        "op": "Scan",
                        "qpl_line": "#2 = Scan Table [ ENROLL ] Output [ CLASS_CODE ]",
                        "children": []
                      },
                      {
                        "line_num": 3,
                        "op": "Scan",
                        "qpl_line": "#3 = Scan Table [ CLASS ] Output [ CLASS_CODE , CRS_CODE ]",
                        "children": []
                      }
                    ]
                  }
                ]
              },
              {
                "line_num": 6,
                "op": "Scan",
                "qpl_line": "#6 = Scan Table [ DEPARTMENT ] Output [ DEPT_NAME , DEPT_CODE ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #8: Column 'dept_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "college_1",
    "line_num": 9,
    "op": "TopSort",
    "qpl_line": "#9 = TopSort [ #8 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , DEPT_NAME ]",
    "children": [
      {
        "line_num": 8,
        "op": "Aggregate",
        "qpl_line": "#8 = Aggregate [ #7 ] GroupBy [ DEPT_CODE ] Output [ countstar AS Count_Star , DEPT_NAME ]",
        "children": [
          {
            "line_num": 7,
            "op": "Join",
            "qpl_line": "#7 = Join [ #5 , #6 ] Predicate [ #5.DEPT_CODE = #6.DEPT_CODE ] Output [ #5.DEPT_CODE , #6.DEPT_NAME ]",
            "children": [
              {
                "line_num": 5,
                "op": "Join",
                "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.CRS_CODE = #4.CRS_CODE ] Output [ #1.DEPT_CODE ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ COURSE ] Output [ DEPT_CODE , CRS_CODE ]",
                    "children": []
                  },
                  {
                    "line_num": 4,
                    "op": "Join",
                    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.CLASS_CODE = #3.CLASS_CODE ] Output [ #3.CRS_CODE ]",
                    "children": [
                      {
                        "line_num": 2,
                        "op": "Scan",
                        "qpl_line": "#2 = Scan Table [ ENROLL ] Output [ CLASS_CODE ]",
                        "children": []
                      },
                      {
                        "line_num": 3,
                        "op": "Scan",
                        "qpl_line": "#3 = Scan Table [ CLASS ] Output [ CLASS_CODE , CRS_CODE ]",
                        "children": []
                      }
                    ]
                  }
                ]
              },
              {
                "line_num": 6,
                "op": "Scan",
                "qpl_line": "#6 = Scan Table [ DEPARTMENT ] Output [ DEPT_NAME , DEPT_CODE ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #8: Column 'dept_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "college_1",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.STU_GPA < #2.Avg_STU_GPA ] Output [ #3.STU_FNAME , #3.STU_GPA ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(STU_GPA) AS Avg_STU_GPA ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ STUDENT ] Output [ STU_GPA ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ STUDENT ] Output [ STU_FNAME , STU_GPA ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'STUDENT'"
  },
  {
    "split": "train",
    "db_id": "college_1",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.STU_GPA < #2.Avg_STU_GPA ] Output [ #3.STU_FNAME , #3.STU_GPA ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(STU_GPA) AS Avg_STU_GPA ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ STUDENT ] Output [ STU_GPA ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ STUDENT ] Output [ STU_FNAME , STU_GPA ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'STUDENT'"
  },
  {
    "split": "train",
    "db_id": "sports_competition",
    "line_num": 3,
    "op": "Filter",
    "qpl_line": "#3 = Filter [ #2 ] Predicate [ Avg_Points >= 20.0 ] Output [ Position ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ name , Position ] Output [ Position , AVG(Points) AS Avg_Points ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ player ] Output [ name , Position , Points ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #2: GroupBy column 'name' not found in aggregate output: ['position', 'avg_points']."
  },
  {
    "split": "train",
    "db_id": "sports_competition",
    "line_num": 3,
    "op": "Filter",
    "qpl_line": "#3 = Filter [ #2 ] Predicate [ Avg_Points >= 20.0 ] Output [ Position ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ name , Position ] Output [ Position , AVG(Points) AS Avg_Points ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ player ] Output [ name , Position , Points ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #2: GroupBy column 'name' not found in aggregate output: ['position', 'avg_points']."
  },
  {
    "split": "train",
    "db_id": "sports_competition",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Points > #2.Avg_Points ] Output [ #3.name ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Points) AS Avg_Points ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ player ] Output [ Points ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ player ] Output [ name , Points ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'player'"
  },
  {
    "split": "train",
    "db_id": "sports_competition",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Points > #2.Avg_Points ] Output [ #3.name ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Points) AS Avg_Points ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ player ] Output [ Points ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ player ] Output [ name , Points ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'player'"
  },
  {
    "split": "train",
    "db_id": "manufacturer",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Manufacturer_ID ] Output [ countstar AS Count_Star , Name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Manufacturer_ID = #2.Manufacturer_ID ] Output [ #2.Manufacturer_ID , #2.Name ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ furniture_manufacte ] Output [ Manufacturer_ID ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ manufacturer ] Output [ Manufacturer_ID , Name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "hr_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ DEPARTMENT_ID ] Output [ DEPARTMENT_ID ]",
    "children": [
      {
        "line_num": 3,
        "op": "Filter",
        "qpl_line": "#3 = Filter [ #2 ] Predicate [ Count_Star >= 4 ] Output [ DEPARTMENT_ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ DEPARTMENT_ID , MANAGER_ID ] Output [ countstar AS Count_Star , DEPARTMENT_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ employees ] Output [ DEPARTMENT_ID , MANAGER_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #2: GroupBy column 'manager_id' not found in aggregate output: ['count_star', 'department_id']."
  },
  {
    "split": "train",
    "db_id": "hr_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ DEPARTMENT_ID ] Output [ DEPARTMENT_ID ]",
    "children": [
      {
        "line_num": 3,
        "op": "Filter",
        "qpl_line": "#3 = Filter [ #2 ] Predicate [ Count_Star >= 4 ] Output [ DEPARTMENT_ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ DEPARTMENT_ID , MANAGER_ID ] Output [ countstar AS Count_Star , DEPARTMENT_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ employees ] Output [ DEPARTMENT_ID , MANAGER_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #2: GroupBy column 'manager_id' not found in aggregate output: ['count_star', 'department_id']."
  },
  {
    "split": "train",
    "db_id": "hr_1",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.SALARY > #2.Avg_SALARY ] Output [ #3.EMPLOYEE_ID ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(SALARY) AS Avg_SALARY ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ employees ] Output [ SALARY ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ employees ] Output [ EMPLOYEE_ID , SALARY ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'employees'"
  },
  {
    "split": "train",
    "db_id": "hr_1",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.SALARY > #2.Avg_SALARY ] Output [ #3.EMPLOYEE_ID ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(SALARY) AS Avg_SALARY ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ employees ] Output [ SALARY ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ employees ] Output [ EMPLOYEE_ID , SALARY ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'employees'"
  },
  {
    "split": "train",
    "db_id": "hr_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ DEPARTMENT_ID ] Output [ DEPARTMENT_ID ]",
    "children": [
      {
        "line_num": 3,
        "op": "Filter",
        "qpl_line": "#3 = Filter [ #2 ] Predicate [ Count_Star >= 4 ] Output [ DEPARTMENT_ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ DEPARTMENT_ID , MANAGER_ID ] Output [ countstar AS Count_Star , DEPARTMENT_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ employees ] Output [ DEPARTMENT_ID , MANAGER_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #2: GroupBy column 'manager_id' not found in aggregate output: ['count_star', 'department_id']."
  },
  {
    "split": "train",
    "db_id": "hr_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ DEPARTMENT_ID ] Output [ DEPARTMENT_ID ]",
    "children": [
      {
        "line_num": 3,
        "op": "Filter",
        "qpl_line": "#3 = Filter [ #2 ] Predicate [ Count_Star >= 4 ] Output [ DEPARTMENT_ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ DEPARTMENT_ID , MANAGER_ID ] Output [ countstar AS Count_Star , DEPARTMENT_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ employees ] Output [ DEPARTMENT_ID , MANAGER_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #2: GroupBy column 'manager_id' not found in aggregate output: ['count_star', 'department_id']."
  },
  {
    "split": "train",
    "db_id": "hr_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.DEPARTMENT_ID IS NULL OR #1.DEPARTMENT_ID = #2.DEPARTMENT_ID ] Output [ #1.EMPLOYEE_ID , #1.DEPARTMENT_ID , #1.HIRE_DATE , #1.MANAGER_ID , #1.SALARY , #1.LAST_NAME , #1.PHONE_NUMBER , #1.FIRST_NAME , #1.COMMISSION_PCT , #1.EMAIL , #1.JOB_ID ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ employees ] Output [ PHONE_NUMBER , MANAGER_ID , COMMISSION_PCT , FIRST_NAME , EMAIL , JOB_ID , DEPARTMENT_ID , HIRE_DATE , EMPLOYEE_ID , SALARY , LAST_NAME ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ departments ] Predicate [ MANAGER_ID >= 100.0 AND MANAGER_ID <= 200.0 ] Output [ DEPARTMENT_ID , MANAGER_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'departments, employees, jobs' and 'departments'"
  },
  {
    "split": "train",
    "db_id": "hr_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.DEPARTMENT_ID IS NULL OR #1.DEPARTMENT_ID = #2.DEPARTMENT_ID ] Output [ #1.EMPLOYEE_ID , #1.DEPARTMENT_ID , #1.HIRE_DATE , #1.MANAGER_ID , #1.SALARY , #1.LAST_NAME , #1.PHONE_NUMBER , #1.FIRST_NAME , #1.COMMISSION_PCT , #1.EMAIL , #1.JOB_ID ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ employees ] Output [ PHONE_NUMBER , MANAGER_ID , COMMISSION_PCT , FIRST_NAME , EMAIL , JOB_ID , DEPARTMENT_ID , HIRE_DATE , EMPLOYEE_ID , SALARY , LAST_NAME ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ departments ] Predicate [ MANAGER_ID >= 100.0 AND MANAGER_ID <= 200.0 ] Output [ DEPARTMENT_ID , MANAGER_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'departments, employees, jobs' and 'departments'"
  },
  {
    "split": "train",
    "db_id": "hr_1",
    "line_num": 6,
    "op": "Intersect",
    "qpl_line": "#6 = Intersect [ #4 , #5 ] Predicate [ #4.DEPARTMENT_ID = #5.DEPARTMENT_ID ] Output [ #4.EMPLOYEE_ID , #4.LAST_NAME , #4.SALARY , #4.FIRST_NAME ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.SALARY > #2.Avg_SALARY ] Output [ #3.SALARY , #3.FIRST_NAME , #3.EMPLOYEE_ID , #3.LAST_NAME , #3.DEPARTMENT_ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(SALARY) AS Avg_SALARY ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ employees ] Output [ SALARY ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ employees ] Output [ FIRST_NAME , DEPARTMENT_ID , EMPLOYEE_ID , SALARY , LAST_NAME ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 5,
        "op": "Scan",
        "qpl_line": "#5 = Scan Table [ employees ] Predicate [ FIRST_NAME like '%J%' ] Output [ FIRST_NAME , DEPARTMENT_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'departments, employees'"
  },
  {
    "split": "train",
    "db_id": "hr_1",
    "line_num": 6,
    "op": "Intersect",
    "qpl_line": "#6 = Intersect [ #4 , #5 ] Predicate [ #4.DEPARTMENT_ID = #5.DEPARTMENT_ID ] Output [ #4.EMPLOYEE_ID , #4.LAST_NAME , #4.SALARY , #4.FIRST_NAME ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.SALARY > #2.Avg_SALARY ] Output [ #3.SALARY , #3.FIRST_NAME , #3.EMPLOYEE_ID , #3.LAST_NAME , #3.DEPARTMENT_ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(SALARY) AS Avg_SALARY ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ employees ] Output [ SALARY ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ employees ] Output [ FIRST_NAME , DEPARTMENT_ID , EMPLOYEE_ID , SALARY , LAST_NAME ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 5,
        "op": "Scan",
        "qpl_line": "#5 = Scan Table [ employees ] Predicate [ FIRST_NAME like '%J%' ] Output [ FIRST_NAME , DEPARTMENT_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'departments, employees'"
  },
  {
    "split": "train",
    "db_id": "music_1",
    "line_num": 3,
    "op": "Intersect",
    "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #2.artist_name = #1.artist_name ] Output [ #1.country , #1.artist_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ artist ] Output [ country , artist_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ song ] Predicate [ rating > 9 ] Output [ rating , artist_name ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'artist' and 'artist, song'"
  },
  {
    "split": "train",
    "db_id": "music_1",
    "line_num": 3,
    "op": "Intersect",
    "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #2.artist_name = #1.artist_name ] Output [ #1.country , #1.artist_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ artist ] Output [ country , artist_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ song ] Predicate [ rating > 9 ] Output [ rating , artist_name ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'artist' and 'artist, song'"
  },
  {
    "split": "train",
    "db_id": "music_1",
    "line_num": 3,
    "op": "Intersect",
    "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #1.artist_name = #2.artist_name ] Output [ #1.artist_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ artist ] Predicate [ country = 'UK' ] Output [ country , artist_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ song ] Predicate [ languages = 'english' ] Output [ languages , artist_name ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'artist' and 'artist, song'"
  },
  {
    "split": "train",
    "db_id": "music_1",
    "line_num": 3,
    "op": "Intersect",
    "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #1.artist_name = #2.artist_name ] Output [ #1.artist_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ artist ] Predicate [ country = 'UK' ] Output [ country , artist_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ song ] Predicate [ languages = 'english' ] Output [ languages , artist_name ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'artist' and 'artist, song'"
  },
  {
    "split": "train",
    "db_id": "music_1",
    "line_num": 3,
    "op": "Intersect",
    "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #2.f_id = #1.f_id ] Output [ #1.f_id ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ files ] Predicate [ formats = 'mp4' ] Output [ formats , f_id ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ song ] Predicate [ resolution < 1000 ] Output [ resolution , f_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'files' and 'files, song'"
  },
  {
    "split": "train",
    "db_id": "music_1",
    "line_num": 3,
    "op": "Intersect",
    "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #2.f_id = #1.f_id ] Output [ #1.f_id ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ files ] Predicate [ formats = 'mp4' ] Output [ formats , f_id ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ song ] Predicate [ resolution < 1000 ] Output [ resolution , f_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'files' and 'files, song'"
  },
  {
    "split": "train",
    "db_id": "music_1",
    "line_num": 3,
    "op": "Union",
    "qpl_line": "#3 = Union [ #1 , #2 ] Output [ #1.f_id ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ files ] Predicate [ formats = 'mp4' ] Output [ formats , f_id ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ song ] Predicate [ resolution > 720 ] Output [ resolution , f_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Union': 'files' and 'files, song'"
  },
  {
    "split": "train",
    "db_id": "music_1",
    "line_num": 3,
    "op": "Union",
    "qpl_line": "#3 = Union [ #1 , #2 ] Output [ #1.f_id ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ files ] Predicate [ formats = 'mp4' ] Output [ formats , f_id ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ song ] Predicate [ resolution > 720 ] Output [ resolution , f_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Union': 'files' and 'files, song'"
  },
  {
    "split": "train",
    "db_id": "music_1",
    "line_num": 3,
    "op": "TopSort",
    "qpl_line": "#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] WithTies [ True ] Output [ Count_Star , artist_name ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ languages , artist_name ] Output [ countstar AS Count_Star , artist_name ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ song ] Predicate [ resolution > 500 ] Output [ resolution , languages , artist_name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #2: GroupBy column 'languages' not found in aggregate output: ['count_star', 'artist_name']."
  },
  {
    "split": "train",
    "db_id": "music_1",
    "line_num": 3,
    "op": "TopSort",
    "qpl_line": "#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] WithTies [ True ] Output [ Count_Star , artist_name ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ languages , artist_name ] Output [ countstar AS Count_Star , artist_name ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ song ] Predicate [ resolution > 500 ] Output [ resolution , languages , artist_name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #2: GroupBy column 'languages' not found in aggregate output: ['count_star', 'artist_name']."
  },
  {
    "split": "train",
    "db_id": "music_1",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 1 ] Output [ country , artist_name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ artist_name ] Output [ countstar AS Count_Star , country , artist_name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.artist_name = #2.artist_name ] Output [ #2.country , #2.artist_name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ song ] Predicate [ resolution > 900 ] Output [ resolution , artist_name ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ artist ] Output [ country , artist_name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'country' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "music_1",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 1 ] Output [ country , artist_name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ artist_name ] Output [ countstar AS Count_Star , country , artist_name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.artist_name = #2.artist_name ] Output [ #2.country , #2.artist_name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ song ] Predicate [ resolution > 900 ] Output [ resolution , artist_name ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ artist ] Output [ country , artist_name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'country' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "music_1",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.resolution > #2.Avg_resolution ] Output [ #3.f_id ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(resolution) AS Avg_resolution ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ song ] Predicate [ genre_is = 'modern' ] Output [ resolution , genre_is ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ song ] Output [ resolution , f_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'files, song'"
  },
  {
    "split": "train",
    "db_id": "music_1",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.resolution > #2.Avg_resolution ] Output [ #3.f_id ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(resolution) AS Avg_resolution ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ song ] Predicate [ genre_is = 'modern' ] Output [ resolution , genre_is ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ song ] Output [ resolution , f_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'files, song'"
  },
  {
    "split": "train",
    "db_id": "music_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.artist_name = #2.artist_name ] Output [ #1.artist_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ artist ] Predicate [ country = 'Bangladesh' ] Output [ country , artist_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ song ] Predicate [ rating > 7 ] Distinct [ true ] Output [ rating , artist_name ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'artist' and 'artist, song'"
  },
  {
    "split": "train",
    "db_id": "music_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.artist_name = #2.artist_name ] Output [ #1.artist_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ artist ] Predicate [ country = 'Bangladesh' ] Output [ country , artist_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ song ] Predicate [ rating > 7 ] Distinct [ true ] Output [ rating , artist_name ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'artist' and 'artist, song'"
  },
  {
    "split": "train",
    "db_id": "baseball_1",
    "line_num": 9,
    "op": "Join",
    "qpl_line": "#9 = Join [ #4 , #8 ] Predicate [ #4.name_first = #8.name_first ] Distinct [ true ] Output [ #4.name_last , #4.name_first ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Distinct [ true ] Output [ #3.name_first , #3.name_last ]",
        "children": [
          {
            "line_num": 2,
            "op": "Top",
            "qpl_line": "#2 = Top [ #1 ] Rows [ 1 ] Output [ year ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ player_award ] Predicate [ year = 1961 ] Output [ year ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ player ] Output [ name_last , name_first ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 8,
        "op": "Join",
        "qpl_line": "#8 = Join [ #6 , #7 ] Distinct [ true ] Output [ #7.name_last , #7.name_first ]",
        "children": [
          {
            "line_num": 6,
            "op": "Top",
            "qpl_line": "#6 = Top [ #5 ] Rows [ 1 ] Output [ year ]",
            "children": [
              {
                "line_num": 5,
                "op": "Scan",
                "qpl_line": "#5 = Scan Table [ player_award ] Predicate [ year = 1960 ] Output [ year ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 7,
            "op": "Scan",
            "qpl_line": "#7 = Scan Table [ player ] Output [ name_last , name_first ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'player_award' and 'player'"
  },
  {
    "split": "train",
    "db_id": "baseball_1",
    "line_num": 9,
    "op": "Join",
    "qpl_line": "#9 = Join [ #4 , #8 ] Predicate [ #4.name_first = #8.name_first ] Distinct [ true ] Output [ #4.name_last , #4.name_first ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Distinct [ true ] Output [ #3.name_first , #3.name_last ]",
        "children": [
          {
            "line_num": 2,
            "op": "Top",
            "qpl_line": "#2 = Top [ #1 ] Rows [ 1 ] Output [ year ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ player_award ] Predicate [ year = 1961 ] Output [ year ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ player ] Output [ name_last , name_first ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 8,
        "op": "Join",
        "qpl_line": "#8 = Join [ #6 , #7 ] Distinct [ true ] Output [ #7.name_last , #7.name_first ]",
        "children": [
          {
            "line_num": 6,
            "op": "Top",
            "qpl_line": "#6 = Top [ #5 ] Rows [ 1 ] Output [ year ]",
            "children": [
              {
                "line_num": 5,
                "op": "Scan",
                "qpl_line": "#5 = Scan Table [ player_award ] Predicate [ year = 1960 ] Output [ year ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 7,
            "op": "Scan",
            "qpl_line": "#7 = Scan Table [ player ] Output [ name_last , name_first ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'player_award' and 'player'"
  },
  {
    "split": "train",
    "db_id": "e_learning",
    "line_num": 3,
    "op": "Intersect",
    "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #1.login_name = #2.login_name ] Output [ #1.login_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Course_Authors_and_Tutors ] Distinct [ true ] Output [ login_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Students ] Output [ login_name ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'Course_Authors_and_Tutors' and 'Students'"
  },
  {
    "split": "train",
    "db_id": "e_learning",
    "line_num": 3,
    "op": "Intersect",
    "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #1.login_name = #2.login_name ] Output [ #1.login_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Course_Authors_and_Tutors ] Distinct [ true ] Output [ login_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Students ] Output [ login_name ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'Course_Authors_and_Tutors' and 'Students'"
  },
  {
    "split": "train",
    "db_id": "e_learning",
    "line_num": 3,
    "op": "Intersect",
    "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #2.personal_name = #1.personal_name ] Output [ #1.personal_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Course_Authors_and_Tutors ] Distinct [ true ] Output [ personal_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Students ] Output [ personal_name ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'Course_Authors_and_Tutors' and 'Students'"
  },
  {
    "split": "train",
    "db_id": "e_learning",
    "line_num": 3,
    "op": "Intersect",
    "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #2.personal_name = #1.personal_name ] Output [ #1.personal_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Course_Authors_and_Tutors ] Distinct [ true ] Output [ personal_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Students ] Output [ personal_name ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'Course_Authors_and_Tutors' and 'Students'"
  },
  {
    "split": "train",
    "db_id": "insurance_policies",
    "line_num": 11,
    "op": "Except",
    "qpl_line": "#11 = Except [ #5 , #10 ] Predicate [ #5.Customer_Details = #10.Customer_Details ] Output [ #5.Customer_Details , #5.Customer_ID ]",
    "children": [
      {
        "line_num": 5,
        "op": "Filter",
        "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Customer_ID , Customer_Details ]",
        "children": [
          {
            "line_num": 4,
            "op": "Aggregate",
            "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Customer_ID ] Output [ countstar AS Count_Star , Customer_ID , Customer_Details ]",
            "children": [
              {
                "line_num": 3,
                "op": "Join",
                "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Customer_ID = #2.Customer_ID ] Output [ #2.Customer_ID , #2.Customer_Details ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ Customer_Policies ] Output [ Customer_ID ]",
                    "children": []
                  },
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Customers ] Output [ Customer_ID , Customer_Details ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "line_num": 10,
        "op": "Intersect",
        "qpl_line": "#10 = Intersect [ #6 , #9 ] Predicate [ #9.Customer_ID = #6.Customer_ID ] Output [ #6.Customer_Details , #6.Customer_ID ]",
        "children": [
          {
            "line_num": 6,
            "op": "Scan",
            "qpl_line": "#6 = Scan Table [ Customers ] Output [ Customer_ID , Customer_Details ]",
            "children": []
          },
          {
            "line_num": 9,
            "op": "Join",
            "qpl_line": "#9 = Join [ #7 , #8 ] Predicate [ #7.Policy_ID = #8.Policy_ID ] Output [ #8.Customer_ID ]",
            "children": [
              {
                "line_num": 7,
                "op": "Scan",
                "qpl_line": "#7 = Scan Table [ Claims ] Output [ Policy_ID ]",
                "children": []
              },
              {
                "line_num": 8,
                "op": "Scan",
                "qpl_line": "#8 = Scan Table [ Customer_Policies ] Output [ Customer_ID , Policy_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'customer_details' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "insurance_policies",
    "line_num": 11,
    "op": "Except",
    "qpl_line": "#11 = Except [ #5 , #10 ] Predicate [ #5.Customer_Details = #10.Customer_Details ] Output [ #5.Customer_Details , #5.Customer_ID ]",
    "children": [
      {
        "line_num": 5,
        "op": "Filter",
        "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Customer_ID , Customer_Details ]",
        "children": [
          {
            "line_num": 4,
            "op": "Aggregate",
            "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Customer_ID ] Output [ countstar AS Count_Star , Customer_ID , Customer_Details ]",
            "children": [
              {
                "line_num": 3,
                "op": "Join",
                "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Customer_ID = #2.Customer_ID ] Output [ #2.Customer_ID , #2.Customer_Details ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ Customer_Policies ] Output [ Customer_ID ]",
                    "children": []
                  },
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Customers ] Output [ Customer_ID , Customer_Details ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "line_num": 10,
        "op": "Intersect",
        "qpl_line": "#10 = Intersect [ #6 , #9 ] Predicate [ #9.Customer_ID = #6.Customer_ID ] Output [ #6.Customer_Details , #6.Customer_ID ]",
        "children": [
          {
            "line_num": 6,
            "op": "Scan",
            "qpl_line": "#6 = Scan Table [ Customers ] Output [ Customer_ID , Customer_Details ]",
            "children": []
          },
          {
            "line_num": 9,
            "op": "Join",
            "qpl_line": "#9 = Join [ #7 , #8 ] Predicate [ #7.Policy_ID = #8.Policy_ID ] Output [ #8.Customer_ID ]",
            "children": [
              {
                "line_num": 7,
                "op": "Scan",
                "qpl_line": "#7 = Scan Table [ Claims ] Output [ Policy_ID ]",
                "children": []
              },
              {
                "line_num": 8,
                "op": "Scan",
                "qpl_line": "#8 = Scan Table [ Customer_Policies ] Output [ Customer_ID , Policy_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'customer_details' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "insurance_policies",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Amount_Claimed > #2.Avg_Amount_Claimed ] Output [ #3.Date_Claim_Made , #3.Date_Claim_Settled ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Amount_Claimed) AS Avg_Amount_Claimed ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Claims ] Output [ Amount_Claimed ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ Claims ] Output [ Date_Claim_Settled , Amount_Claimed , Date_Claim_Made ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'Claims'"
  },
  {
    "split": "train",
    "db_id": "insurance_policies",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Amount_Claimed > #2.Avg_Amount_Claimed ] Output [ #3.Date_Claim_Made , #3.Date_Claim_Settled ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Amount_Claimed) AS Avg_Amount_Claimed ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Claims ] Output [ Amount_Claimed ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ Claims ] Output [ Date_Claim_Settled , Amount_Claimed , Date_Claim_Made ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'Claims'"
  },
  {
    "split": "train",
    "db_id": "insurance_policies",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Amount_Settled <= #2.Avg_Amount_Settled ] Output [ #3.Date_Claim_Made ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Amount_Settled) AS Avg_Amount_Settled ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Claims ] Output [ Amount_Settled ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ Claims ] Output [ Amount_Settled , Date_Claim_Made ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'Claims'"
  },
  {
    "split": "train",
    "db_id": "insurance_policies",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Amount_Settled <= #2.Avg_Amount_Settled ] Output [ #3.Date_Claim_Made ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Amount_Settled) AS Avg_Amount_Settled ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Claims ] Output [ Amount_Settled ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ Claims ] Output [ Amount_Settled , Date_Claim_Made ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'Claims'"
  },
  {
    "split": "train",
    "db_id": "insurance_policies",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Customer_ID , Customer_Details ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Customer_ID ] Output [ countstar AS Count_Star , Customer_ID , Customer_Details ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Customer_ID = #2.Customer_ID ] Output [ #2.Customer_ID , #2.Customer_Details ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Customer_Policies ] Output [ Customer_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Customers ] Output [ Customer_ID , Customer_Details ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'customer_details' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "insurance_policies",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Customer_ID , Customer_Details ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Customer_ID ] Output [ countstar AS Count_Star , Customer_ID , Customer_Details ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Customer_ID = #2.Customer_ID ] Output [ #2.Customer_ID , #2.Customer_Details ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Customer_Policies ] Output [ Customer_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Customers ] Output [ Customer_ID , Customer_Details ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'customer_details' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "hospital_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ EmployeeID ] Output [ countstar AS Count_Star , Name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.PCP = #2.EmployeeID ] Output [ #2.Name , #2.EmployeeID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Patient ] Output [ PCP ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Physician ] Output [ Name , EmployeeID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "hospital_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ EmployeeID ] Output [ countstar AS Count_Star , Name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.PCP = #2.EmployeeID ] Output [ #2.Name , #2.EmployeeID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Patient ] Output [ PCP ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Physician ] Output [ Name , EmployeeID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "hospital_1",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ EmployeeID ] Output [ countstar AS Count_Star , Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.PCP = #2.EmployeeID ] Output [ #2.Name , #2.EmployeeID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Patient ] Output [ PCP ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Physician ] Output [ Name , EmployeeID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "hospital_1",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ EmployeeID ] Output [ countstar AS Count_Star , Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.PCP = #2.EmployeeID ] Output [ #2.Name , #2.EmployeeID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Patient ] Output [ PCP ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Physician ] Output [ Name , EmployeeID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "hospital_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Brand , Name ] Output [ countstar AS Count_Star , Name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Medication = #2.Code ] Output [ #2.Name , #2.Brand ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Prescribes ] Output [ Medication ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Medication ] Output [ Code , Brand , Name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: GroupBy column 'brand' not found in aggregate output: ['count_star', 'name']."
  },
  {
    "split": "train",
    "db_id": "hospital_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Brand , Name ] Output [ countstar AS Count_Star , Name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Medication = #2.Code ] Output [ #2.Name , #2.Brand ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Prescribes ] Output [ Medication ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Medication ] Output [ Code , Brand , Name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: GroupBy column 'brand' not found in aggregate output: ['count_star', 'name']."
  },
  {
    "split": "train",
    "db_id": "student_1",
    "line_num": 7,
    "op": "Except",
    "qpl_line": "#7 = Except [ #3 , #6 ] Predicate [ #3.FirstName = #6.FirstName ] Output [ #3.LastName , #3.FirstName ]",
    "children": [
      {
        "line_num": 3,
        "op": "Intersect",
        "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #2.Classroom = #1.Classroom ] Output [ #1.FirstName , #1.LastName ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ list ] Predicate [ Grade = 1 ] Output [ Grade , Classroom , LastName , FirstName ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ teachers ] Output [ Classroom ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 6,
        "op": "Join",
        "qpl_line": "#6 = Join [ #4 , #5 ] Predicate [ #4.Classroom = #5.Classroom ] Output [ #5.FirstName , #5.LastName ]",
        "children": [
          {
            "line_num": 4,
            "op": "Scan",
            "qpl_line": "#4 = Scan Table [ teachers ] Predicate [ FirstName = 'OTHA' AND LastName = 'MOYER' ] Output [ LastName , Classroom , FirstName ]",
            "children": []
          },
          {
            "line_num": 5,
            "op": "Scan",
            "qpl_line": "#5 = Scan Table [ list ] Output [ Classroom , LastName , FirstName ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'classroom, list' and 'classroom'"
  },
  {
    "split": "train",
    "db_id": "student_1",
    "line_num": 7,
    "op": "Except",
    "qpl_line": "#7 = Except [ #3 , #6 ] Predicate [ #3.FirstName = #6.FirstName ] Output [ #3.LastName , #3.FirstName ]",
    "children": [
      {
        "line_num": 3,
        "op": "Intersect",
        "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #2.Classroom = #1.Classroom ] Output [ #1.FirstName , #1.LastName ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ list ] Predicate [ Grade = 1 ] Output [ Grade , Classroom , LastName , FirstName ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ teachers ] Output [ Classroom ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 6,
        "op": "Join",
        "qpl_line": "#6 = Join [ #4 , #5 ] Predicate [ #4.Classroom = #5.Classroom ] Output [ #5.FirstName , #5.LastName ]",
        "children": [
          {
            "line_num": 4,
            "op": "Scan",
            "qpl_line": "#4 = Scan Table [ teachers ] Predicate [ FirstName = 'OTHA' AND LastName = 'MOYER' ] Output [ LastName , Classroom , FirstName ]",
            "children": []
          },
          {
            "line_num": 5,
            "op": "Scan",
            "qpl_line": "#5 = Scan Table [ list ] Output [ Classroom , LastName , FirstName ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'classroom, list' and 'classroom'"
  },
  {
    "split": "train",
    "db_id": "tracking_grants_for_research",
    "line_num": 7,
    "op": "Union",
    "qpl_line": "#7 = Union [ #5 , #6 ] Output [ #5.date_to , #5.date_from ]",
    "children": [
      {
        "line_num": 5,
        "op": "Join",
        "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.project_id = #4.project_id ] Output [ #4.date_to , #4.date_from ]",
        "children": [
          {
            "line_num": 3,
            "op": "TopSort",
            "qpl_line": "#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ project_id , Count_Star ]",
            "children": [
              {
                "line_num": 2,
                "op": "Aggregate",
                "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ project_id ] Output [ project_id , countstar AS Count_Star ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ Project_Staff ] Output [ project_id ]",
                    "children": []
                  }
                ]
              }
            ]
          },
          {
            "line_num": 4,
            "op": "Scan",
            "qpl_line": "#4 = Scan Table [ Project_Staff ] Output [ project_id , date_from , date_to ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 6,
        "op": "Scan",
        "qpl_line": "#6 = Scan Table [ Project_Staff ] Predicate [ role_code = 'leader' ] Output [ date_to , role_code , date_from ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #7: Incompatible types for operator 'Union': 'Project_Staff' and 'Project_Staff, Staff_Roles'"
  },
  {
    "split": "train",
    "db_id": "tracking_grants_for_research",
    "line_num": 7,
    "op": "Union",
    "qpl_line": "#7 = Union [ #5 , #6 ] Output [ #5.date_to , #5.date_from ]",
    "children": [
      {
        "line_num": 5,
        "op": "Join",
        "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.project_id = #4.project_id ] Output [ #4.date_to , #4.date_from ]",
        "children": [
          {
            "line_num": 3,
            "op": "TopSort",
            "qpl_line": "#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ project_id , Count_Star ]",
            "children": [
              {
                "line_num": 2,
                "op": "Aggregate",
                "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ project_id ] Output [ project_id , countstar AS Count_Star ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ Project_Staff ] Output [ project_id ]",
                    "children": []
                  }
                ]
              }
            ]
          },
          {
            "line_num": 4,
            "op": "Scan",
            "qpl_line": "#4 = Scan Table [ Project_Staff ] Output [ project_id , date_from , date_to ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 6,
        "op": "Scan",
        "qpl_line": "#6 = Scan Table [ Project_Staff ] Predicate [ role_code = 'leader' ] Output [ date_to , role_code , date_from ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #7: Incompatible types for operator 'Union': 'Project_Staff' and 'Project_Staff, Staff_Roles'"
  },
  {
    "split": "train",
    "db_id": "tracking_grants_for_research",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.project_id = #1.project_id ] Output [ #1.project_details ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Projects ] Output [ project_id , project_details ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Project_Staff ] Predicate [ role_code = 'researcher' ] Output [ project_id , role_code ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Projects' and 'Projects, Staff_Roles'"
  },
  {
    "split": "train",
    "db_id": "tracking_grants_for_research",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.project_id = #1.project_id ] Output [ #1.project_details ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Projects ] Output [ project_id , project_details ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Project_Staff ] Predicate [ role_code = 'researcher' ] Output [ project_id , role_code ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Projects' and 'Projects, Staff_Roles'"
  },
  {
    "split": "train",
    "db_id": "tracking_grants_for_research",
    "line_num": 11,
    "op": "Union",
    "qpl_line": "#11 = Union [ #3 , #10 ] Output [ #3.task_id , #3.task_details , #3.project_id ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.project_id = #2.project_id ] Output [ #2.task_id , #1.project_id , #2.task_details ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Projects ] Predicate [ project_details = 'omnis' ] Output [ project_id , project_details ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Tasks ] Output [ project_id , task_details , task_id ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 10,
        "op": "Filter",
        "qpl_line": "#10 = Filter [ #9 ] Predicate [ Count_Star > 2 ] Output [ project_id , task_details , task_id ]",
        "children": [
          {
            "line_num": 9,
            "op": "Aggregate",
            "qpl_line": "#9 = Aggregate [ #8 ] GroupBy [ task_id ] Output [ project_id , countstar AS Count_Star , task_details , task_id ]",
            "children": [
              {
                "line_num": 8,
                "op": "Join",
                "qpl_line": "#8 = Join [ #4 , #7 ] Predicate [ #4.project_id = #7.project_id ] Output [ #7.task_details , #4.project_id , #7.task_id ]",
                "children": [
                  {
                    "line_num": 4,
                    "op": "Scan",
                    "qpl_line": "#4 = Scan Table [ Projects ] Output [ project_id ]",
                    "children": []
                  },
                  {
                    "line_num": 7,
                    "op": "Join",
                    "qpl_line": "#7 = Join [ #5 , #6 ] Predicate [ #5.project_id = #6.project_id ] Output [ #5.project_id , #6.task_details , #6.task_id ]",
                    "children": [
                      {
                        "line_num": 5,
                        "op": "Scan",
                        "qpl_line": "#5 = Scan Table [ Project_Outcomes ] Output [ project_id ]",
                        "children": []
                      },
                      {
                        "line_num": 6,
                        "op": "Scan",
                        "qpl_line": "#6 = Scan Table [ Tasks ] Output [ project_id , task_details , task_id ]",
                        "children": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #9: Column 'project_id' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "tracking_grants_for_research",
    "line_num": 11,
    "op": "Union",
    "qpl_line": "#11 = Union [ #3 , #10 ] Output [ #3.task_id , #3.task_details , #3.project_id ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.project_id = #2.project_id ] Output [ #2.task_id , #1.project_id , #2.task_details ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Projects ] Predicate [ project_details = 'omnis' ] Output [ project_id , project_details ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Tasks ] Output [ project_id , task_details , task_id ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 10,
        "op": "Filter",
        "qpl_line": "#10 = Filter [ #9 ] Predicate [ Count_Star > 2 ] Output [ project_id , task_details , task_id ]",
        "children": [
          {
            "line_num": 9,
            "op": "Aggregate",
            "qpl_line": "#9 = Aggregate [ #8 ] GroupBy [ task_id ] Output [ project_id , countstar AS Count_Star , task_details , task_id ]",
            "children": [
              {
                "line_num": 8,
                "op": "Join",
                "qpl_line": "#8 = Join [ #4 , #7 ] Predicate [ #4.project_id = #7.project_id ] Output [ #7.task_details , #4.project_id , #7.task_id ]",
                "children": [
                  {
                    "line_num": 4,
                    "op": "Scan",
                    "qpl_line": "#4 = Scan Table [ Projects ] Output [ project_id ]",
                    "children": []
                  },
                  {
                    "line_num": 7,
                    "op": "Join",
                    "qpl_line": "#7 = Join [ #5 , #6 ] Predicate [ #5.project_id = #6.project_id ] Output [ #5.project_id , #6.task_details , #6.task_id ]",
                    "children": [
                      {
                        "line_num": 5,
                        "op": "Scan",
                        "qpl_line": "#5 = Scan Table [ Project_Outcomes ] Output [ project_id ]",
                        "children": []
                      },
                      {
                        "line_num": 6,
                        "op": "Scan",
                        "qpl_line": "#6 = Scan Table [ Tasks ] Output [ project_id , task_details , task_id ]",
                        "children": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #9: Column 'project_id' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "tracking_grants_for_research",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ project_id ] Output [ countstar AS Count_Star , project_details ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.project_id = #2.project_id ] Output [ #2.project_id , #2.project_details ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Tasks ] Output [ project_id ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Projects ] Output [ project_id , project_details ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'project_details' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "tracking_grants_for_research",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ project_id ] Output [ countstar AS Count_Star , project_details ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.project_id = #2.project_id ] Output [ #2.project_id , #2.project_details ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Tasks ] Output [ project_id ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Projects ] Output [ project_id , project_details ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'project_details' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "network_2",
    "line_num": 7,
    "op": "Aggregate",
    "qpl_line": "#7 = Aggregate [ #6 ] GroupBy [ name ] Output [ name ]",
    "children": [
      {
        "line_num": 6,
        "op": "Join",
        "qpl_line": "#6 = Join [ #2 , #5 ] Predicate [ #5.age < #2.Avg_age ] Output [ #5.name ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(age) AS Avg_age ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Person ] Output [ age ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.friend = #4.name ] Output [ #3.name , #4.age ]",
            "children": [
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ PersonFriend ] Output [ name , friend ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Scan",
                "qpl_line": "#4 = Scan Table [ Person ] Output [ name , age ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #6: Incompatible types for operator 'Join': 'Number' and 'Person'"
  },
  {
    "split": "train",
    "db_id": "network_2",
    "line_num": 7,
    "op": "Aggregate",
    "qpl_line": "#7 = Aggregate [ #6 ] GroupBy [ name ] Output [ name ]",
    "children": [
      {
        "line_num": 6,
        "op": "Join",
        "qpl_line": "#6 = Join [ #2 , #5 ] Predicate [ #5.age < #2.Avg_age ] Output [ #5.name ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(age) AS Avg_age ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Person ] Output [ age ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.friend = #4.name ] Output [ #3.name , #4.age ]",
            "children": [
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ PersonFriend ] Output [ name , friend ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Scan",
                "qpl_line": "#4 = Scan Table [ Person ] Output [ name , age ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #6: Incompatible types for operator 'Join': 'Number' and 'Person'"
  },
  {
    "split": "train",
    "db_id": "document_management",
    "line_num": 3,
    "op": "TopSort",
    "qpl_line": "#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Sum_access_count ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ document_type_code ] Output [ countstar AS Count_Star , SUM(access_count) AS Sum_access_count ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Documents ] Output [ document_type_code , access_count ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #2: GroupBy column 'document_type_code' not found in aggregate output: ['count_star', 'sum_access_count']."
  },
  {
    "split": "train",
    "db_id": "document_management",
    "line_num": 3,
    "op": "TopSort",
    "qpl_line": "#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Sum_access_count ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ document_type_code ] Output [ countstar AS Count_Star , SUM(access_count) AS Sum_access_count ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Documents ] Output [ document_type_code , access_count ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #2: GroupBy column 'document_type_code' not found in aggregate output: ['count_star', 'sum_access_count']."
  },
  {
    "split": "train",
    "db_id": "document_management",
    "line_num": 3,
    "op": "TopSort",
    "qpl_line": "#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] WithTies [ True ] Output [ Count_Star , user_name , password ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ user_name , password , role_code ] Output [ countstar AS Count_Star , user_name , password ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Users ] Output [ role_code , user_name , password ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #2: GroupBy column 'role_code' not found in aggregate output: ['count_star', 'user_name', 'password']."
  },
  {
    "split": "train",
    "db_id": "document_management",
    "line_num": 3,
    "op": "TopSort",
    "qpl_line": "#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] WithTies [ True ] Output [ Count_Star , user_name , password ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ user_name , password , role_code ] Output [ countstar AS Count_Star , user_name , password ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Users ] Output [ role_code , user_name , password ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #2: GroupBy column 'role_code' not found in aggregate output: ['count_star', 'user_name', 'password']."
  },
  {
    "split": "train",
    "db_id": "document_management",
    "line_num": 3,
    "op": "TopSort",
    "qpl_line": "#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , Avg_access_count ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ document_structure_code ] Output [ countstar AS Count_Star , AVG(access_count) AS Avg_access_count ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Documents ] Output [ access_count , document_structure_code ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #2: GroupBy column 'document_structure_code' not found in aggregate output: ['count_star', 'avg_access_count']."
  },
  {
    "split": "train",
    "db_id": "document_management",
    "line_num": 3,
    "op": "TopSort",
    "qpl_line": "#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , Avg_access_count ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ document_structure_code ] Output [ countstar AS Count_Star , AVG(access_count) AS Avg_access_count ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Documents ] Output [ access_count , document_structure_code ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #2: GroupBy column 'document_structure_code' not found in aggregate output: ['count_star', 'avg_access_count']."
  },
  {
    "split": "train",
    "db_id": "company_office",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ building_id ] Output [ name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.building_id ] Output [ #2.building_id , #1.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ buildings ] Output [ name , id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Office_locations ] Output [ building_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "company_office",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ building_id ] Output [ name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.building_id ] Output [ #2.building_id , #1.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ buildings ] Output [ name , id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Office_locations ] Output [ building_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "customers_campaigns_ecommerce",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ customer_name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.customer_name , #1.customer_id ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Mailshot_Customers ] Predicate [ outcome_code = 'Order' ] Output [ outcome_code , customer_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Customers ] Output [ customer_id , customer_name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'customer_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "department_store",
    "line_num": 6,
    "op": "Join",
    "qpl_line": "#6 = Join [ #2 , #5 ] Predicate [ #5.product_price > #2.Avg_product_price ] Output [ #5.product_id ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(product_price) AS Avg_product_price ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Products ] Output [ product_price ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 5,
        "op": "Join",
        "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #4.product_id = #3.product_id ] Output [ #4.product_id , #3.product_price ]",
        "children": [
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ Products ] Output [ product_id , product_price ]",
            "children": []
          },
          {
            "line_num": 4,
            "op": "Scan",
            "qpl_line": "#4 = Scan Table [ Product_Suppliers ] Predicate [ supplier_id = 2 ] Output [ supplier_id , product_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #6: Incompatible types for operator 'Join': 'Number' and 'Products'"
  },
  {
    "split": "train",
    "db_id": "department_store",
    "line_num": 6,
    "op": "Join",
    "qpl_line": "#6 = Join [ #2 , #5 ] Predicate [ #5.product_price > #2.Avg_product_price ] Output [ #5.product_id ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(product_price) AS Avg_product_price ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Products ] Output [ product_price ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 5,
        "op": "Join",
        "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #4.product_id = #3.product_id ] Output [ #4.product_id , #3.product_price ]",
        "children": [
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ Products ] Output [ product_id , product_price ]",
            "children": []
          },
          {
            "line_num": 4,
            "op": "Scan",
            "qpl_line": "#4 = Scan Table [ Product_Suppliers ] Predicate [ supplier_id = 2 ] Output [ supplier_id , product_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #6: Incompatible types for operator 'Join': 'Number' and 'Products'"
  },
  {
    "split": "train",
    "db_id": "department_store",
    "line_num": 7,
    "op": "Intersect",
    "qpl_line": "#7 = Intersect [ #3 , #6 ] Predicate [ #3.dept_store_id = #6.dept_store_id ] Output [ #3.store_name , #3.dept_store_id ]",
    "children": [
      {
        "line_num": 3,
        "op": "Intersect",
        "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #2.dept_store_id = #1.dept_store_id ] Output [ #1.store_name , #1.dept_store_id ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Department_Stores ] Output [ store_name , dept_store_id ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Departments ] Predicate [ department_name = 'marketing' ] Output [ dept_store_id , department_name ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 6,
        "op": "Join",
        "qpl_line": "#6 = Join [ #4 , #5 ] Predicate [ #4.dept_store_id = #5.dept_store_id ] Output [ #5.dept_store_id , #5.store_name ]",
        "children": [
          {
            "line_num": 4,
            "op": "Scan",
            "qpl_line": "#4 = Scan Table [ Departments ] Predicate [ department_name = 'managing' ] Output [ dept_store_id , department_name ]",
            "children": []
          },
          {
            "line_num": 5,
            "op": "Scan",
            "qpl_line": "#5 = Scan Table [ Department_Stores ] Output [ store_name , dept_store_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'Department_Stores' and 'Department_Stores, Departments'"
  },
  {
    "split": "train",
    "db_id": "department_store",
    "line_num": 7,
    "op": "Intersect",
    "qpl_line": "#7 = Intersect [ #3 , #6 ] Predicate [ #3.dept_store_id = #6.dept_store_id ] Output [ #3.store_name , #3.dept_store_id ]",
    "children": [
      {
        "line_num": 3,
        "op": "Intersect",
        "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #2.dept_store_id = #1.dept_store_id ] Output [ #1.store_name , #1.dept_store_id ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Department_Stores ] Output [ store_name , dept_store_id ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Departments ] Predicate [ department_name = 'marketing' ] Output [ dept_store_id , department_name ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 6,
        "op": "Join",
        "qpl_line": "#6 = Join [ #4 , #5 ] Predicate [ #4.dept_store_id = #5.dept_store_id ] Output [ #5.dept_store_id , #5.store_name ]",
        "children": [
          {
            "line_num": 4,
            "op": "Scan",
            "qpl_line": "#4 = Scan Table [ Departments ] Predicate [ department_name = 'managing' ] Output [ dept_store_id , department_name ]",
            "children": []
          },
          {
            "line_num": 5,
            "op": "Scan",
            "qpl_line": "#5 = Scan Table [ Department_Stores ] Output [ store_name , dept_store_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'Department_Stores' and 'Department_Stores, Departments'"
  },
  {
    "split": "train",
    "db_id": "department_store",
    "line_num": 7,
    "op": "Filter",
    "qpl_line": "#7 = Filter [ #6 ] Predicate [ Count_Star >= 2 ] Distinct [ true ] Output [ product_name ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ product_id ] Output [ countstar AS Count_Star , product_name ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.product_id = #4.product_id ] Distinct [ true ] Output [ #4.product_id , #3.customer_id , #4.product_name ]",
            "children": [
              {
                "line_num": 3,
                "op": "Join",
                "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.order_id = #2.order_id ] Output [ #1.customer_id , #2.product_id ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ]",
                    "children": []
                  },
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Order_Items ] Output [ product_id , order_id ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 4,
                "op": "Scan",
                "qpl_line": "#4 = Scan Table [ Products ] Output [ product_name , product_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #6: Column 'product_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "department_store",
    "line_num": 7,
    "op": "Filter",
    "qpl_line": "#7 = Filter [ #6 ] Predicate [ Count_Star >= 2 ] Distinct [ true ] Output [ product_name ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ product_id ] Output [ countstar AS Count_Star , product_name ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.product_id = #4.product_id ] Distinct [ true ] Output [ #4.product_id , #3.customer_id , #4.product_name ]",
            "children": [
              {
                "line_num": 3,
                "op": "Join",
                "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.order_id = #2.order_id ] Output [ #1.customer_id , #2.product_id ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ]",
                    "children": []
                  },
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Order_Items ] Output [ product_id , order_id ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 4,
                "op": "Scan",
                "qpl_line": "#4 = Scan Table [ Products ] Output [ product_name , product_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #6: Column 'product_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "department_store",
    "line_num": 7,
    "op": "Filter",
    "qpl_line": "#7 = Filter [ #6 ] Predicate [ Count_Star >= 3 ] Distinct [ true ] Output [ customer_name ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_name ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.order_id = #4.order_id ] Distinct [ true ] Output [ #1.product_id , #4.customer_name , #4.customer_id ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Order_Items ] Output [ product_id , order_id ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #2.order_id , #3.customer_id , #3.customer_name ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ Customers ] Output [ customer_id , customer_name ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #6: Column 'customer_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "department_store",
    "line_num": 7,
    "op": "Filter",
    "qpl_line": "#7 = Filter [ #6 ] Predicate [ Count_Star >= 3 ] Distinct [ true ] Output [ customer_name ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_name ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.order_id = #4.order_id ] Distinct [ true ] Output [ #1.product_id , #4.customer_name , #4.customer_id ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Order_Items ] Output [ product_id , order_id ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #2.order_id , #3.customer_id , #3.customer_name ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ Customers ] Output [ customer_id , customer_name ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #6: Column 'customer_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "aircraft",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Winning_Aircraft ] Output [ countstar AS Count_Star , Aircraft ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Aircraft_ID = #2.Winning_Aircraft ] Output [ #2.Winning_Aircraft , #1.Aircraft , #1.Aircraft_ID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ aircraft ] Output [ Aircraft_ID , Aircraft ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ match ] Output [ Winning_Aircraft ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'aircraft' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "aircraft",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Winning_Aircraft ] Output [ countstar AS Count_Star , Aircraft ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Aircraft_ID = #2.Winning_Aircraft ] Output [ #2.Winning_Aircraft , #1.Aircraft , #1.Aircraft_ID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ aircraft ] Output [ Aircraft_ID , Aircraft ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ match ] Output [ Winning_Aircraft ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'aircraft' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "aircraft",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Aircraft ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Winning_Aircraft ] Output [ countstar AS Count_Star , Aircraft ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Aircraft_ID = #2.Winning_Aircraft ] Output [ #2.Winning_Aircraft , #1.Aircraft , #1.Aircraft_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ aircraft ] Output [ Aircraft_ID , Aircraft ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ match ] Output [ Winning_Aircraft ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'aircraft' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "aircraft",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Aircraft ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Winning_Aircraft ] Output [ countstar AS Count_Star , Aircraft ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Aircraft_ID = #2.Winning_Aircraft ] Output [ #2.Winning_Aircraft , #1.Aircraft , #1.Aircraft_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ aircraft ] Output [ Aircraft_ID , Aircraft ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ match ] Output [ Winning_Aircraft ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'aircraft' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "aircraft",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Name , Age ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Winning_Pilot ] Output [ countstar AS Count_Star , Name , Age ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Winning_Pilot = #2.Pilot_Id ] Output [ #2.Pilot_Id , #2.Age , #2.Name , #1.Winning_Pilot ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ match ] Output [ Winning_Pilot ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ pilot ] Predicate [ Age < 30 ] Output [ Name , Pilot_Id , Age ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "aircraft",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Name , Age ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Winning_Pilot ] Output [ countstar AS Count_Star , Name , Age ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Winning_Pilot = #2.Pilot_Id ] Output [ #2.Pilot_Id , #2.Age , #2.Name , #1.Winning_Pilot ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ match ] Output [ Winning_Pilot ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ pilot ] Predicate [ Age < 30 ] Output [ Name , Pilot_Id , Age ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "aircraft",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Winning_Pilot IS NULL OR #1.Pilot_Id = #2.Winning_Pilot ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ pilot ] Output [ Name , Pilot_Id ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ match ] Predicate [ Country = 'Australia' ] Output [ Country , Winning_Pilot ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'pilot' and 'match, pilot'"
  },
  {
    "split": "train",
    "db_id": "aircraft",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Winning_Pilot IS NULL OR #1.Pilot_Id = #2.Winning_Pilot ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ pilot ] Output [ Name , Pilot_Id ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ match ] Predicate [ Country = 'Australia' ] Output [ Country , Winning_Pilot ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'pilot' and 'match, pilot'"
  },
  {
    "split": "train",
    "db_id": "store_product",
    "line_num": 5,
    "op": "Aggregate",
    "qpl_line": "#5 = Aggregate [ #4 ] Output [ SUM(City_Population) AS Sum_City_Population ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.City_Area > #2.Avg_City_Area ] Output [ #3.City_Population ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(City_Area) AS Avg_City_Area ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ district ] Output [ City_Area ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ district ] Output [ City_Area , City_Population ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'district'"
  },
  {
    "split": "train",
    "db_id": "store_product",
    "line_num": 5,
    "op": "Aggregate",
    "qpl_line": "#5 = Aggregate [ #4 ] Output [ SUM(City_Population) AS Sum_City_Population ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.City_Area > #2.Avg_City_Area ] Output [ #3.City_Population ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(City_Area) AS Avg_City_Area ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ district ] Output [ City_Area ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ district ] Output [ City_Area , City_Population ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'district'"
  },
  {
    "split": "train",
    "db_id": "soccer_2",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] Output [ SUM(enr) AS Sum_enr ]",
    "children": [
      {
        "line_num": 3,
        "op": "Except",
        "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.cName = #1.cName ] Output [ #1.enr ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ College ] Output [ cName , enr ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Tryout ] Predicate [ pPos = 'goalie' ] Output [ cName , pPos ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'College' and 'College, Tryout'"
  },
  {
    "split": "train",
    "db_id": "soccer_2",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] Output [ SUM(enr) AS Sum_enr ]",
    "children": [
      {
        "line_num": 3,
        "op": "Except",
        "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.cName = #1.cName ] Output [ #1.enr ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ College ] Output [ cName , enr ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Tryout ] Predicate [ pPos = 'goalie' ] Output [ cName , pPos ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'College' and 'College, Tryout'"
  },
  {
    "split": "train",
    "db_id": "soccer_2",
    "line_num": 5,
    "op": "Aggregate",
    "qpl_line": "#5 = Aggregate [ #4 ] Output [ COUNT(state) AS Count_state ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.enr > #2.Avg_enr ] Distinct [ true ] Output [ #3.state ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(enr) AS Avg_enr ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ College ] Output [ enr ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ College ] Output [ state , enr ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'College'"
  },
  {
    "split": "train",
    "db_id": "soccer_2",
    "line_num": 5,
    "op": "Aggregate",
    "qpl_line": "#5 = Aggregate [ #4 ] Output [ COUNT(state) AS Count_state ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.enr > #2.Avg_enr ] Distinct [ true ] Output [ #3.state ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(enr) AS Avg_enr ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ College ] Output [ enr ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ College ] Output [ state , enr ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'College'"
  },
  {
    "split": "train",
    "db_id": "soccer_2",
    "line_num": 5,
    "op": "Aggregate",
    "qpl_line": "#5 = Aggregate [ #4 ] Output [ COUNT(state) AS Count_state ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.enr < #2.Avg_enr ] Distinct [ true ] Output [ #3.state ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(enr) AS Avg_enr ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ College ] Output [ enr ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ College ] Output [ state , enr ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'College'"
  },
  {
    "split": "train",
    "db_id": "soccer_2",
    "line_num": 5,
    "op": "Aggregate",
    "qpl_line": "#5 = Aggregate [ #4 ] Output [ COUNT(state) AS Count_state ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.enr < #2.Avg_enr ] Distinct [ true ] Output [ #3.state ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(enr) AS Avg_enr ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ College ] Output [ enr ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ College ] Output [ state , enr ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'College'"
  },
  {
    "split": "train",
    "db_id": "device",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Shop_Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Shop_ID ] Output [ countstar AS Count_Star , Shop_Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Shop_ID = #2.Shop_ID ] Output [ #2.Shop_Name , #1.Shop_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ stock ] Output [ Shop_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ shop ] Output [ Shop_Name , Shop_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'shop_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "device",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Shop_Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Shop_ID ] Output [ countstar AS Count_Star , Shop_Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Shop_ID = #2.Shop_ID ] Output [ #2.Shop_Name , #1.Shop_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ stock ] Output [ Shop_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ shop ] Output [ Shop_Name , Shop_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'shop_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "cre_Drama_Workshop_Groups",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Product_Price > #2.Avg_Product_Price ] Distinct [ true ] Output [ #3.Product_Name ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Product_Price) AS Avg_Product_Price ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Products ] Output [ Product_Price ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ Products ] Output [ Product_Name , Product_Price ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'Products'"
  },
  {
    "split": "train",
    "db_id": "cre_Drama_Workshop_Groups",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Product_Price > #2.Avg_Product_Price ] Distinct [ true ] Output [ #3.Product_Name ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Product_Price) AS Avg_Product_Price ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Products ] Output [ Product_Price ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ Products ] Output [ Product_Name , Product_Price ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'Products'"
  },
  {
    "split": "train",
    "db_id": "manufactory_1",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Revenue > #2.Avg_Revenue ] Output [ #3.Name ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Revenue) AS Avg_Revenue ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Manufacturers ] Output [ Revenue ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ Manufacturers ] Output [ Name , Revenue ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'Manufacturers'"
  },
  {
    "split": "train",
    "db_id": "manufactory_1",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Revenue > #2.Avg_Revenue ] Output [ #3.Name ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Revenue) AS Avg_Revenue ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Manufacturers ] Output [ Revenue ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ Manufacturers ] Output [ Name , Revenue ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'Manufacturers'"
  },
  {
    "split": "train",
    "db_id": "shop_membership",
    "line_num": 5,
    "op": "Aggregate",
    "qpl_line": "#5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.membership_amount > #2.Avg_membership_amount ] Output [ 1 AS One ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(membership_amount) AS Avg_membership_amount ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ branch ] Output [ membership_amount ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ branch ] Output [ membership_amount ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'branch'"
  },
  {
    "split": "train",
    "db_id": "shop_membership",
    "line_num": 5,
    "op": "Aggregate",
    "qpl_line": "#5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.membership_amount > #2.Avg_membership_amount ] Output [ 1 AS One ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(membership_amount) AS Avg_membership_amount ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ branch ] Output [ membership_amount ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ branch ] Output [ membership_amount ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'branch'"
  },
  {
    "split": "train",
    "db_id": "swimming",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Capacity < #2.Avg_Capacity ] Output [ #3.name ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Capacity) AS Avg_Capacity ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ stadium ] Output [ Capacity ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ stadium ] Output [ name , Capacity ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'stadium'"
  },
  {
    "split": "train",
    "db_id": "swimming",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ Stadium_ID ] Output [ name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.ID = #4.Event_ID ] Output [ #3.name , #3.Stadium_ID ]",
            "children": [
              {
                "line_num": 3,
                "op": "Join",
                "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Stadium_ID = #2.ID ] Output [ #1.ID , #2.name , #1.Stadium_ID ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ event ] Output [ Stadium_ID , ID ]",
                    "children": []
                  },
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ stadium ] Output [ name , ID ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 4,
                "op": "Scan",
                "qpl_line": "#4 = Scan Table [ record ] Output [ Event_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #6: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "customers_and_products_contacts",
    "line_num": 5,
    "op": "Aggregate",
    "qpl_line": "#5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.product_price > #2.Avg_product_price ] Output [ 1 AS One ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(product_price) AS Avg_product_price ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Products ] Output [ product_price ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ Products ] Output [ product_price ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'Products'"
  },
  {
    "split": "train",
    "db_id": "customers_and_products_contacts",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 2 ] Output [ customer_name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #1.customer_id , #1.customer_name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Customers ] Predicate [ payment_method_code = 'Credit Card' ] Output [ customer_id , payment_method_code , customer_name ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Customer_Orders ] Output [ customer_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'customer_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "dorm_1",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Age < #2.Avg_Age ] Output [ #3.LName , #3.Fname ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Age) AS Avg_Age ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Student ] Output [ Age ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ Student ] Output [ LName , Fname , Age ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'Student'"
  },
  {
    "split": "train",
    "db_id": "dorm_1",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Age < #2.Avg_Age ] Output [ #3.LName , #3.Fname ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Age) AS Avg_Age ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Student ] Output [ Age ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ Student ] Output [ LName , Fname , Age ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'Student'"
  },
  {
    "split": "train",
    "db_id": "dorm_1",
    "line_num": 5,
    "op": "Aggregate",
    "qpl_line": "#5 = Aggregate [ #4 ] GroupBy [ Sex ] Output [ countstar AS Count_Star , Sex ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Age > #2.Avg_Age ] Output [ #3.Sex ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Age) AS Avg_Age ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Student ] Output [ Age ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ Student ] Output [ Sex , Age ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'Student'"
  },
  {
    "split": "train",
    "db_id": "dorm_1",
    "line_num": 5,
    "op": "Aggregate",
    "qpl_line": "#5 = Aggregate [ #4 ] GroupBy [ Sex ] Output [ countstar AS Count_Star , Sex ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Age > #2.Avg_Age ] Output [ #3.Sex ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Age) AS Avg_Age ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Student ] Output [ Age ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ Student ] Output [ Sex , Age ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'Student'"
  },
  {
    "split": "train",
    "db_id": "dorm_1",
    "line_num": 7,
    "op": "Join",
    "qpl_line": "#7 = Join [ #5 , #6 ] Predicate [ #5.stuid = #6.StuID ] Output [ #6.Fname , #6.LName ]",
    "children": [
      {
        "line_num": 5,
        "op": "Intersect",
        "qpl_line": "#5 = Intersect [ #1 , #4 ] Predicate [ #4.dormid = #1.dormid ] Output [ #1.stuid ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Lives_in ] Output [ dormid , stuid ]",
            "children": []
          },
          {
            "line_num": 4,
            "op": "Join",
            "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.amenid = #3.amenid ] Output [ #3.dormid ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Dorm_amenity ] Predicate [ amenity_name = 'TV Lounge' ] Output [ amenid , amenity_name ]",
                "children": []
              },
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ Has_amenity ] Output [ dormid , amenid ]",
                "children": []
              }
            ]
          }
        ]
      },
      {
        "line_num": 6,
        "op": "Scan",
        "qpl_line": "#6 = Scan Table [ Student ] Output [ LName , Fname , StuID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Intersect': 'Dorm, Student' and 'Dorm'"
  },
  {
    "split": "train",
    "db_id": "dorm_1",
    "line_num": 7,
    "op": "Join",
    "qpl_line": "#7 = Join [ #5 , #6 ] Predicate [ #5.stuid = #6.StuID ] Output [ #6.Fname , #6.LName ]",
    "children": [
      {
        "line_num": 5,
        "op": "Intersect",
        "qpl_line": "#5 = Intersect [ #1 , #4 ] Predicate [ #4.dormid = #1.dormid ] Output [ #1.stuid ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Lives_in ] Output [ dormid , stuid ]",
            "children": []
          },
          {
            "line_num": 4,
            "op": "Join",
            "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.amenid = #3.amenid ] Output [ #3.dormid ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Dorm_amenity ] Predicate [ amenity_name = 'TV Lounge' ] Output [ amenid , amenity_name ]",
                "children": []
              },
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ Has_amenity ] Output [ dormid , amenid ]",
                "children": []
              }
            ]
          }
        ]
      },
      {
        "line_num": 6,
        "op": "Scan",
        "qpl_line": "#6 = Scan Table [ Student ] Output [ LName , Fname , StuID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Intersect': 'Dorm, Student' and 'Dorm'"
  },
  {
    "split": "train",
    "db_id": "dorm_1",
    "line_num": 7,
    "op": "Join",
    "qpl_line": "#7 = Join [ #1 , #6 ] Predicate [ #6.stuid = #1.StuID ] Output [ #1.Age , #1.Fname ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Student ] Output [ Fname , StuID , Age ]",
        "children": []
      },
      {
        "line_num": 6,
        "op": "Except",
        "qpl_line": "#6 = Except [ #2 , #5 ] Predicate [ #2.dormid IS NULL OR #5.dormid IS NULL ] Output [ #2.stuid ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Lives_in ] Output [ dormid , stuid ]",
            "children": []
          },
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #4.amenid = #3.amenid ] Output [ #3.dormid ]",
            "children": [
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ Has_amenity ] Output [ dormid , amenid ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Scan",
                "qpl_line": "#4 = Scan Table [ Dorm_amenity ] Predicate [ amenity_name = 'TV Lounge' ] Output [ amenid , amenity_name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #6: Incompatible types for operator 'Except': 'Dorm, Student' and 'Dorm'"
  },
  {
    "split": "train",
    "db_id": "dorm_1",
    "line_num": 7,
    "op": "Join",
    "qpl_line": "#7 = Join [ #1 , #6 ] Predicate [ #6.stuid = #1.StuID ] Output [ #1.Age , #1.Fname ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Student ] Output [ Fname , StuID , Age ]",
        "children": []
      },
      {
        "line_num": 6,
        "op": "Except",
        "qpl_line": "#6 = Except [ #2 , #5 ] Predicate [ #2.dormid IS NULL OR #5.dormid IS NULL ] Output [ #2.stuid ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Lives_in ] Output [ dormid , stuid ]",
            "children": []
          },
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #4.amenid = #3.amenid ] Output [ #3.dormid ]",
            "children": [
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ Has_amenity ] Output [ dormid , amenid ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Scan",
                "qpl_line": "#4 = Scan Table [ Dorm_amenity ] Predicate [ amenity_name = 'TV Lounge' ] Output [ amenid , amenity_name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #6: Incompatible types for operator 'Except': 'Dorm, Student' and 'Dorm'"
  },
  {
    "split": "train",
    "db_id": "customer_complaints",
    "line_num": 3,
    "op": "Union",
    "qpl_line": "#3 = Union [ #1 , #2 ] Output [ #1.phone_number ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Customers ] Output [ phone_number ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Staff ] Output [ phone_number ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Union': 'Customers' and 'Staff'"
  },
  {
    "split": "train",
    "db_id": "customer_complaints",
    "line_num": 3,
    "op": "Union",
    "qpl_line": "#3 = Union [ #1 , #2 ] Output [ #1.phone_number ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Customers ] Output [ phone_number ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Staff ] Output [ phone_number ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Union': 'Customers' and 'Staff'"
  },
  {
    "split": "train",
    "db_id": "customer_complaints",
    "line_num": 3,
    "op": "TopSort",
    "qpl_line": "#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ customer_type_code ] Output [ countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Customers ] Output [ customer_type_code ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #2: GroupBy column 'customer_type_code' not found in aggregate output: ['count_star']."
  },
  {
    "split": "train",
    "db_id": "customer_complaints",
    "line_num": 3,
    "op": "TopSort",
    "qpl_line": "#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ customer_type_code ] Output [ countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Customers ] Output [ customer_type_code ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #2: GroupBy column 'customer_type_code' not found in aggregate output: ['count_star']."
  },
  {
    "split": "train",
    "db_id": "tracking_share_transactions",
    "line_num": 5,
    "op": "Join",
    "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.transaction_id = #4.transaction_id ] Output [ #3.lot_details ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.transaction_id = #2.lot_id ] Output [ #2.lot_details , #1.transaction_id ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Transactions ] Predicate [ share_count < 50 ] Output [ transaction_id , share_count ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Lots ] Output [ lot_id , lot_details ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 4,
        "op": "Scan",
        "qpl_line": "#4 = Scan Table [ Transactions_Lots ] Output [ transaction_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Join': 'Transactions' and 'Lots'"
  },
  {
    "split": "train",
    "db_id": "tracking_share_transactions",
    "line_num": 5,
    "op": "Join",
    "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.transaction_id = #4.transaction_id ] Output [ #3.lot_details ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.transaction_id = #2.lot_id ] Output [ #2.lot_details , #1.transaction_id ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Transactions ] Predicate [ share_count > 100 AND transaction_type_code = 'PUR' ] Output [ transaction_id , share_count , transaction_type_code ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Lots ] Output [ lot_id , lot_details ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 4,
        "op": "Scan",
        "qpl_line": "#4 = Scan Table [ Transactions_Lots ] Output [ transaction_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Join': 'Ref_Transaction_Types, Transactions' and 'Lots'"
  },
  {
    "split": "train",
    "db_id": "game_1",
    "line_num": 3,
    "op": "Intersect",
    "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #2.StuID = #1.StuID ] Output [ #1.StuID ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Student ] Predicate [ Major = 600 ] Output [ StuID , Major ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ SportsInfo ] Predicate [ OnScholarship = 'Y' ] Output [ OnScholarship , StuID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'Student' and 'SportsInfo, Student'"
  },
  {
    "split": "train",
    "db_id": "game_1",
    "line_num": 3,
    "op": "Intersect",
    "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #2.StuID = #1.StuID ] Output [ #1.StuID ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Student ] Predicate [ Major = 600 ] Output [ StuID , Major ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ SportsInfo ] Predicate [ OnScholarship = 'Y' ] Output [ OnScholarship , StuID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'Student' and 'SportsInfo, Student'"
  },
  {
    "split": "train",
    "db_id": "game_1",
    "line_num": 3,
    "op": "Intersect",
    "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #2.StuID = #1.StuID ] Output [ #1.StuID ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Student ] Predicate [ Sex = 'F' ] Output [ Sex , StuID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ SportsInfo ] Predicate [ SportName = 'Football' ] Output [ StuID , SportName ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'Student' and 'SportsInfo, Student'"
  },
  {
    "split": "train",
    "db_id": "game_1",
    "line_num": 3,
    "op": "Intersect",
    "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #2.StuID = #1.StuID ] Output [ #1.StuID ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Student ] Predicate [ Sex = 'F' ] Output [ Sex , StuID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ SportsInfo ] Predicate [ SportName = 'Football' ] Output [ StuID , SportName ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'Student' and 'SportsInfo, Student'"
  },
  {
    "split": "train",
    "db_id": "game_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.StuID = #1.StuID ] Output [ #1.StuID ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Student ] Predicate [ Sex = 'M' ] Output [ Sex , StuID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ SportsInfo ] Predicate [ SportName = 'Football' ] Output [ StuID , SportName ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Student' and 'SportsInfo, Student'"
  },
  {
    "split": "train",
    "db_id": "game_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.StuID = #1.StuID ] Output [ #1.StuID ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Student ] Predicate [ Sex = 'M' ] Output [ Sex , StuID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ SportsInfo ] Predicate [ SportName = 'Football' ] Output [ StuID , SportName ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Student' and 'SportsInfo, Student'"
  },
  {
    "split": "train",
    "db_id": "customers_and_addresses",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Sum_order_quantity ASC ] Output [ Sum_order_quantity , payment_method ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ customer_name , payment_method ] Output [ SUM(order_quantity) AS Sum_order_quantity , payment_method ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.order_id = #4.order_id ] Output [ #1.order_quantity , #4.customer_name , #4.payment_method ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Order_Items ] Output [ order_quantity , order_id ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #3.payment_method , #2.order_id , #3.customer_name ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ Customers ] Output [ customer_id , payment_method , customer_name ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #6: GroupBy column 'customer_name' not found in aggregate output: ['sum_order_quantity', 'payment_method']."
  },
  {
    "split": "train",
    "db_id": "customers_and_addresses",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Sum_order_quantity ASC ] Output [ Sum_order_quantity , payment_method ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ customer_name , payment_method ] Output [ SUM(order_quantity) AS Sum_order_quantity , payment_method ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.order_id = #4.order_id ] Output [ #1.order_quantity , #4.customer_name , #4.payment_method ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Order_Items ] Output [ order_quantity , order_id ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #3.payment_method , #2.order_id , #3.customer_name ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ Customers ] Output [ customer_id , payment_method , customer_name ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #6: GroupBy column 'customer_name' not found in aggregate output: ['sum_order_quantity', 'payment_method']."
  },
  {
    "split": "train",
    "db_id": "roller_coaster",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 3,
        "op": "Except",
        "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Country_ID IS NULL OR #1.Country_ID = #2.Country_ID ] Output [ #1.Country_ID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ country ] Output [ Country_ID ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ roller_coaster ] Predicate [ Length > 3000.0 ] Output [ Country_ID , Length ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'country' and 'country, roller_coaster'"
  },
  {
    "split": "train",
    "db_id": "ship_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Ship_ID IS NULL OR #1.Ship_ID = #2.Ship_ID ] Output [ #1.Flag , #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Ship ] Output [ Flag , Name , Ship_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ captain ] Predicate [ Rank = 'Midshipman' ] Output [ Rank , Ship_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Ship' and 'Ship, captain'"
  },
  {
    "split": "train",
    "db_id": "ship_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Ship_ID IS NULL OR #1.Ship_ID = #2.Ship_ID ] Output [ #1.Flag , #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Ship ] Output [ Flag , Name , Ship_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ captain ] Predicate [ Rank = 'Midshipman' ] Output [ Rank , Ship_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Ship' and 'Ship, captain'"
  },
  {
    "split": "train",
    "db_id": "city_record",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Regional_Population , GDP ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Host_City ] Output [ countstar AS Count_Star , Regional_Population , GDP ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Host_City = #2.City_ID ] Output [ #2.GDP , #1.Host_City , #2.Regional_Population , #2.City_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ hosting_city ] Output [ Host_City ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ city ] Output [ Regional_Population , GDP , City_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'regional_population' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "city_record",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Regional_Population , GDP ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Host_City ] Output [ countstar AS Count_Star , Regional_Population , GDP ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Host_City = #2.City_ID ] Output [ #2.GDP , #1.Host_City , #2.Regional_Population , #2.City_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ hosting_city ] Output [ Host_City ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ city ] Output [ Regional_Population , GDP , City_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'regional_population' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "flight_company",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ name , id ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ id ] Output [ name , countstar AS Count_Star , id ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.company_id = #2.id ] Output [ #2.id , #2.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ flight ] Output [ company_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ operate_company ] Output [ name , id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "flight_company",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 3,
        "op": "Except",
        "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.airport_id IS NULL OR #1.id = #2.airport_id ] Output [ #1.id ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ airport ] Output [ id ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ flight ] Predicate [ Pilot = 'Thompson' ] Output [ Pilot , airport_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'airport' and 'airport, flight'"
  },
  {
    "split": "train",
    "db_id": "cre_Docs_and_Epenses",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.Document_ID = #2.Document_ID ] Output [ #1.Document_ID ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Documents ] Predicate [ Document_Type_Code = 'CV' ] Output [ Document_Type_Code , Document_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Documents_with_Expenses ] Output [ Document_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Documents, Ref_Document_Types' and 'Documents'"
  },
  {
    "split": "train",
    "db_id": "cre_Docs_and_Epenses",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.Document_ID = #2.Document_ID ] Output [ #1.Document_ID ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Documents ] Predicate [ Document_Type_Code = 'CV' ] Output [ Document_Type_Code , Document_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Documents_with_Expenses ] Output [ Document_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Documents, Ref_Document_Types' and 'Documents'"
  },
  {
    "split": "train",
    "db_id": "scientist_1",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Hours > #2.Avg_Hours ] Output [ #3.Name ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Hours) AS Avg_Hours ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Projects ] Output [ Hours ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ Projects ] Output [ Name , Hours ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'Projects'"
  },
  {
    "split": "train",
    "db_id": "scientist_1",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Hours > #2.Avg_Hours ] Output [ #3.Name ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Hours) AS Avg_Hours ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Projects ] Output [ Hours ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ Projects ] Output [ Name , Hours ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'Projects'"
  },
  {
    "split": "train",
    "db_id": "wine_1",
    "line_num": 3,
    "op": "Intersect",
    "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #1.Grape = #2.Grape ] Output [ #1.Grape ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ grapes ] Predicate [ Color = 'White' ] Output [ Grape , Color ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ wine ] Predicate [ Score > 90 ] Output [ Grape , Score ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'grapes' and 'grapes, wine'"
  },
  {
    "split": "train",
    "db_id": "wine_1",
    "line_num": 3,
    "op": "Intersect",
    "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #1.Grape = #2.Grape ] Output [ #1.Grape ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ grapes ] Predicate [ Color = 'White' ] Output [ Grape , Color ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ wine ] Predicate [ Score > 90 ] Output [ Grape , Score ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'grapes' and 'grapes, wine'"
  },
  {
    "split": "train",
    "db_id": "wine_1",
    "line_num": 11,
    "op": "Aggregate",
    "qpl_line": "#11 = Aggregate [ #10 ] Output [ AVG(Price) AS Avg_Price ]",
    "children": [
      {
        "line_num": 10,
        "op": "Except",
        "qpl_line": "#10 = Except [ #6 , #9 ] Predicate [ #9.Appelation = #6.Appelation ] Output [ #6.Price ]",
        "children": [
          {
            "line_num": 6,
            "op": "Except",
            "qpl_line": "#6 = Except [ #1 , #5 ] Predicate [ #1.Appelation IS NULL ] Output [ #1.Appelation , #1.Price ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ wine ] Output [ Price , Appelation ]",
                "children": []
              },
              {
                "line_num": 5,
                "op": "Top",
                "qpl_line": "#5 = Top [ #4 ] Rows [ 1 ] Output [ Appelation , County ]",
                "children": [
                  {
                    "line_num": 4,
                    "op": "Join",
                    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Appelation = #2.Appelation ] Output [ #2.Appelation , #2.County ]",
                    "children": [
                      {
                        "line_num": 2,
                        "op": "Scan",
                        "qpl_line": "#2 = Scan Table [ appellations ] Predicate [ County = 'Sonoma' ] Output [ Appelation , County ]",
                        "children": []
                      },
                      {
                        "line_num": 3,
                        "op": "Scan",
                        "qpl_line": "#3 = Scan Table [ wine ] Output [ Appelation ]",
                        "children": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "line_num": 9,
            "op": "Intersect",
            "qpl_line": "#9 = Intersect [ #7 , #8 ] Predicate [ #8.Appelation = #7.Appelation ] Output [ #7.Appelation ]",
            "children": [
              {
                "line_num": 7,
                "op": "Scan",
                "qpl_line": "#7 = Scan Table [ appellations ] Predicate [ County = 'Sonoma' ] Output [ Appelation , County ]",
                "children": []
              },
              {
                "line_num": 8,
                "op": "Scan",
                "qpl_line": "#8 = Scan Table [ wine ] Output [ Appelation ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #6: Incompatible types for operator 'Except': 'appellations, wine' and 'appellations'"
  },
  {
    "split": "train",
    "db_id": "wine_1",
    "line_num": 11,
    "op": "Aggregate",
    "qpl_line": "#11 = Aggregate [ #10 ] Output [ AVG(Price) AS Avg_Price ]",
    "children": [
      {
        "line_num": 10,
        "op": "Except",
        "qpl_line": "#10 = Except [ #6 , #9 ] Predicate [ #9.Appelation = #6.Appelation ] Output [ #6.Price ]",
        "children": [
          {
            "line_num": 6,
            "op": "Except",
            "qpl_line": "#6 = Except [ #1 , #5 ] Predicate [ #1.Appelation IS NULL ] Output [ #1.Appelation , #1.Price ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ wine ] Output [ Price , Appelation ]",
                "children": []
              },
              {
                "line_num": 5,
                "op": "Top",
                "qpl_line": "#5 = Top [ #4 ] Rows [ 1 ] Output [ Appelation , County ]",
                "children": [
                  {
                    "line_num": 4,
                    "op": "Join",
                    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Appelation = #2.Appelation ] Output [ #2.Appelation , #2.County ]",
                    "children": [
                      {
                        "line_num": 2,
                        "op": "Scan",
                        "qpl_line": "#2 = Scan Table [ appellations ] Predicate [ County = 'Sonoma' ] Output [ Appelation , County ]",
                        "children": []
                      },
                      {
                        "line_num": 3,
                        "op": "Scan",
                        "qpl_line": "#3 = Scan Table [ wine ] Output [ Appelation ]",
                        "children": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "line_num": 9,
            "op": "Intersect",
            "qpl_line": "#9 = Intersect [ #7 , #8 ] Predicate [ #8.Appelation = #7.Appelation ] Output [ #7.Appelation ]",
            "children": [
              {
                "line_num": 7,
                "op": "Scan",
                "qpl_line": "#7 = Scan Table [ appellations ] Predicate [ County = 'Sonoma' ] Output [ Appelation , County ]",
                "children": []
              },
              {
                "line_num": 8,
                "op": "Scan",
                "qpl_line": "#8 = Scan Table [ wine ] Output [ Appelation ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #6: Incompatible types for operator 'Except': 'appellations, wine' and 'appellations'"
  },
  {
    "split": "train",
    "db_id": "train_station",
    "line_num": 7,
    "op": "Join",
    "qpl_line": "#7 = Join [ #5 , #6 ] Predicate [ #5.Train_ID = #6.Train_ID ] Output [ #6.Name ]",
    "children": [
      {
        "line_num": 5,
        "op": "Except",
        "qpl_line": "#5 = Except [ #1 , #4 ] Predicate [ #4.Station_ID = #1.Station_ID ] Output [ #1.Train_ID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ train_station ] Output [ Train_ID , Station_ID ]",
            "children": []
          },
          {
            "line_num": 4,
            "op": "Intersect",
            "qpl_line": "#4 = Intersect [ #2 , #3 ] Predicate [ #2.Station_ID = #3.Station_ID ] Output [ #2.Station_ID ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ station ] Predicate [ Location = 'London' ] Output [ Location , Station_ID ]",
                "children": []
              },
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ train_station ] Output [ Station_ID ]",
                "children": []
              }
            ]
          }
        ]
      },
      {
        "line_num": 6,
        "op": "Scan",
        "qpl_line": "#6 = Scan Table [ train ] Output [ Train_ID , Name ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Except': 'station, train' and 'station'"
  },
  {
    "split": "train",
    "db_id": "driving_school",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 2 ] Output [ last_name , first_name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ customer_id ] Output [ last_name , countstar AS Count_Star , first_name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.first_name , #1.customer_id , #2.last_name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Customer_Payments ] Output [ customer_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Customers ] Output [ last_name , customer_id , first_name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'last_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "driving_school",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 2 ] Output [ last_name , first_name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ customer_id ] Output [ last_name , countstar AS Count_Star , first_name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.first_name , #1.customer_id , #2.last_name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Customer_Payments ] Output [ customer_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Customers ] Output [ last_name , customer_id , first_name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'last_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "driving_school",
    "line_num": 3,
    "op": "Intersect",
    "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #1.last_name = #2.last_name ] Output [ #1.last_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Customers ] Distinct [ true ] Output [ last_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Staff ] Output [ last_name ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'Customers' and 'Staff'"
  },
  {
    "split": "train",
    "db_id": "driving_school",
    "line_num": 3,
    "op": "Intersect",
    "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #1.last_name = #2.last_name ] Output [ #1.last_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Customers ] Distinct [ true ] Output [ last_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Staff ] Output [ last_name ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'Customers' and 'Staff'"
  },
  {
    "split": "train",
    "db_id": "activity_1",
    "line_num": 5,
    "op": "Join",
    "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.FacID = #4.FacID ] Distinct [ true ] Output [ #4.Lname ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Faculty_Participates_in ] Output [ actid , FacID ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Output [ #3.Lname , #3.FacID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Activity ] Predicate [ activity_name = 'Canoeing' OR activity_name = 'Kayaking' ] Output [ activity_name ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ Faculty ] Output [ Lname , FacID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Activity' and 'Faculty'"
  },
  {
    "split": "train",
    "db_id": "activity_1",
    "line_num": 5,
    "op": "Join",
    "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.FacID = #4.FacID ] Distinct [ true ] Output [ #4.Lname ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Faculty_Participates_in ] Output [ actid , FacID ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Output [ #3.Lname , #3.FacID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Activity ] Predicate [ activity_name = 'Canoeing' OR activity_name = 'Kayaking' ] Output [ activity_name ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ Faculty ] Output [ Lname , FacID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Activity' and 'Faculty'"
  },
  {
    "split": "train",
    "db_id": "flight_4",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 3,
        "op": "Filter",
        "qpl_line": "#3 = Filter [ #2 ] Predicate [ Count_Star > 3 ] Output [ 1 AS One ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ city ] Output [ countstar AS Count_Star ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ airports ] Output [ city ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #2: GroupBy column 'city' not found in aggregate output: ['count_star']."
  },
  {
    "split": "train",
    "db_id": "flight_4",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 3,
        "op": "Filter",
        "qpl_line": "#3 = Filter [ #2 ] Predicate [ Count_Star > 3 ] Output [ 1 AS One ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ city ] Output [ countstar AS Count_Star ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ airports ] Output [ city ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #2: GroupBy column 'city' not found in aggregate output: ['count_star']."
  },
  {
    "split": "train",
    "db_id": "architecture",
    "line_num": 11,
    "op": "Union",
    "qpl_line": "#11 = Union [ #5 , #10 ] Output [ #5.name , #5.id , #5.gender ]",
    "children": [
      {
        "line_num": 5,
        "op": "Filter",
        "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star = 2 ] Output [ name , gender , id ]",
        "children": [
          {
            "line_num": 4,
            "op": "Aggregate",
            "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ id ] Output [ name , countstar AS Count_Star , gender , id ]",
            "children": [
              {
                "line_num": 3,
                "op": "Join",
                "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.architect_id ] Output [ #1.gender , #1.name , #1.id ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ architect ] Output [ name , gender , id ]",
                    "children": []
                  },
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ bridge ] Output [ architect_id ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "line_num": 10,
        "op": "Filter",
        "qpl_line": "#10 = Filter [ #9 ] Predicate [ Count_Star = 1 ] Output [ name , gender , id ]",
        "children": [
          {
            "line_num": 9,
            "op": "Aggregate",
            "qpl_line": "#9 = Aggregate [ #8 ] GroupBy [ id ] Output [ name , countstar AS Count_Star , gender , id ]",
            "children": [
              {
                "line_num": 8,
                "op": "Join",
                "qpl_line": "#8 = Join [ #6 , #7 ] Predicate [ #6.id = #7.architect_id ] Output [ #6.gender , #6.id , #6.name ]",
                "children": [
                  {
                    "line_num": 6,
                    "op": "Scan",
                    "qpl_line": "#6 = Scan Table [ architect ] Output [ name , gender , id ]",
                    "children": []
                  },
                  {
                    "line_num": 7,
                    "op": "Scan",
                    "qpl_line": "#7 = Scan Table [ mill ] Output [ architect_id ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "architecture",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 3,
        "op": "Except",
        "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.architect_id IS NULL OR #1.id = #2.architect_id ] Output [ #1.id ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ architect ] Output [ id ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ mill ] Predicate [ built_year < 1850 ] Output [ architect_id , built_year ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'architect' and 'architect, mill'"
  },
  {
    "split": "validation",
    "db_id": "concert_singer",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Age > #2.Avg_Age ] Output [ #3.Song_Name ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Age) AS Avg_Age ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ singer ] Output [ Age ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ singer ] Output [ Song_Name , Age ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'singer'"
  },
  {
    "split": "validation",
    "db_id": "concert_singer",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Age > #2.Avg_Age ] Output [ #3.Song_Name ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Age) AS Avg_Age ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ singer ] Output [ Age ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ singer ] Output [ Song_Name , Age ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'singer'"
  },
  {
    "split": "validation",
    "db_id": "concert_singer",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Stadium_ID ] Output [ Name , countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Stadium_ID = #2.Stadium_ID ] Output [ #1.Stadium_ID , #2.Name ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ concert ] Output [ Stadium_ID ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ stadium ] Output [ Name , Stadium_ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "concert_singer",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Stadium_ID ] Output [ Name , countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Stadium_ID = #2.Stadium_ID ] Output [ #1.Stadium_ID , #2.Name ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ concert ] Output [ Stadium_ID ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ stadium ] Output [ Name , Stadium_ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "concert_singer",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Capacity , Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Stadium_ID ] Output [ Capacity , Name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Stadium_ID = #2.Stadium_ID ] Output [ #2.Stadium_ID , #2.Capacity , #2.Name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ concert ] Predicate [ Year >= 2014 ] Output [ Year , Stadium_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ stadium ] Output [ Capacity , Stadium_ID , Name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'capacity' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "concert_singer",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Capacity , Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Stadium_ID ] Output [ Capacity , Name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Stadium_ID = #2.Stadium_ID ] Output [ #2.Stadium_ID , #2.Capacity , #2.Name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ concert ] Predicate [ Year > 2013 ] Output [ Year , Stadium_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ stadium ] Output [ Capacity , Stadium_ID , Name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'capacity' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "car_1",
    "line_num": 6,
    "op": "Join",
    "qpl_line": "#6 = Join [ #1 , #5 ] Predicate [ #5.Id = #1.MakeId ] Output [ #1.Model ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ car_names ] Output [ MakeId , Model ]",
        "children": []
      },
      {
        "line_num": 5,
        "op": "Join",
        "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #4.Weight < #3.Avg_Weight ] Output [ #4.Id ]",
        "children": [
          {
            "line_num": 3,
            "op": "Aggregate",
            "qpl_line": "#3 = Aggregate [ #2 ] Output [ AVG(Weight) AS Avg_Weight ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ cars_data ] Output [ Weight ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 4,
            "op": "Scan",
            "qpl_line": "#4 = Scan Table [ cars_data ] Output [ Weight , Id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Join': 'Number' and 'car_names, cars_data'"
  },
  {
    "split": "validation",
    "db_id": "car_1",
    "line_num": 6,
    "op": "Join",
    "qpl_line": "#6 = Join [ #1 , #5 ] Predicate [ #5.Id = #1.MakeId ] Output [ #1.Model ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ car_names ] Output [ MakeId , Model ]",
        "children": []
      },
      {
        "line_num": 5,
        "op": "Join",
        "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #4.Weight < #3.Avg_Weight ] Output [ #4.Id ]",
        "children": [
          {
            "line_num": 3,
            "op": "Aggregate",
            "qpl_line": "#3 = Aggregate [ #2 ] Output [ AVG(Weight) AS Avg_Weight ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ cars_data ] Output [ Weight ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 4,
            "op": "Scan",
            "qpl_line": "#4 = Scan Table [ cars_data ] Output [ Weight , Id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Join': 'Number' and 'car_names, cars_data'"
  },
  {
    "split": "validation",
    "db_id": "car_1",
    "line_num": 11,
    "op": "Union",
    "qpl_line": "#11 = Union [ #5 , #10 ] Output [ #5.CountryId , #5.CountryName ]",
    "children": [
      {
        "line_num": 5,
        "op": "Filter",
        "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 3 ] Output [ CountryId , CountryName ]",
        "children": [
          {
            "line_num": 4,
            "op": "Aggregate",
            "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ CountryId ] Output [ CountryId , countstar AS Count_Star , CountryName ]",
            "children": [
              {
                "line_num": 3,
                "op": "Join",
                "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.CountryId = #2.Country ] Output [ #1.CountryId , #1.CountryName ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ countries ] Output [ CountryId , CountryName ]",
                    "children": []
                  },
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ car_makers ] Output [ Country ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "line_num": 10,
        "op": "Join",
        "qpl_line": "#10 = Join [ #8 , #9 ] Predicate [ #8.Country = #9.CountryId ] Output [ #9.CountryId , #9.CountryName ]",
        "children": [
          {
            "line_num": 8,
            "op": "Join",
            "qpl_line": "#8 = Join [ #6 , #7 ] Predicate [ #6.Maker = #7.Id ] Output [ #7.Country ]",
            "children": [
              {
                "line_num": 6,
                "op": "Scan",
                "qpl_line": "#6 = Scan Table [ model_list ] Predicate [ Model = 'fiat' ] Output [ Model , Maker ]",
                "children": []
              },
              {
                "line_num": 7,
                "op": "Scan",
                "qpl_line": "#7 = Scan Table [ car_makers ] Output [ Country , Id ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 9,
            "op": "Scan",
            "qpl_line": "#9 = Scan Table [ countries ] Output [ CountryId , CountryName ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'countryname' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "car_1",
    "line_num": 11,
    "op": "Union",
    "qpl_line": "#11 = Union [ #5 , #10 ] Output [ #5.CountryId , #5.CountryName ]",
    "children": [
      {
        "line_num": 5,
        "op": "Filter",
        "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 3 ] Output [ CountryId , CountryName ]",
        "children": [
          {
            "line_num": 4,
            "op": "Aggregate",
            "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ CountryId ] Output [ CountryId , countstar AS Count_Star , CountryName ]",
            "children": [
              {
                "line_num": 3,
                "op": "Join",
                "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.CountryId = #2.Country ] Output [ #1.CountryId , #1.CountryName ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ countries ] Output [ CountryId , CountryName ]",
                    "children": []
                  },
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ car_makers ] Output [ Country ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "line_num": 10,
        "op": "Join",
        "qpl_line": "#10 = Join [ #8 , #9 ] Predicate [ #8.Country = #9.CountryId ] Output [ #9.CountryId , #9.CountryName ]",
        "children": [
          {
            "line_num": 8,
            "op": "Join",
            "qpl_line": "#8 = Join [ #6 , #7 ] Predicate [ #6.Maker = #7.Id ] Output [ #7.Country ]",
            "children": [
              {
                "line_num": 6,
                "op": "Scan",
                "qpl_line": "#6 = Scan Table [ model_list ] Predicate [ Model = 'fiat' ] Output [ Model , Maker ]",
                "children": []
              },
              {
                "line_num": 7,
                "op": "Scan",
                "qpl_line": "#7 = Scan Table [ car_makers ] Output [ Country , Id ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 9,
            "op": "Scan",
            "qpl_line": "#9 = Scan Table [ countries ] Output [ CountryId , CountryName ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'countryname' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "flight_2",
    "line_num": 6,
    "op": "TopSort",
    "qpl_line": "#6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Abbreviation , Country , Count_Star ]",
    "children": [
      {
        "line_num": 5,
        "op": "Aggregate",
        "qpl_line": "#5 = Aggregate [ #4 ] GroupBy [ Abbreviation , Country , Airline ] Output [ countstar AS Count_Star , Abbreviation , Country ]",
        "children": [
          {
            "line_num": 4,
            "op": "Join",
            "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.Airline = #3.uid ] Output [ #3.Country , #3.Abbreviation , #2.Count_Star , #3.Airline ]",
            "children": [
              {
                "line_num": 2,
                "op": "Aggregate",
                "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ Airline ] Output [ Airline , countstar AS Count_Star ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ flights ] Output [ Airline ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ airlines ] Output [ Airline , Abbreviation , uid , Country ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #5: GroupBy column 'airline' not found in aggregate output: ['count_star', 'abbreviation', 'country']."
  },
  {
    "split": "validation",
    "db_id": "flight_2",
    "line_num": 6,
    "op": "TopSort",
    "qpl_line": "#6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Abbreviation , Country , Count_Star ]",
    "children": [
      {
        "line_num": 5,
        "op": "Aggregate",
        "qpl_line": "#5 = Aggregate [ #4 ] GroupBy [ Abbreviation , Country , Airline ] Output [ countstar AS Count_Star , Abbreviation , Country ]",
        "children": [
          {
            "line_num": 4,
            "op": "Join",
            "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.Airline = #3.uid ] Output [ #3.Country , #3.Abbreviation , #2.Count_Star , #3.Airline ]",
            "children": [
              {
                "line_num": 2,
                "op": "Aggregate",
                "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ Airline ] Output [ Airline , countstar AS Count_Star ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ flights ] Output [ Airline ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ airlines ] Output [ Airline , Abbreviation , uid , Country ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #5: GroupBy column 'airline' not found in aggregate output: ['count_star', 'abbreviation', 'country']."
  },
  {
    "split": "validation",
    "db_id": "employee_hire_evaluation",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Number_products > #2.Avg_Number_products ] Output [ #3.Name ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Number_products) AS Avg_Number_products ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ shop ] Output [ Number_products ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ shop ] Output [ Name , Number_products ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'shop'"
  },
  {
    "split": "validation",
    "db_id": "employee_hire_evaluation",
    "line_num": 4,
    "op": "Join",
    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Number_products > #2.Avg_Number_products ] Output [ #3.Name ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Number_products) AS Avg_Number_products ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ shop ] Output [ Number_products ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ shop ] Output [ Name , Number_products ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'shop'"
  },
  {
    "split": "validation",
    "db_id": "employee_hire_evaluation",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Name , Count_Star ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Shop_ID ] Output [ Name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Shop_ID = #2.Shop_ID ] Output [ #1.Shop_ID , #2.Name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ hiring ] Output [ Shop_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ shop ] Output [ Name , Shop_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "employee_hire_evaluation",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Name , Count_Star ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Shop_ID ] Output [ Name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Shop_ID = #2.Shop_ID ] Output [ #1.Shop_ID , #2.Name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ hiring ] Output [ Shop_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ shop ] Output [ Name , Shop_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "battle_death",
    "line_num": 3,
    "op": "Intersect",
    "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #2.lost_in_battle = #1.id ] Output [ #1.id , #1.name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ battle ] Output [ id , name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ ship ] Predicate [ ship_type = 'Brig' ] Output [ lost_in_battle , ship_type ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'battle' and 'battle, ship'"
  },
  {
    "split": "validation",
    "db_id": "battle_death",
    "line_num": 7,
    "op": "Filter",
    "qpl_line": "#7 = Filter [ #6 ] Predicate [ Sum_killed > 10 ] Output [ name , id ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ id ] Output [ SUM(killed) AS Sum_killed , name , id ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.id = #4.caused_by_ship_id ] Output [ #3.id , #3.name , #4.killed ]",
            "children": [
              {
                "line_num": 3,
                "op": "Join",
                "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.lost_in_battle = #2.id ] Output [ #2.id , #2.name ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ ship ] Output [ lost_in_battle , id ]",
                    "children": []
                  },
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ battle ] Output [ name , id ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 4,
                "op": "Scan",
                "qpl_line": "#4 = Scan Table [ death ] Output [ caused_by_ship_id , killed ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Join': 'battle' and 'death, ship'"
  },
  {
    "split": "validation",
    "db_id": "battle_death",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 3,
        "op": "Except",
        "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.lost_in_battle IS NULL OR #1.id = #2.lost_in_battle ] Output [ #1.id ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ battle ] Output [ id ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ ship ] Predicate [ tonnage = '225' ] Output [ tonnage , lost_in_battle ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'battle' and 'battle, ship'"
  },
  {
    "split": "validation",
    "db_id": "student_transcripts_tracking",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star <= 2 ] Output [ course_id , course_name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ course_id ] Output [ countstar AS Count_Star , course_id , course_name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.course_id = #2.course_id ] Output [ #2.course_name , #2.course_id ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Sections ] Output [ course_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Courses ] Output [ course_id , course_name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'course_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "student_transcripts_tracking",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star <= 2 ] Output [ course_id , course_name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ course_id ] Output [ countstar AS Count_Star , course_id , course_name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.course_id = #2.course_id ] Output [ #2.course_name , #2.course_id ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Sections ] Output [ course_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Courses ] Output [ course_id , course_name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'course_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "tvshow",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Channel = #1.id ] Output [ #1.id ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ TV_Channel ] Output [ id ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Directed_by , Channel ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'TV_Channel' and 'Cartoon, TV_Channel'"
  },
  {
    "split": "validation",
    "db_id": "tvshow",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Channel = #1.id ] Output [ #1.id ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ TV_Channel ] Output [ id ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Directed_by , Channel ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'TV_Channel' and 'Cartoon, TV_Channel'"
  },
  {
    "split": "validation",
    "db_id": "tvshow",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Channel IS NULL OR #1.id = #2.Channel ] Output [ #1.Package_Option ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ TV_Channel ] Output [ id , Package_Option ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Directed_by , Channel ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'TV_Channel' and 'Cartoon, TV_Channel'"
  },
  {
    "split": "validation",
    "db_id": "tvshow",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Channel IS NULL OR #1.id = #2.Channel ] Output [ #1.Package_Option ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ TV_Channel ] Output [ id , Package_Option ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Directed_by , Channel ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'TV_Channel' and 'Cartoon, TV_Channel'"
  },
  {
    "split": "validation",
    "db_id": "world_1",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #2 , #3 ] Predicate [ #2.CountryCode = #3.CountryCode ] Output [ #2.CountryCode ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ CountryCode ] Output [ CountryCode ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ countrylanguage ] Output [ CountryCode ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ countrylanguage ] Predicate [ Language = 'English' ] Output [ Language , CountryCode ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'country' and 'country, countrylanguage'"
  },
  {
    "split": "validation",
    "db_id": "world_1",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #2 , #3 ] Predicate [ #2.CountryCode = #3.CountryCode ] Output [ #2.CountryCode ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ CountryCode ] Output [ CountryCode ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ countrylanguage ] Output [ CountryCode ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ countrylanguage ] Predicate [ Language = 'English' ] Output [ Language , CountryCode ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'country' and 'country, countrylanguage'"
  },
  {
    "split": "validation",
    "db_id": "world_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.CountryCode = #1.Code ] Output [ #1.Code ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ country ] Predicate [ GovernmentForm <> 'Republic' ] Output [ GovernmentForm , Code ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ countrylanguage ] Predicate [ Language = 'English' ] Output [ Language , CountryCode ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'country' and 'country, countrylanguage'"
  },
  {
    "split": "validation",
    "db_id": "world_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.CountryCode = #1.Code ] Output [ #1.Code ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ country ] Predicate [ GovernmentForm <> 'Republic' ] Output [ GovernmentForm , Code ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ countrylanguage ] Predicate [ Language = 'English' ] Output [ Language , CountryCode ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'country' and 'country, countrylanguage'"
  },
  {
    "split": "validation",
    "db_id": "world_1",
    "line_num": 5,
    "op": "Aggregate",
    "qpl_line": "#5 = Aggregate [ #4 ] GroupBy [ District ] Output [ countstar AS Count_Star , District ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Population > #2.Avg_Population ] Output [ #3.District ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Population) AS Avg_Population ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ city ] Output [ Population ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ city ] Output [ Population , District ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'city'"
  },
  {
    "split": "validation",
    "db_id": "world_1",
    "line_num": 5,
    "op": "Aggregate",
    "qpl_line": "#5 = Aggregate [ #4 ] GroupBy [ District ] Output [ countstar AS Count_Star , District ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Population > #2.Avg_Population ] Output [ #3.District ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(Population) AS Avg_Population ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ city ] Output [ Population ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ city ] Output [ Population , District ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'city'"
  },
  {
    "split": "validation",
    "db_id": "world_1",
    "line_num": 2,
    "op": "Aggregate",
    "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ CountryCode ] Output [ countstar AS Count_Star , MAX(Percentage) AS Max_Percentage ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ countrylanguage ] Predicate [ Language = 'Spanish' ] Output [ Language , Percentage , CountryCode ]",
        "children": []
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #2: GroupBy column 'countrycode' not found in aggregate output: ['count_star', 'max_percentage']."
  },
  {
    "split": "validation",
    "db_id": "world_1",
    "line_num": 2,
    "op": "Aggregate",
    "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ CountryCode ] Output [ countstar AS Count_Star , MAX(Percentage) AS Max_Percentage ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ countrylanguage ] Predicate [ Language = 'Spanish' ] Output [ Language , Percentage , CountryCode ]",
        "children": []
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #2: GroupBy column 'countrycode' not found in aggregate output: ['count_star', 'max_percentage']."
  },
  {
    "split": "validation",
    "db_id": "orchestra",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Name, Conductor_ID ] Output [ Name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #2.Conductor_ID = #1.Conductor_ID ] Output [ #1.Name , #1.Conductor_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ conductor ] Output [ Conductor_ID , Name ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ orchestra ] Output [ Conductor_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: GroupBy column 'conductor_id' not found in aggregate output: ['name', 'count_star']."
  },
  {
    "split": "validation",
    "db_id": "orchestra",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Name, Conductor_ID ] Output [ Name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #2.Conductor_ID = #1.Conductor_ID ] Output [ #1.Name , #1.Conductor_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ conductor ] Output [ Conductor_ID , Name ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ orchestra ] Output [ Conductor_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: GroupBy column 'conductor_id' not found in aggregate output: ['name', 'count_star']."
  },
  {
    "split": "validation",
    "db_id": "orchestra",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Name, Conductor_ID ] Output [ Name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #2.Conductor_ID = #1.Conductor_ID ] Output [ #1.Name , #1.Conductor_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ conductor ] Output [ Conductor_ID , Name ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ orchestra ] Output [ Conductor_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: GroupBy column 'conductor_id' not found in aggregate output: ['name', 'count_star']."
  },
  {
    "split": "validation",
    "db_id": "orchestra",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Name, Conductor_ID ] Output [ Name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #2.Conductor_ID = #1.Conductor_ID ] Output [ #1.Name , #1.Conductor_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ conductor ] Output [ Conductor_ID , Name ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ orchestra ] Output [ Conductor_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: GroupBy column 'conductor_id' not found in aggregate output: ['name', 'count_star']."
  },
  {
    "split": "validation",
    "db_id": "orchestra",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Year_of_Founded ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Year_of_Founded, Orchestra_ID ] Output [ Year_of_Founded , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #2.Orchestra_ID = #1.Orchestra_ID ] Output [ #1.Orchestra_ID , #1.Year_of_Founded ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ orchestra ] Output [ Year_of_Founded , Orchestra_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ performance ] Output [ Orchestra_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: GroupBy column 'orchestra_id' not found in aggregate output: ['year_of_founded', 'count_star']."
  },
  {
    "split": "validation",
    "db_id": "orchestra",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Year_of_Founded ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Year_of_Founded, Orchestra_ID ] Output [ Year_of_Founded , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #2.Orchestra_ID = #1.Orchestra_ID ] Output [ #1.Orchestra_ID , #1.Year_of_Founded ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ orchestra ] Output [ Year_of_Founded , Orchestra_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ performance ] Output [ Orchestra_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: GroupBy column 'orchestra_id' not found in aggregate output: ['year_of_founded', 'count_star']."
  },
  {
    "split": "validation",
    "db_id": "network_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ countstar AS Count_Star , name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.ID = #2.student_id ] Output [ #2.student_id , #1.name ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Highschooler ] Output [ ID , name ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Friend ] Output [ student_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "network_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ countstar AS Count_Star , name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.ID = #2.student_id ] Output [ #2.student_id , #1.name ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Highschooler ] Output [ ID , name ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Friend ] Output [ student_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "network_1",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 3 ] Output [ name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ countstar AS Count_Star , name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.ID = #2.student_id ] Output [ #2.student_id , #1.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Highschooler ] Output [ ID , name ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Friend ] Output [ student_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "network_1",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 3 ] Output [ name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ countstar AS Count_Star , name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.ID = #2.student_id ] Output [ #2.student_id , #1.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Highschooler ] Output [ ID , name ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Friend ] Output [ student_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "network_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ countstar AS Count_Star , name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.ID ] Output [ #1.student_id , #2.name ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Likes ] Output [ student_id ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Highschooler ] Output [ ID , name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "network_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ countstar AS Count_Star , name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.ID ] Output [ #1.student_id , #2.name ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Likes ] Output [ student_id ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Highschooler ] Output [ ID , name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "network_1",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] WithTies [ true ] Output [ name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ countstar AS Count_Star , name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #2.student_id = #1.ID ] Output [ #2.student_id , #1.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Highschooler ] Output [ ID , name ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Likes ] Output [ student_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "network_1",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] WithTies [ true ] Output [ name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ countstar AS Count_Star , name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #2.student_id = #1.ID ] Output [ #2.student_id , #1.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Highschooler ] Output [ ID , name ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Likes ] Output [ student_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "network_1",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ countstar AS Count_Star , name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.ID ] Output [ #1.student_id , #2.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Likes ] Output [ student_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Highschooler ] Output [ ID , name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "network_1",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ countstar AS Count_Star , name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.ID ] Output [ #1.student_id , #2.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Likes ] Output [ student_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Highschooler ] Output [ ID , name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "network_1",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ countstar AS Count_Star , name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.ID = #2.student_id ] Output [ #2.student_id , #1.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Highschooler ] Predicate [ grade > 5 ] Output [ grade , ID , name ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Friend ] Output [ student_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "network_1",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ countstar AS Count_Star , name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.ID = #2.student_id ] Output [ #2.student_id , #1.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Highschooler ] Predicate [ grade > 5 ] Output [ grade , ID , name ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Friend ] Output [ student_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "dog_kennels",
    "line_num": 3,
    "op": "Intersect",
    "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #1.state = #2.state ] Output [ #1.state ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Owners ] Distinct [ true ] Output [ state ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Professionals ] Output [ state ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'Owners' and 'Professionals'"
  },
  {
    "split": "validation",
    "db_id": "dog_kennels",
    "line_num": 3,
    "op": "Intersect",
    "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #1.state = #2.state ] Output [ #1.state ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Owners ] Distinct [ true ] Output [ state ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Professionals ] Output [ state ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'Owners' and 'Professionals'"
  },
  {
    "split": "validation",
    "db_id": "dog_kennels",
    "line_num": 7,
    "op": "Union",
    "qpl_line": "#7 = Union [ #1 , #6 ] Output [ #1.last_name , #1.cell_number , #1.professional_id ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Professionals ] Predicate [ state = 'Indiana' ] Output [ cell_number , last_name , professional_id , state ]",
        "children": []
      },
      {
        "line_num": 6,
        "op": "Filter",
        "qpl_line": "#6 = Filter [ #5 ] Predicate [ Count_Star > 2 ] Output [ cell_number , last_name , professional_id ]",
        "children": [
          {
            "line_num": 5,
            "op": "Aggregate",
            "qpl_line": "#5 = Aggregate [ #4 ] GroupBy [ professional_id ] Output [ countstar AS Count_Star , cell_number , last_name , professional_id ]",
            "children": [
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.professional_id = #3.professional_id ] Output [ #3.last_name , #3.professional_id , #3.cell_number ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Treatments ] Output [ professional_id ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ Professionals ] Output [ cell_number , last_name , professional_id ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #5: Column 'cell_number' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "dog_kennels",
    "line_num": 7,
    "op": "Union",
    "qpl_line": "#7 = Union [ #1 , #6 ] Output [ #1.last_name , #1.cell_number , #1.professional_id ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Professionals ] Predicate [ state = 'Indiana' ] Output [ cell_number , last_name , professional_id , state ]",
        "children": []
      },
      {
        "line_num": 6,
        "op": "Filter",
        "qpl_line": "#6 = Filter [ #5 ] Predicate [ Count_Star > 2 ] Output [ cell_number , last_name , professional_id ]",
        "children": [
          {
            "line_num": 5,
            "op": "Aggregate",
            "qpl_line": "#5 = Aggregate [ #4 ] GroupBy [ professional_id ] Output [ countstar AS Count_Star , cell_number , last_name , professional_id ]",
            "children": [
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.professional_id = #3.professional_id ] Output [ #3.last_name , #3.professional_id , #3.cell_number ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Treatments ] Output [ professional_id ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ Professionals ] Output [ cell_number , last_name , professional_id ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #5: Column 'cell_number' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "dog_kennels",
    "line_num": 5,
    "op": "Except",
    "qpl_line": "#5 = Except [ #3 , #4 ] Predicate [ #4.name = #3.first_name ] Output [ #3.first_name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Union",
        "qpl_line": "#3 = Union [ #1 , #2 ] Output [ #1.first_name ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Professionals ] Output [ first_name ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Owners ] Output [ first_name ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 4,
        "op": "Scan",
        "qpl_line": "#4 = Scan Table [ Dogs ] Output [ name ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Union': 'Professionals' and 'Owners'"
  },
  {
    "split": "validation",
    "db_id": "dog_kennels",
    "line_num": 5,
    "op": "Except",
    "qpl_line": "#5 = Except [ #3 , #4 ] Predicate [ #4.name = #3.first_name ] Output [ #3.first_name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Union",
        "qpl_line": "#3 = Union [ #1 , #2 ] Output [ #1.first_name ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Professionals ] Output [ first_name ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Owners ] Output [ first_name ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 4,
        "op": "Scan",
        "qpl_line": "#4 = Scan Table [ Dogs ] Output [ name ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Union': 'Professionals' and 'Owners'"
  },
  {
    "split": "validation",
    "db_id": "dog_kennels",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ last_name , owner_id , Count_Star ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ owner_id ] Output [ countstar AS Count_Star , last_name , owner_id ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.dog_id = #4.dog_id ] Output [ #4.owner_id , #4.last_name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Treatments ] Output [ dog_id ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.owner_id = #3.owner_id ] Output [ #3.last_name , #3.owner_id , #2.dog_id ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Dogs ] Output [ owner_id , dog_id ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ Owners ] Output [ last_name , owner_id ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #6: Column 'last_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "dog_kennels",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ last_name , owner_id , Count_Star ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ owner_id ] Output [ countstar AS Count_Star , last_name , owner_id ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.dog_id = #4.dog_id ] Output [ #4.owner_id , #4.last_name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Treatments ] Output [ dog_id ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.owner_id = #3.owner_id ] Output [ #3.last_name , #3.owner_id , #2.dog_id ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Dogs ] Output [ owner_id , dog_id ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ Owners ] Output [ last_name , owner_id ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #6: Column 'last_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "dog_kennels",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Sum_cost_of_treatment DESC ] Output [ Sum_cost_of_treatment , zip_code , owner_id ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ owner_id ] Output [ SUM(cost_of_treatment) AS Sum_cost_of_treatment , zip_code , owner_id ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.dog_id = #4.dog_id ] Output [ #4.owner_id , #4.zip_code , #1.cost_of_treatment ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Treatments ] Output [ cost_of_treatment , dog_id ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.owner_id = #3.owner_id ] Output [ #2.dog_id , #3.owner_id , #3.zip_code ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Dogs ] Output [ owner_id , dog_id ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ Owners ] Output [ zip_code , owner_id ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #6: Column 'zip_code' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "dog_kennels",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Sum_cost_of_treatment DESC ] Output [ Sum_cost_of_treatment , zip_code , owner_id ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ owner_id ] Output [ SUM(cost_of_treatment) AS Sum_cost_of_treatment , zip_code , owner_id ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.dog_id = #4.dog_id ] Output [ #4.owner_id , #4.zip_code , #1.cost_of_treatment ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Treatments ] Output [ cost_of_treatment , dog_id ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.owner_id = #3.owner_id ] Output [ #2.dog_id , #3.owner_id , #3.zip_code ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Dogs ] Output [ owner_id , dog_id ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ Owners ] Output [ zip_code , owner_id ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Inference Error",
    "error": "TypeInferenceError in line #6: Column 'zip_code' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "dog_kennels",
    "line_num": 6,
    "op": "Join",
    "qpl_line": "#6 = Join [ #4 , #5 ] Distinct [ true ] Output [ #5.last_name , #5.first_name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.cost_of_treatment < #2.Avg_cost_of_treatment ] Output [ #3.cost_of_treatment ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(cost_of_treatment) AS Avg_cost_of_treatment ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Treatments ] Output [ cost_of_treatment ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ Treatments ] Output [ cost_of_treatment ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 5,
        "op": "Scan",
        "qpl_line": "#5 = Scan Table [ Professionals ] Output [ first_name , last_name ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'Treatments'"
  },
  {
    "split": "validation",
    "db_id": "dog_kennels",
    "line_num": 6,
    "op": "Join",
    "qpl_line": "#6 = Join [ #4 , #5 ] Distinct [ true ] Output [ #5.last_name , #5.first_name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.cost_of_treatment < #2.Avg_cost_of_treatment ] Output [ #3.cost_of_treatment ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(cost_of_treatment) AS Avg_cost_of_treatment ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Treatments ] Output [ cost_of_treatment ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ Treatments ] Output [ cost_of_treatment ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 5,
        "op": "Scan",
        "qpl_line": "#5 = Scan Table [ Professionals ] Output [ first_name , last_name ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'Treatments'"
  },
  {
    "split": "validation",
    "db_id": "dog_kennels",
    "line_num": 5,
    "op": "Aggregate",
    "qpl_line": "#5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.age < #2.Avg_age ] Output [ 1 AS One ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(age) AS Avg_age ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Dogs ] Output [ age ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ Dogs ] Output [ age ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'Dogs'"
  },
  {
    "split": "validation",
    "db_id": "dog_kennels",
    "line_num": 5,
    "op": "Aggregate",
    "qpl_line": "#5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.age < #2.Avg_age ] Output [ 1 AS One ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(age) AS Avg_age ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Dogs ] Output [ age ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ Dogs ] Output [ age ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Number' and 'Dogs'"
  }
]