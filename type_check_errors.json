[
  {
    "split": "train",
    "db_id": "farm",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Official_Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Host_city_ID ] Output [ countstar AS Count_Star , Official_Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Host_city_ID = #2.City_ID ] Output [ #1.Host_city_ID , #2.Official_Name , #2.City_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ farm_competition ] Output [ Host_city_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ city ] Output [ City_ID , Official_Name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'official_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "farm",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Official_Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Host_city_ID ] Output [ countstar AS Count_Star , Official_Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Host_city_ID = #2.City_ID ] Output [ #1.Host_city_ID , #2.Official_Name , #2.City_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ farm_competition ] Output [ Host_city_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ city ] Output [ City_ID , Official_Name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'official_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "farm",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Host_city_ID IS NULL OR #1.City_ID = #2.Host_city_ID ] Output [ #1.Official_Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ city ] Output [ City_ID , Official_Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ farm_competition ] Output [ Host_city_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'city(2)' and 'city(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "farm",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Host_city_ID IS NULL OR #1.City_ID = #2.Host_city_ID ] Output [ #1.Official_Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ city ] Output [ City_ID , Official_Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ farm_competition ] Output [ Host_city_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'city(2)' and 'city(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "student_assessment",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.student_id = #1.student_id ] Output [ #1.registration_date , #1.course_id , #1.student_id ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Student_Course_Registrations ] Output [ student_id , course_id , registration_date ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ student_id ] Output [ student_id ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Student_Course_Attendance ] Output [ student_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'People(1), Courses(1), Student_Course_Registrations(1)' and 'People(1)' (must have the same number of columns in total: 3 != 1)."
  },
  {
    "split": "train",
    "db_id": "student_assessment",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.student_id = #1.student_id ] Output [ #1.registration_date , #1.course_id , #1.student_id ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Student_Course_Registrations ] Output [ student_id , course_id , registration_date ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ student_id ] Output [ student_id ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Student_Course_Attendance ] Output [ student_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'People(1), Courses(1), Student_Course_Registrations(1)' and 'People(1)' (must have the same number of columns in total: 3 != 1)."
  },
  {
    "split": "train",
    "db_id": "bike_1",
    "line_num": 6,
    "op": "Aggregate",
    "qpl_line": "#6 = Aggregate [ #5 ] Output [ AVG(long) AS Avg_long ]",
    "children": [
      {
        "line_num": 5,
        "op": "Except",
        "qpl_line": "#5 = Except [ #1 , #4 ] Predicate [ #4.station_id IS NULL OR #1.id = #4.station_id ] Output [ #1.long ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ station ] Output [ long , id ]",
            "children": []
          },
          {
            "line_num": 4,
            "op": "Filter",
            "qpl_line": "#4 = Filter [ #3 ] Predicate [ Max_bikes_available > 10 ] Output [ station_id ]",
            "children": [
              {
                "line_num": 3,
                "op": "Aggregate",
                "qpl_line": "#3 = Aggregate [ #2 ] Output [ station_id , MAX(bikes_available) AS Max_bikes_available ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ status ] Output [ station_id , bikes_available ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #3: Column 'station_id' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "bike_1",
    "line_num": 6,
    "op": "Aggregate",
    "qpl_line": "#6 = Aggregate [ #5 ] Output [ AVG(long) AS Avg_long ]",
    "children": [
      {
        "line_num": 5,
        "op": "Except",
        "qpl_line": "#5 = Except [ #1 , #4 ] Predicate [ #4.station_id IS NULL OR #1.id = #4.station_id ] Output [ #1.long ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ station ] Output [ long , id ]",
            "children": []
          },
          {
            "line_num": 4,
            "op": "Filter",
            "qpl_line": "#4 = Filter [ #3 ] Predicate [ Max_bikes_available > 10 ] Output [ station_id ]",
            "children": [
              {
                "line_num": 3,
                "op": "Aggregate",
                "qpl_line": "#3 = Aggregate [ #2 ] Output [ station_id , MAX(bikes_available) AS Max_bikes_available ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ status ] Output [ station_id , bikes_available ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #3: Column 'station_id' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "bike_1",
    "line_num": 7,
    "op": "Except",
    "qpl_line": "#7 = Except [ #5 , #6 ] Predicate [ #5.name = #6.name ] Output [ #5.name ]",
    "children": [
      {
        "line_num": 5,
        "op": "Filter",
        "qpl_line": "#5 = Filter [ #4 ] Predicate [ Avg_bikes_available > 10 ] Distinct [ true ] Output [ name ]",
        "children": [
          {
            "line_num": 4,
            "op": "Join",
            "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.station_id = #3.id ] Output [ #3.name , #2.Avg_bikes_available ]",
            "children": [
              {
                "line_num": 2,
                "op": "Aggregate",
                "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ station_id ] Output [ station_id , AVG(bikes_available) AS Avg_bikes_available ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ status ] Output [ station_id , bikes_available ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ station ] Output [ name , id ]",
                "children": []
              }
            ]
          }
        ]
      },
      {
        "line_num": 6,
        "op": "Scan",
        "qpl_line": "#6 = Scan Table [ station ] Predicate [ city = 'San Jose' ] Output [ name , city ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #7: Incompatible types for operator 'Except': 'station(1)' and 'station(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "bike_1",
    "line_num": 7,
    "op": "Except",
    "qpl_line": "#7 = Except [ #5 , #6 ] Predicate [ #5.name = #6.name ] Output [ #5.name ]",
    "children": [
      {
        "line_num": 5,
        "op": "Filter",
        "qpl_line": "#5 = Filter [ #4 ] Predicate [ Avg_bikes_available > 10 ] Distinct [ true ] Output [ name ]",
        "children": [
          {
            "line_num": 4,
            "op": "Join",
            "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.station_id = #3.id ] Output [ #3.name , #2.Avg_bikes_available ]",
            "children": [
              {
                "line_num": 2,
                "op": "Aggregate",
                "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ station_id ] Output [ station_id , AVG(bikes_available) AS Avg_bikes_available ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ status ] Output [ station_id , bikes_available ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ station ] Output [ name , id ]",
                "children": []
              }
            ]
          }
        ]
      },
      {
        "line_num": 6,
        "op": "Scan",
        "qpl_line": "#6 = Scan Table [ station ] Predicate [ city = 'San Jose' ] Output [ name , city ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #7: Incompatible types for operator 'Except': 'station(1)' and 'station(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "bike_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.zip_code = #2.zip_code ] Output [ #1.zip_code ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ weather ] Distinct [ true ] Output [ zip_code ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ weather ] Predicate [ max_dew_point_f >= 70 ] Distinct [ true ] Output [ zip_code , max_dew_point_f ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'weather(1)' and 'weather(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "bike_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.zip_code = #2.zip_code ] Output [ #1.zip_code ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ weather ] Distinct [ true ] Output [ zip_code ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ weather ] Predicate [ max_dew_point_f >= 70 ] Distinct [ true ] Output [ zip_code , max_dew_point_f ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'weather(1)' and 'weather(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "book_2",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Book_ID IS NULL OR #1.Book_ID = #2.Book_ID ] Output [ #1.Title ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ book ] Output [ Book_ID , Title ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ publication ] Output [ Book_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'book(2)' and 'book(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "musical",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Musical_ID IS NULL OR #1.Musical_ID = #2.Musical_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ musical ] Output [ Musical_ID , Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ actor ] Output [ Musical_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'musical(2)' and 'musical(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "musical",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Musical_ID IS NULL OR #1.Musical_ID = #2.Musical_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ musical ] Output [ Musical_ID , Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ actor ] Output [ Musical_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'musical(2)' and 'musical(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "twitter_1",
    "line_num": 2,
    "op": "Aggregate",
    "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ f1 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ follows ] Output [ f1 ]",
        "children": []
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #2: GroupBy column 'f1' not found in aggregate output: ['count_star']."
  },
  {
    "split": "train",
    "db_id": "twitter_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] Output [ AVG(followers) AS Avg_followers ]",
    "children": [
      {
        "line_num": 3,
        "op": "Except",
        "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.uid = #1.uid ] Output [ #1.followers ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ user_profiles ] Output [ followers , uid ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ tweets ] Output [ uid ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'user_profiles(2)' and 'user_profiles(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "twitter_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] Output [ AVG(followers) AS Avg_followers ]",
    "children": [
      {
        "line_num": 3,
        "op": "Intersect",
        "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #2.uid = #1.uid ] Output [ #1.followers ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ user_profiles ] Output [ followers , uid ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ tweets ] Output [ uid ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'user_profiles(2)' and 'user_profiles(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "product_catalog",
    "line_num": 3,
    "op": "Join",
    "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.attribute_id = #2.attribute_id ] Output [ #1.attribute_name , #1.attribute_id ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Attribute_Definitions ] Output [ attribute_id , attribute_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Catalog_Contents_Additional_Attributes ] Predicate [ attribute_value = 0 ] Output [ attribute_id , attribute_value ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Join': 'Attribute_Definitions(2)' and 'Catalog_Contents_Additional_Attributes(2)'"
  },
  {
    "split": "train",
    "db_id": "product_catalog",
    "line_num": 3,
    "op": "Join",
    "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.attribute_id = #2.attribute_id ] Output [ #1.attribute_name , #1.attribute_id ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Attribute_Definitions ] Output [ attribute_id , attribute_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Catalog_Contents_Additional_Attributes ] Predicate [ attribute_value = 0 ] Output [ attribute_id , attribute_value ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Join': 'Attribute_Definitions(2)' and 'Catalog_Contents_Additional_Attributes(2)'"
  },
  {
    "split": "train",
    "db_id": "flight_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ aid ] Output [ name , countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.aid = #2.aid ] Output [ #1.aid , #2.name ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ flight ] Output [ aid ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ aircraft ] Output [ aid , name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "flight_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ aid ] Output [ name , countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.aid = #2.aid ] Output [ #1.aid , #2.name ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ flight ] Output [ aid ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ aircraft ] Output [ aid , name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "flight_1",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ aid ] Output [ name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.aid = #2.aid ] Output [ #1.aid , #2.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ flight ] Output [ aid ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ aircraft ] Output [ aid , name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "flight_1",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ aid ] Output [ name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.aid = #2.aid ] Output [ #1.aid , #2.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ flight ] Output [ aid ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ aircraft ] Output [ aid , name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "flight_1",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ eid ] Output [ name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.eid = #4.eid ] Output [ #4.eid , #4.name ]",
            "children": [
              {
                "line_num": 3,
                "op": "Join",
                "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.aid = #2.aid ] Output [ #2.eid ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ aircraft ] Predicate [ distance > 5000 ] Output [ aid , distance ]",
                    "children": []
                  },
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ certificate ] Output [ aid , eid ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 4,
                "op": "Scan",
                "qpl_line": "#4 = Scan Table [ employee ] Output [ name , eid ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #6: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "flight_1",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ eid ] Output [ name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.eid = #4.eid ] Output [ #4.eid , #4.name ]",
            "children": [
              {
                "line_num": 3,
                "op": "Join",
                "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.aid = #2.aid ] Output [ #2.eid ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ aircraft ] Predicate [ distance > 5000 ] Output [ aid , distance ]",
                    "children": []
                  },
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ certificate ] Output [ aid , eid ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 4,
                "op": "Scan",
                "qpl_line": "#4 = Scan Table [ employee ] Output [ name , eid ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #6: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "allergy_1",
    "line_num": 6,
    "op": "Aggregate",
    "qpl_line": "#6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 5,
        "op": "Except",
        "qpl_line": "#5 = Except [ #1 , #4 ] ExceptColumns [ #1.StuID ] Output [ #1.Age , #1.StuID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Student ] Predicate [ Age > 18 ] Output [ StuID , Age ]",
            "children": []
          },
          {
            "line_num": 4,
            "op": "Join",
            "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Allergy = #2.Allergy ] Output [ #2.Allergy , #3.AllergyType , #2.StuID ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Has_Allergy ] Predicate [ StuID IS NULL OR StuID = StuID ] Output [ StuID , Allergy ]",
                "children": []
              },
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ Allergy_Type ] Predicate [ AllergyType = 'animal' OR AllergyType = 'food' ] Output [ AllergyType , Allergy ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Except': 'Student(2)' and 'Allergy_Type(2), Student(1)' (must have the same number of columns in total: 2 != 3)."
  },
  {
    "split": "train",
    "db_id": "allergy_1",
    "line_num": 6,
    "op": "Aggregate",
    "qpl_line": "#6 = Aggregate [ #5 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 5,
        "op": "Except",
        "qpl_line": "#5 = Except [ #1 , #4 ] ExceptColumns [ #1.StuID ] Output [ #1.Age , #1.StuID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Student ] Predicate [ Age > 18 ] Output [ StuID , Age ]",
            "children": []
          },
          {
            "line_num": 4,
            "op": "Join",
            "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Allergy = #2.Allergy ] Output [ #2.Allergy , #3.AllergyType , #2.StuID ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Has_Allergy ] Predicate [ StuID IS NULL OR StuID = StuID ] Output [ StuID , Allergy ]",
                "children": []
              },
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ Allergy_Type ] Predicate [ AllergyType = 'animal' OR AllergyType = 'food' ] Output [ AllergyType , Allergy ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Except': 'Student(2)' and 'Allergy_Type(2), Student(1)' (must have the same number of columns in total: 2 != 3)."
  },
  {
    "split": "train",
    "db_id": "allergy_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.StuID IS NULL OR #1.StuID = #2.StuID ] Output [ #1.Major , #1.Fname ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Student ] Output [ Fname , StuID , Major ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Has_Allergy ] Predicate [ Allergy = 'Soy' ] Output [ StuID , Allergy ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Student(3)' and 'Student(1), Allergy_Type(1)' (must have the same number of columns in total: 3 != 2)."
  },
  {
    "split": "train",
    "db_id": "allergy_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.StuID IS NULL OR #1.StuID = #2.StuID ] Output [ #1.Major , #1.Fname ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Student ] Output [ Fname , StuID , Major ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Has_Allergy ] Predicate [ Allergy = 'Soy' ] Output [ StuID , Allergy ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Student(3)' and 'Student(1), Allergy_Type(1)' (must have the same number of columns in total: 3 != 2)."
  },
  {
    "split": "train",
    "db_id": "store_1",
    "line_num": 3,
    "op": "Join",
    "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.genre_id = #2.id ] Output [ #2.title ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ tracks ] Predicate [ name = 'Balls to the Wall' ] Output [ name , genre_id ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ albums ] Output [ title , id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Join': 'tracks(1), genres(1)' and 'albums(2)'"
  },
  {
    "split": "train",
    "db_id": "store_1",
    "line_num": 3,
    "op": "Join",
    "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.genre_id = #2.id ] Output [ #2.title ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ tracks ] Predicate [ name = 'Balls to the Wall' ] Output [ name , genre_id ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ albums ] Output [ title , id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Join': 'tracks(1), genres(1)' and 'albums(2)'"
  },
  {
    "split": "train",
    "db_id": "store_1",
    "line_num": 3,
    "op": "Join",
    "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.genre_id ] Output [ #2.name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ albums ] Predicate [ title = 'Balls to the Wall' ] Output [ title , id ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ tracks ] Output [ name , genre_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Join': 'albums(2)' and 'tracks(1), genres(1)'"
  },
  {
    "split": "train",
    "db_id": "store_1",
    "line_num": 3,
    "op": "Join",
    "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.genre_id ] Output [ #2.name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ albums ] Predicate [ title = 'Balls to the Wall' ] Output [ title , id ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ tracks ] Output [ name , genre_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Join': 'albums(2)' and 'tracks(1), genres(1)'"
  },
  {
    "split": "train",
    "db_id": "journal_committee",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Editor_ID ] Output [ countstar AS Count_Star , Name , Editor_ID ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Editor_ID = #2.Editor_ID ] Output [ #2.Name , #2.Editor_ID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ journal_committee ] Output [ Editor_ID ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ editor ] Output [ Name , Editor_ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "journal_committee",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.Editor_ID = #1.Editor_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ editor ] Output [ Name , Editor_ID ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ Editor_ID ] Output [ Editor_ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ journal_committee ] Output [ Editor_ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'editor(2)' and 'editor(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "customers_card_transactions",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ customer_last_name , customer_id , customer_first_name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_last_name , customer_id , customer_first_name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.customer_first_name , #1.customer_id , #2.customer_last_name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Customers_Cards ] Output [ customer_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , customer_first_name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'customer_last_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "customers_card_transactions",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ customer_last_name , customer_id , customer_first_name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_last_name , customer_id , customer_first_name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.customer_first_name , #1.customer_id , #2.customer_last_name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Customers_Cards ] Output [ customer_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Customers ] Output [ customer_last_name , customer_id , customer_first_name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'customer_last_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "race_track",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Track_ID IS NULL OR #1.Track_ID = #2.Track_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ track ] Output [ Track_ID , Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ race ] Output [ Track_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'track(2)' and 'track(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "race_track",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Track_ID IS NULL OR #1.Track_ID = #2.Track_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ track ] Output [ Track_ID , Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ race ] Output [ Track_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'track(2)' and 'track(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "race_track",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Track_ID ] Output [ countstar AS Count_Star , Name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Track_ID = #2.Track_ID ] Output [ #2.Name , #1.Track_ID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ race ] Output [ Track_ID ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ track ] Output [ Track_ID , Name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "race_track",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Track_ID ] Output [ countstar AS Count_Star , Name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Track_ID = #2.Track_ID ] Output [ #2.Name , #1.Track_ID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ race ] Output [ Track_ID ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ track ] Output [ Track_ID , Name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "race_track",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Track_ID ] Output [ countstar AS Count_Star , Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Track_ID = #2.Track_ID ] Output [ #2.Name , #1.Track_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ race ] Output [ Track_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ track ] Output [ Track_ID , Name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "race_track",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Track_ID ] Output [ countstar AS Count_Star , Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Track_ID = #2.Track_ID ] Output [ #2.Name , #1.Track_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ race ] Output [ Track_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ track ] Output [ Track_ID , Name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "race_track",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star = 1 ] Output [ Location , Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Track_ID ] Output [ countstar AS Count_Star , Location , Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Track_ID = #2.Track_ID ] Output [ #2.Name , #1.Track_ID , #2.Location ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ race ] Output [ Track_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ track ] Output [ Track_ID , Location , Name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'location' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "race_track",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star = 1 ] Output [ Location , Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Track_ID ] Output [ countstar AS Count_Star , Location , Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Track_ID = #2.Track_ID ] Output [ #2.Name , #1.Track_ID , #2.Location ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ race ] Output [ Track_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ track ] Output [ Track_ID , Location , Name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'location' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "coffee_shop",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.Address = #2.Address ] Output [ #1.Address ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ member ] Distinct [ true ] Output [ Address ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ member ] Predicate [ Membership_card = 'Black' ] Output [ Membership_card , Address ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'member(1)' and 'member(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "coffee_shop",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Shop_ID = #1.Shop_ID ] Output [ #1.Address , #1.Num_of_staff ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ shop ] Output [ Shop_ID , Address , Num_of_staff ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ happy_hour ] Output [ Shop_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'shop(3)' and 'shop(1)' (must have the same number of columns in total: 3 != 1)."
  },
  {
    "split": "train",
    "db_id": "chinook_1",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star <= 20 ] Output [ LastName ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ SupportRepId , LastName ] Output [ countstar AS Count_Star , LastName ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.EmployeeId = #2.SupportRepId ] Output [ #2.LastName , #2.SupportRepId ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Employee ] Output [ EmployeeId ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Customer ] Output [ LastName , SupportRepId ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: GroupBy column 'supportrepid' not found in aggregate output: ['count_star', 'lastname']."
  },
  {
    "split": "train",
    "db_id": "chinook_1",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star <= 20 ] Output [ LastName ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ SupportRepId , LastName ] Output [ countstar AS Count_Star , LastName ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.EmployeeId = #2.SupportRepId ] Output [ #2.LastName , #2.SupportRepId ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Employee ] Output [ EmployeeId ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Customer ] Output [ LastName , SupportRepId ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: GroupBy column 'supportrepid' not found in aggregate output: ['count_star', 'lastname']."
  },
  {
    "split": "train",
    "db_id": "medicine_enzyme_interaction",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ name , id ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ id ] Output [ name , countstar AS Count_Star , id ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.medicine_id = #2.id ] Output [ #2.id , #2.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ medicine_enzyme_interaction ] Output [ medicine_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ medicine ] Output [ name , id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "medicine_enzyme_interaction",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ name , id ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ id ] Output [ name , countstar AS Count_Star , id ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.medicine_id = #2.id ] Output [ #2.id , #2.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ medicine_enzyme_interaction ] Output [ medicine_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ medicine ] Output [ name , id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "medicine_enzyme_interaction",
    "line_num": 5,
    "op": "Sort",
    "qpl_line": "#5 = Sort [ #4 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star , FDA_approved , id ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ id ] Output [ name , FDA_approved , countstar AS Count_Star , id ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.medicine_id = #2.id ] Output [ #2.FDA_approved , #2.id , #2.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ medicine_enzyme_interaction ] Output [ medicine_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ medicine ] Output [ name , FDA_approved , id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "medicine_enzyme_interaction",
    "line_num": 5,
    "op": "Sort",
    "qpl_line": "#5 = Sort [ #4 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star , FDA_approved , id ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ id ] Output [ name , FDA_approved , countstar AS Count_Star , id ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.medicine_id = #2.id ] Output [ #2.FDA_approved , #2.id , #2.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ medicine_enzyme_interaction ] Output [ medicine_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ medicine ] Output [ name , FDA_approved , id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "medicine_enzyme_interaction",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 3 ] Output [ Trade_Name , id ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ id ] Output [ countstar AS Count_Star , Trade_Name , id ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.medicine_id = #2.id ] Output [ #2.id , #2.Trade_Name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ medicine_enzyme_interaction ] Output [ medicine_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ medicine ] Output [ Trade_Name , id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'trade_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "medicine_enzyme_interaction",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 3 ] Output [ Trade_Name , id ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ id ] Output [ countstar AS Count_Star , Trade_Name , id ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.medicine_id = #2.id ] Output [ #2.id , #2.Trade_Name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ medicine_enzyme_interaction ] Output [ medicine_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ medicine ] Output [ Trade_Name , id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'trade_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "phone_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] Output [ AVG(RAM_MiB) AS Avg_RAM_MiB ]",
    "children": [
      {
        "line_num": 3,
        "op": "Except",
        "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.chip_model IS NULL OR #1.Model_name = #2.chip_model ] Output [ #1.RAM_MiB ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ chip_model ] Output [ RAM_MiB , Model_name ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ phone ] Output [ chip_model ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'chip_model(2)' and 'chip_model(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "match_season",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Team IS NULL OR #1.Team_id = #2.Team ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ team ] Output [ Name , Team_id ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ match_season ] Output [ Team ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'team(2)' and 'team(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "match_season",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Team IS NULL OR #1.Team_id = #2.Team ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ team ] Output [ Name , Team_id ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ match_season ] Output [ Team ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'team(2)' and 'team(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "climbing",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Mountain_ID IS NULL OR #1.Mountain_ID = #2.Mountain_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ mountain ] Output [ Name , Mountain_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ climber ] Output [ Mountain_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'mountain(2)' and 'mountain(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "climbing",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Mountain_ID IS NULL OR #1.Mountain_ID = #2.Mountain_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ mountain ] Output [ Name , Mountain_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ climber ] Output [ Mountain_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'mountain(2)' and 'mountain(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "election_representative",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Representative_ID IS NULL OR #1.Representative_ID = #2.Representative_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ representative ] Output [ Representative_ID , Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ election ] Output [ Representative_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'representative(2)' and 'representative(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "game_injury",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Score , id , Date ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ id ] Output [ countstar AS Count_Star , Score , id , Date ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.game_id = #2.id ] Output [ #2.id , #2.Score , #2.Date ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ injury_accident ] Output [ game_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ game ] Output [ Score , id , Date ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'score' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "game_injury",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star , id ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ id ] Output [ name , countstar AS Count_Star , id ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.id = #4.stadium_id ] Output [ #1.name , #1.id ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ stadium ] Output [ name , id ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.game_id = #3.id ] Output [ #3.stadium_id ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ injury_accident ] Output [ game_id ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ game ] Output [ stadium_id , id ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #6: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "game_injury",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star , id ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ id ] Output [ name , countstar AS Count_Star , id ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.id = #4.stadium_id ] Output [ #1.name , #1.id ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ stadium ] Output [ name , id ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.game_id = #3.id ] Output [ #3.stadium_id ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ injury_accident ] Output [ game_id ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ game ] Output [ stadium_id , id ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #6: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "performance_attendance",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.Member_ID = #1.Member_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ member ] Output [ Name , Member_ID ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ Member_ID ] Output [ Member_ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ member_attendance ] Output [ Member_ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'member(2)' and 'member(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.course_id = #1.course_id ] Output [ #1.title ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ course ] Output [ course_id , title ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ course_id ] Output [ course_id ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ prereq ] Output [ course_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'course(2)' and 'course(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.course_id = #1.course_id ] Output [ #1.title ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ course ] Output [ course_id , title ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ course_id ] Output [ course_id ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ prereq ] Output [ course_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'course(2)' and 'course(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ s_ID ] Output [ name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.ID = #2.s_ID ] Output [ #1.ID , #1.name , #2.s_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ student ] Output [ name , ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ advisor ] Output [ s_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ s_ID ] Output [ name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.ID = #2.s_ID ] Output [ #1.ID , #1.name , #2.s_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ student ] Output [ name , ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ advisor ] Output [ s_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.course_id = #1.course_id ] Output [ #1.title ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ course ] Output [ course_id , title ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ course_id ] Output [ course_id ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ prereq ] Output [ course_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'course(2)' and 'course(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 5,
    "op": "Intersect",
    "qpl_line": "#5 = Intersect [ #1 , #4 ] Predicate [ #4.prereq_id = #1.course_id ] Output [ #1.title ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ course ] Output [ course_id , title ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #3.prereq_id ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ course ] Predicate [ title = 'International Finance' ] Output [ course_id , title ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ prereq ] Output [ prereq_id , course_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Intersect': 'course(2)' and 'course(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 5,
    "op": "Intersect",
    "qpl_line": "#5 = Intersect [ #1 , #4 ] Predicate [ #4.prereq_id = #1.course_id ] Output [ #1.title ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ course ] Output [ course_id , title ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #3.prereq_id ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ course ] Predicate [ title = 'International Finance' ] Output [ course_id , title ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ prereq ] Output [ prereq_id , course_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Intersect': 'course(2)' and 'course(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 5,
    "op": "Intersect",
    "qpl_line": "#5 = Intersect [ #1 , #4 ] Predicate [ #4.course_id = #1.course_id ] Output [ #1.title ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ course ] Output [ course_id , title ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.course_id = #3.prereq_id ] Output [ #3.course_id ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ course ] Predicate [ title = 'Differential Geometry' ] Output [ course_id , title ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ prereq ] Output [ prereq_id , course_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Intersect': 'course(2)' and 'course(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 5,
    "op": "Intersect",
    "qpl_line": "#5 = Intersect [ #1 , #4 ] Predicate [ #4.course_id = #1.course_id ] Output [ #1.title ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ course ] Output [ course_id , title ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.course_id = #3.prereq_id ] Output [ #3.course_id ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ course ] Predicate [ title = 'Differential Geometry' ] Output [ course_id , title ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ prereq ] Output [ prereq_id , course_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Intersect': 'course(2)' and 'course(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 5,
    "op": "Intersect",
    "qpl_line": "#5 = Intersect [ #1 , #4 ] Predicate [ #4.prereq_id = #1.course_id ] Output [ #1.title ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ course ] Output [ course_id , title ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #3.prereq_id ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ course ] Predicate [ title = 'Mobile Computing' ] Output [ course_id , title ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ prereq ] Output [ prereq_id , course_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Intersect': 'course(2)' and 'course(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 5,
    "op": "Intersect",
    "qpl_line": "#5 = Intersect [ #1 , #4 ] Predicate [ #4.prereq_id = #1.course_id ] Output [ #1.title ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ course ] Output [ course_id , title ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #3.prereq_id ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ course ] Predicate [ title = 'Mobile Computing' ] Output [ course_id , title ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ prereq ] Output [ prereq_id , course_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Intersect': 'course(2)' and 'course(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.ID = #1.ID ] Output [ #1.name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ instructor ] Output [ name , ID ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ ID ] Output [ ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ teaches ] Output [ ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'instructor(2)' and 'instructor(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.ID = #1.ID ] Output [ #1.name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ instructor ] Output [ name , ID ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ ID ] Output [ ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ teaches ] Output [ ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'instructor(2)' and 'instructor(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.ID = #1.ID ] Output [ #1.name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ instructor ] Output [ name , ID ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ ID ] Output [ ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ teaches ] Predicate [ semester = 'Spring' ] Output [ semester , ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'instructor(2)' and 'instructor(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.ID = #1.ID ] Output [ #1.name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ instructor ] Output [ name , ID ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ ID ] Output [ ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ teaches ] Predicate [ semester = 'Spring' ] Output [ semester , ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'instructor(2)' and 'instructor(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 5,
    "op": "Except",
    "qpl_line": "#5 = Except [ #1 , #4 ] Predicate [ #4.ID = #1.ID ] Output [ #1.name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ student ] Output [ name , ID ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #3.ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ course ] Predicate [ dept_name = 'Biology' ] Output [ dept_name , course_id ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ takes ] Output [ course_id , ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Except': 'student(2)' and 'student(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 5,
    "op": "Except",
    "qpl_line": "#5 = Except [ #1 , #4 ] Predicate [ #4.ID = #1.ID ] Output [ #1.name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ student ] Output [ name , ID ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #3.ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ course ] Predicate [ dept_name = 'Biology' ] Output [ dept_name , course_id ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ takes ] Output [ course_id , ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Except': 'student(2)' and 'student(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 7,
    "op": "Join",
    "qpl_line": "#7 = Join [ #5 , #6 ] Predicate [ #5.ID = #6.ID ] Output [ #6.name ]",
    "children": [
      {
        "line_num": 5,
        "op": "Intersect",
        "qpl_line": "#5 = Intersect [ #1 , #4 ] Predicate [ #4.prereq_id = #1.course_id ] Output [ #1.ID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ takes ] Output [ course_id , ID ]",
            "children": []
          },
          {
            "line_num": 4,
            "op": "Join",
            "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #3.prereq_id ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ course ] Predicate [ title = 'International Finance' ] Output [ course_id , title ]",
                "children": []
              },
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ prereq ] Output [ prereq_id , course_id ]",
                "children": []
              }
            ]
          }
        ]
      },
      {
        "line_num": 6,
        "op": "Scan",
        "qpl_line": "#6 = Scan Table [ student ] Output [ name , ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Intersect': 'course(1), student(1)' and 'course(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 7,
    "op": "Join",
    "qpl_line": "#7 = Join [ #5 , #6 ] Predicate [ #5.ID = #6.ID ] Output [ #6.name ]",
    "children": [
      {
        "line_num": 5,
        "op": "Intersect",
        "qpl_line": "#5 = Intersect [ #1 , #4 ] Predicate [ #4.prereq_id = #1.course_id ] Output [ #1.ID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ takes ] Output [ course_id , ID ]",
            "children": []
          },
          {
            "line_num": 4,
            "op": "Join",
            "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #3.prereq_id ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ course ] Predicate [ title = 'International Finance' ] Output [ course_id , title ]",
                "children": []
              },
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ prereq ] Output [ prereq_id , course_id ]",
                "children": []
              }
            ]
          }
        ]
      },
      {
        "line_num": 6,
        "op": "Scan",
        "qpl_line": "#6 = Scan Table [ student ] Output [ name , ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Intersect': 'course(1), student(1)' and 'course(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 4,
    "op": "Intersect",
    "qpl_line": "#4 = Intersect [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #2.course_id ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ course_id ] Output [ course_id ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ section ] Predicate [ year = 2009 AND semester = 'Fall' ] Output [ course_id , semester , year ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ section ] Predicate [ year = 2010 AND semester = 'Spring' ] Output [ course_id , semester , year ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Intersect': 'course(1)' and 'course(1), section(2)' (must have the same number of columns in total: 1 != 3)."
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 4,
    "op": "Intersect",
    "qpl_line": "#4 = Intersect [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #2.course_id ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ course_id ] Output [ course_id ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ section ] Predicate [ year = 2009 AND semester = 'Fall' ] Output [ course_id , semester , year ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ section ] Predicate [ year = 2010 AND semester = 'Spring' ] Output [ course_id , semester , year ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Intersect': 'course(1)' and 'course(1), section(2)' (must have the same number of columns in total: 1 != 3)."
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #2.course_id ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ course_id ] Output [ course_id ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ section ] Predicate [ year = 2009 AND semester = 'Fall' ] Output [ course_id , semester , year ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ section ] Predicate [ year = 2010 AND semester = 'Spring' ] Output [ course_id , semester , year ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'course(1)' and 'course(1), section(2)' (must have the same number of columns in total: 1 != 3)."
  },
  {
    "split": "train",
    "db_id": "college_2",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #2 , #3 ] Predicate [ #2.course_id = #3.course_id ] Output [ #2.course_id ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ course_id ] Output [ course_id ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ section ] Predicate [ year = 2009 AND semester = 'Fall' ] Output [ course_id , semester , year ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ section ] Predicate [ year = 2010 AND semester = 'Spring' ] Output [ course_id , semester , year ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'course(1)' and 'course(1), section(2)' (must have the same number of columns in total: 1 != 3)."
  },
  {
    "split": "train",
    "db_id": "debate",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Affirmative = #1.People_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ people ] Output [ People_ID , Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ debate_people ] Output [ Affirmative ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'people(2)' and 'people(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "wedding",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Male_ID = #1.People_ID ] Output [ #1.Age , #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ people ] Predicate [ Is_Male = 'T' ] Output [ Is_Male , People_ID , Name , Age ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ wedding ] Output [ Male_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'people(4)' and 'people(1)' (must have the same number of columns in total: 4 != 1)."
  },
  {
    "split": "train",
    "db_id": "wedding",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Church_ID ] Output [ countstar AS Count_Star , Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Church_ID = #2.Church_ID ] Output [ #2.Name , #2.Church_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ wedding ] Output [ Church_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ church ] Output [ Church_ID , Name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "theme_gallery",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Artist_ID ] Output [ countstar AS Count_Star , Name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Artist_ID = #2.Artist_ID ] Output [ #2.Name , #1.Artist_ID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ exhibition ] Output [ Artist_ID ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ artist ] Output [ Artist_ID , Name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "theme_gallery",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Artist_ID ] Output [ countstar AS Count_Star , Name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Artist_ID = #2.Artist_ID ] Output [ #2.Name , #1.Artist_ID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ exhibition ] Output [ Artist_ID ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ artist ] Output [ Artist_ID , Name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "theme_gallery",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Artist_ID IS NULL OR #1.Artist_ID = #2.Artist_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ artist ] Output [ Artist_ID , Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ exhibition ] Output [ Artist_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'artist(2)' and 'artist(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "theme_gallery",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Artist_ID IS NULL OR #1.Artist_ID = #2.Artist_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ artist ] Output [ Artist_ID , Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ exhibition ] Output [ Artist_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'artist(2)' and 'artist(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "epinions_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.u_id = #1.u_id ] Output [ #1.name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ useracct ] Output [ name , u_id ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ review ] Output [ u_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'useracct(2)' and 'useracct(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "epinions_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.i_id = #1.i_id ] Output [ #1.title ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ item ] Output [ i_id , title ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ review ] Output [ i_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'item(2)' and 'item(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "riding_club",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Player_ID = #1.Player_ID ] Output [ #1.Player_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ player ] Output [ Player_ID , Player_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ player_coach ] Output [ Player_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'player(2)' and 'player(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "wrestler",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Wrestler_ID IS NULL OR #1.Wrestler_ID = #2.Wrestler_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ wrestler ] Output [ Wrestler_ID , Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Elimination ] Output [ Wrestler_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'wrestler(2)' and 'wrestler(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "wrestler",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Wrestler_ID IS NULL OR #1.Wrestler_ID = #2.Wrestler_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ wrestler ] Output [ Wrestler_ID , Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Elimination ] Output [ Wrestler_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'wrestler(2)' and 'wrestler(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "school_finance",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.School_id IS NULL OR #1.School_id = #2.School_id ] Output [ #1.School_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ School ] Output [ School_name , School_id ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ endowment ] Output [ School_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'School(2)' and 'School(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "school_finance",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.donator_name = #2.donator_name ] Output [ #1.donator_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ endowment ] Distinct [ true ] Output [ donator_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ endowment ] Predicate [ amount < 9.0 ] Output [ amount , donator_name ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'endowment(1)' and 'endowment(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "school_finance",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ School_name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ School_id ] Output [ School_name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.School_id = #2.School_id ] Output [ #1.School_name , #2.School_id ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ School ] Output [ School_name , School_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ endowment ] Predicate [ amount > 8.5 ] Output [ amount , School_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'school_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "protein_institute",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.building_id IS NULL OR #1.building_id = #2.building_id ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ building ] Output [ Name , building_id ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Institution ] Output [ building_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'building(2)' and 'building(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "protein_institute",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Height_feet , Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ building_id ] Output [ Height_feet , countstar AS Count_Star , Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.building_id = #2.building_id ] Output [ #1.Name , #1.Height_feet , #1.building_id ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ building ] Output [ Height_feet , Name , building_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Institution ] Predicate [ Founded > 1880.0 ] Output [ Founded , building_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'height_feet' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "protein_institute",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Institution_id ] Output [ countstar AS Count_Star , Institution ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Institution_id = #2.Institution_id ] Output [ #2.Institution , #2.Institution_id ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ protein ] Output [ Institution_id ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Institution ] Output [ Institution_id , Institution ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'institution' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "cinema",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.Location = #2.Location ] Output [ #1.Location ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ cinema ] Distinct [ true ] Output [ Location ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ cinema ] Predicate [ Capacity > 800 ] Output [ Location , Capacity ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'cinema(1)' and 'cinema(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "cinema",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Cinema_ID ] Output [ SUM(Show_times_per_day) AS Sum_Show_times_per_day , Name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Cinema_ID = #2.Cinema_ID ] Output [ #2.Name , #1.Cinema_ID , #1.Show_times_per_day ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ schedule ] Output [ Cinema_ID , Show_times_per_day ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ cinema ] Output [ Cinema_ID , Name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "cinema",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Film_ID ] Output [ Title , MAX(Price) AS Max_Price ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Film_ID = #2.Film_ID ] Output [ #2.Price , #1.Title , #2.Film_ID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ film ] Output [ Film_ID , Title ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ schedule ] Output [ Film_ID , Price ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'title' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "cinema",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Film_ID ] Output [ Title , MAX(Price) AS Max_Price ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Film_ID = #2.Film_ID ] Output [ #2.Price , #1.Title , #2.Film_ID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ film ] Output [ Film_ID , Title ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ schedule ] Output [ Film_ID , Price ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'title' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "cinema",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Film_ID = #1.Film_ID ] Output [ #1.Title , #1.Directed_by ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ film ] Output [ Film_ID , Directed_by , Title ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ schedule ] Output [ Film_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'film(3)' and 'film(1)' (must have the same number of columns in total: 3 != 1)."
  },
  {
    "split": "train",
    "db_id": "products_for_hire",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 3,
        "op": "Except",
        "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ 1 AS One ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Products_for_Hire ] Output [ product_id ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Products_Booked ] Predicate [ booked_amount > 200.0 ] Output [ product_id , booked_amount ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Products_for_Hire(1)' and 'Products_for_Hire(1), Products_Booked(1)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "phone_market",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Phone_ID = #1.Phone_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ phone ] Output [ Phone_ID , Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ phone_market ] Output [ Phone_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'phone(2)' and 'phone(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "gas_company",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.Headquarters = #2.Headquarters ] Output [ #1.Headquarters ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ company ] Distinct [ true ] Output [ Headquarters ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ company ] Predicate [ Main_Industry = 'Banking' ] Output [ Main_Industry , Headquarters ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'company(1)' and 'company(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "gas_company",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.Headquarters = #2.Headquarters ] Output [ #1.Headquarters ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ company ] Distinct [ true ] Output [ Headquarters ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ company ] Predicate [ Main_Industry = 'Banking' ] Output [ Main_Industry , Headquarters ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'company(1)' and 'company(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "gas_company",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Company_ID ] Output [ countstar AS Count_Star , Company ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Company_ID = #2.Company_ID ] Output [ #1.Company_ID , #2.Company ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ station_company ] Output [ Company_ID ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ company ] Output [ Company_ID , Company ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'company' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "gas_company",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Company_ID ] Output [ countstar AS Count_Star , Company ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Company_ID = #2.Company_ID ] Output [ #1.Company_ID , #2.Company ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ station_company ] Output [ Company_ID ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ company ] Output [ Company_ID , Company ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'company' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "gas_company",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Company_ID = #1.Company_ID ] Output [ #1.Company , #1.Main_Industry ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ company ] Output [ Main_Industry , Company_ID , Company ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ station_company ] Output [ Company_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'company(3)' and 'company(1)' (must have the same number of columns in total: 3 != 1)."
  },
  {
    "split": "train",
    "db_id": "gas_company",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Company_ID = #1.Company_ID ] Output [ #1.Company , #1.Main_Industry ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ company ] Output [ Main_Industry , Company_ID , Company ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ station_company ] Output [ Company_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'company(3)' and 'company(1)' (must have the same number of columns in total: 3 != 1)."
  },
  {
    "split": "train",
    "db_id": "party_people",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Party_ID IS NULL OR #1.Party_ID = #2.Party_ID ] Output [ #1.Party_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ party ] Output [ Party_name , Party_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ member ] Output [ Party_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'party(2)' and 'party(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "party_people",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Party_ID IS NULL OR #1.Party_ID = #2.Party_ID ] Output [ #1.Party_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ party ] Output [ Party_name , Party_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ member ] Output [ Party_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'party(2)' and 'party(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "party_people",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Member_Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Member_in_charge_ID ] Output [ countstar AS Count_Star , Member_Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Member_in_charge_ID = #2.Member_ID ] Output [ #2.Member_ID , #2.Member_Name , #1.Member_in_charge_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ party_events ] Output [ Member_in_charge_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ member ] Output [ Member_Name , Member_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'member_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "party_people",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Member_Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Member_in_charge_ID ] Output [ countstar AS Count_Star , Member_Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Member_in_charge_ID = #2.Member_ID ] Output [ #2.Member_ID , #2.Member_Name , #1.Member_in_charge_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ party_events ] Output [ Member_in_charge_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ member ] Output [ Member_Name , Member_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'member_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "pilot_record",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.Pilot_ID = #1.Pilot_ID ] Output [ #1.Pilot_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ pilot ] Output [ Pilot_ID , Pilot_name ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ Pilot_ID ] Output [ Pilot_ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ pilot_record ] Output [ Pilot_ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'pilot(2)' and 'pilot(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "cre_Doc_Control_Systems",
    "line_num": 5,
    "op": "Except",
    "qpl_line": "#5 = Except [ #1 , #4 ] Predicate [ #1.document_id = #4.document_id ] Output [ #1.document_id ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Documents ] Predicate [ document_status_code = 'done' AND document_type_code = 'Paper' ] Output [ document_status_code , document_id , document_type_code ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.shipping_agent_code = #3.shipping_agent_code ] Output [ #3.document_id ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Ref_Shipping_Agents ] Predicate [ shipping_agent_name = 'USPS' ] Output [ shipping_agent_code , shipping_agent_name ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ Documents ] Output [ shipping_agent_code , document_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Except': 'Ref_Document_Status(1), Documents(1), Ref_Document_Types(1)' and 'Documents(1)' (must have the same number of columns in total: 3 != 1)."
  },
  {
    "split": "train",
    "db_id": "cre_Doc_Control_Systems",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , employee_name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ employee_name , document_id , draft_number , copy_number ] Output [ countstar AS Count_Star , employee_name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.employee_id = #2.employee_id ] Output [ #1.draft_number , #1.copy_number , #1.document_id , #2.employee_name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Circulation_History ] Output [ draft_number , employee_id , copy_number , document_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Employees ] Output [ employee_id , employee_name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: GroupBy column 'document_id' not found in aggregate output: ['count_star', 'employee_name']."
  },
  {
    "split": "train",
    "db_id": "local_govt_in_alabama",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Service_Type_Code , Count_Star , Service_ID ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ Service_ID ] Output [ countstar AS Count_Star , Service_Type_Code , Service_ID ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.Service_ID = #4.Service_ID ] Output [ #1.Service_Type_Code , #4.Service_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Services ] Output [ Service_Type_Code , Service_ID ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.Event_ID = #3.Event_ID ] Output [ #2.Service_ID ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Events ] Output [ Event_ID , Service_ID ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ Participants_in_Events ] Output [ Event_ID ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #6: Column 'service_type_code' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "formula_1",
    "line_num": 11,
    "op": "Filter",
    "qpl_line": "#11 = Filter [ #10 ] Predicate [ Count_Star > 5 ] Output [ driverId , surname ]",
    "children": [
      {
        "line_num": 10,
        "op": "Aggregate",
        "qpl_line": "#10 = Aggregate [ #9 ] GroupBy [ driverId ] Output [ driverId , countstar AS Count_Star , surname ]",
        "children": [
          {
            "line_num": 9,
            "op": "Join",
            "qpl_line": "#9 = Join [ #7 , #8 ] Predicate [ #7.driverId = #8.driverId ] Output [ #7.driverId , #7.surname ]",
            "children": [
              {
                "line_num": 7,
                "op": "Join",
                "qpl_line": "#7 = Join [ #5 , #6 ] Predicate [ #5.surname = #6.surname ] Output [ #5.surname , #5.driverId ]",
                "children": [
                  {
                    "line_num": 5,
                    "op": "Filter",
                    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star = 11 ] Output [ driverId , surname ]",
                    "children": [
                      {
                        "line_num": 4,
                        "op": "Join",
                        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.driverId = #3.driverId ] Output [ #3.surname , #3.driverId , #2.Count_Star ]",
                        "children": [
                          {
                            "line_num": 2,
                            "op": "Aggregate",
                            "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ driverId ] Output [ driverId , countstar AS Count_Star ]",
                            "children": [
                              {
                                "line_num": 1,
                                "op": "Scan",
                                "qpl_line": "#1 = Scan Table [ pitStops ] Output [ driverId ]",
                                "children": []
                              }
                            ]
                          },
                          {
                            "line_num": 3,
                            "op": "Scan",
                            "qpl_line": "#3 = Scan Table [ drivers ] Output [ driverId , surname ]",
                            "children": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "line_num": 6,
                    "op": "Scan",
                    "qpl_line": "#6 = Scan Table [ drivers ] Output [ driverId , surname ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 8,
                "op": "Scan",
                "qpl_line": "#8 = Scan Table [ results ] Output [ driverId ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #10: Column 'surname' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "formula_1",
    "line_num": 11,
    "op": "Filter",
    "qpl_line": "#11 = Filter [ #10 ] Predicate [ Count_Star > 5 ] Output [ driverId , surname ]",
    "children": [
      {
        "line_num": 10,
        "op": "Aggregate",
        "qpl_line": "#10 = Aggregate [ #9 ] GroupBy [ driverId ] Output [ driverId , countstar AS Count_Star , surname ]",
        "children": [
          {
            "line_num": 9,
            "op": "Join",
            "qpl_line": "#9 = Join [ #7 , #8 ] Predicate [ #7.driverId = #8.driverId ] Output [ #7.driverId , #7.surname ]",
            "children": [
              {
                "line_num": 7,
                "op": "Join",
                "qpl_line": "#7 = Join [ #5 , #6 ] Predicate [ #5.surname = #6.surname ] Output [ #5.surname , #5.driverId ]",
                "children": [
                  {
                    "line_num": 5,
                    "op": "Filter",
                    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star = 11 ] Output [ driverId , surname ]",
                    "children": [
                      {
                        "line_num": 4,
                        "op": "Join",
                        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.driverId = #3.driverId ] Output [ #3.surname , #3.driverId , #2.Count_Star ]",
                        "children": [
                          {
                            "line_num": 2,
                            "op": "Aggregate",
                            "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ driverId ] Output [ driverId , countstar AS Count_Star ]",
                            "children": [
                              {
                                "line_num": 1,
                                "op": "Scan",
                                "qpl_line": "#1 = Scan Table [ pitStops ] Output [ driverId ]",
                                "children": []
                              }
                            ]
                          },
                          {
                            "line_num": 3,
                            "op": "Scan",
                            "qpl_line": "#3 = Scan Table [ drivers ] Output [ driverId , surname ]",
                            "children": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "line_num": 6,
                    "op": "Scan",
                    "qpl_line": "#6 = Scan Table [ drivers ] Output [ driverId , surname ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 8,
                "op": "Scan",
                "qpl_line": "#8 = Scan Table [ results ] Output [ driverId ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #10: Column 'surname' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "machine_repair",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.technician_id = #1.technician_id ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ technician ] Output [ technician_id , Name ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ technician_id ] Output [ technician_id ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ repair_assignment ] Output [ technician_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'technician(2)' and 'technician(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "machine_repair",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.technician_id = #1.technician_id ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ technician ] Output [ technician_id , Name ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ technician_id ] Output [ technician_id ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ repair_assignment ] Output [ technician_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'technician(2)' and 'technician(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "entrepreneur",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.People_ID IS NULL OR #1.People_ID = #2.People_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ people ] Output [ People_ID , Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ entrepreneur ] Output [ People_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'people(2)' and 'people(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "entrepreneur",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.People_ID IS NULL OR #1.People_ID = #2.People_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ people ] Output [ People_ID , Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ entrepreneur ] Output [ People_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'people(2)' and 'people(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "perpetrator",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.People_ID IS NULL OR #1.People_ID = #2.People_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ people ] Output [ People_ID , Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ perpetrator ] Output [ People_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'people(2)' and 'people(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "candidate_poll",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.People_ID IS NULL OR #1.People_ID = #2.People_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ people ] Output [ People_ID , Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ candidate ] Output [ People_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'people(2)' and 'people(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "candidate_poll",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.People_ID IS NULL OR #1.People_ID = #2.People_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ people ] Output [ People_ID , Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ candidate ] Output [ People_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'people(2)' and 'people(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "movie_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.mID IS NULL OR #1.mID = #2.mID ] Output [ #1.title ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Movie ] Output [ mID , title ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Rating ] Output [ mID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Movie(2)' and 'Movie(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "movie_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.mID IS NULL OR #1.mID = #2.mID ] Output [ #1.title ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Movie ] Output [ mID , title ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Rating ] Output [ mID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Movie(2)' and 'Movie(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "movie_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.rID = #2.rID ] Output [ #1.rID ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Rating ] Distinct [ true ] Output [ rID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Rating ] Predicate [ stars = 4 ] Output [ rID , stars ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Reviewer(1)' and 'Reviewer(1), Rating(1)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "movie_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.rID = #2.rID ] Output [ #1.rID ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Rating ] Distinct [ true ] Output [ rID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Rating ] Predicate [ stars = 4 ] Output [ rID , stars ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Reviewer(1)' and 'Reviewer(1), Rating(1)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "county_public_safety",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.County_ID IS NULL OR #1.County_ID = #2.County_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ county_public_safety ] Output [ Name , County_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ city ] Output [ County_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'county_public_safety(2)' and 'county_public_safety(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "county_public_safety",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.County_ID IS NULL OR #1.County_ID = #2.County_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ county_public_safety ] Output [ Name , County_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ city ] Output [ County_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'county_public_safety(2)' and 'county_public_safety(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "local_govt_mdm",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 1 ] Output [ cmi_cross_ref_id , source_system_code ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ cmi_cross_ref_id ] Output [ cmi_cross_ref_id , countstar AS Count_Star , source_system_code ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.cmi_cross_ref_id = #2.cmi_cross_ref_id ] Output [ #2.source_system_code , #2.cmi_cross_ref_id ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Council_Tax ] Output [ cmi_cross_ref_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ CMI_Cross_References ] Output [ cmi_cross_ref_id , source_system_code ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'source_system_code' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "party_host",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Host_ID = #1.Host_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ host ] Output [ Name , Host_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ party_host ] Output [ Host_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'host(2)' and 'host(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "party_host",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Host_ID = #1.Host_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ host ] Output [ Name , Host_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ party_host ] Output [ Host_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'host(2)' and 'host(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "storm_record",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.Region_id = #1.Region_id ] Output [ #1.Region_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ region ] Output [ Region_id , Region_name ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ Region_id ] Output [ Region_id ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ affected_region ] Output [ Region_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'region(2)' and 'region(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "storm_record",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.Region_id = #1.Region_id ] Output [ #1.Region_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ region ] Output [ Region_id , Region_name ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ Region_id ] Output [ Region_id ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ affected_region ] Output [ Region_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'region(2)' and 'region(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "storm_record",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Storm_ID = #1.Storm_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ storm ] Output [ Storm_ID , Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ affected_region ] Output [ Storm_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'storm(2)' and 'storm(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "storm_record",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Storm_ID = #1.Storm_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ storm ] Output [ Storm_ID , Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ affected_region ] Output [ Storm_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'storm(2)' and 'storm(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "election",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Party IS NULL OR #1.Party_ID = #2.Party ] Output [ #1.Party ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ party ] Output [ Party , Party_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ election ] Output [ Party ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'party(2)' and 'party(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "election",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Party IS NULL OR #1.Party_ID = #2.Party ] Output [ #1.Party ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ party ] Output [ Party , Party_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ election ] Output [ Party ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'party(2)' and 'party(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "news_report",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.journalist_ID = #1.journalist_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ journalist ] Output [ journalist_ID , Name ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ journalist_ID ] Output [ journalist_ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ news_report ] Output [ journalist_ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'journalist(2)' and 'journalist(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "restaurant_1",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ LName , Count_Star , Fname ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ StuID ] Output [ countstar AS Count_Star , LName , Fname ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #2.LName , #2.Fname , #2.StuID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Visits_Restaurant ] Output [ StuID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Student ] Output [ LName , Fname , StuID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'lname' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "customer_deliveries",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.employee_address_id = #1.address_id ] Output [ #1.state_province_county ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Addresses ] Output [ address_id , state_province_county ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Employees ] Output [ employee_address_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Addresses(2)' and 'Addresses(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "icfp_1",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , lname ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ fname , lname ] Output [ countstar AS Count_Star , lname ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.authID = #2.authID ] Output [ #1.lname , #1.fname ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Authors ] Output [ fname , authID , lname ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Authorship ] Output [ authID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: GroupBy column 'fname' not found in aggregate output: ['count_star', 'lname']."
  },
  {
    "split": "train",
    "db_id": "icfp_1",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , lname ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ fname , lname ] Output [ countstar AS Count_Star , lname ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.authID = #2.authID ] Output [ #1.lname , #1.fname ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Authors ] Output [ fname , authID , lname ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Authorship ] Output [ authID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: GroupBy column 'fname' not found in aggregate output: ['count_star', 'lname']."
  },
  {
    "split": "train",
    "db_id": "sakila_1",
    "line_num": 5,
    "op": "Union",
    "qpl_line": "#5 = Union [ #1 , #4 ] Output [ #1.payment_date ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ payment ] Predicate [ amount > 10.0 ] Output [ amount , payment_date ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.staff_id = #3.staff_id ] Output [ #3.payment_date ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ staff ] Predicate [ first_name = 'Elsa' ] Output [ first_name , staff_id ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ payment ] Output [ payment_date , staff_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Union': 'payment(2)' and 'payment(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "sakila_1",
    "line_num": 5,
    "op": "Union",
    "qpl_line": "#5 = Union [ #1 , #4 ] Output [ #1.payment_date ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ payment ] Predicate [ amount > 10.0 ] Output [ amount , payment_date ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.staff_id = #3.staff_id ] Output [ #3.payment_date ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ staff ] Predicate [ first_name = 'Elsa' ] Output [ first_name , staff_id ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ payment ] Output [ payment_date , staff_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Union': 'payment(2)' and 'payment(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "loan_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.cust_name = #2.cust_name ] Output [ #1.cust_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ customer ] Distinct [ true ] Output [ cust_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ customer ] Predicate [ acc_type = 'saving' ] Output [ cust_name , acc_type ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'customer(1)' and 'customer(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "loan_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.cust_name = #2.cust_name ] Output [ #1.cust_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ customer ] Distinct [ true ] Output [ cust_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ customer ] Predicate [ acc_type = 'saving' ] Output [ cust_name , acc_type ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'customer(1)' and 'customer(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "loan_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] Output [ AVG(credit_score) AS Avg_credit_score ]",
    "children": [
      {
        "line_num": 3,
        "op": "Intersect",
        "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #2.cust_ID = #1.cust_ID ] Output [ #1.credit_score ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ customer ] Output [ cust_ID , credit_score ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ loan ] Output [ cust_ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'customer(2)' and 'customer(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "loan_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] Output [ AVG(credit_score) AS Avg_credit_score ]",
    "children": [
      {
        "line_num": 3,
        "op": "Intersect",
        "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #2.cust_ID = #1.cust_ID ] Output [ #1.credit_score ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ customer ] Output [ cust_ID , credit_score ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ loan ] Output [ cust_ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'customer(2)' and 'customer(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "loan_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] Output [ AVG(credit_score) AS Avg_credit_score ]",
    "children": [
      {
        "line_num": 3,
        "op": "Except",
        "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.cust_ID IS NULL OR #1.cust_ID = #2.cust_ID ] Output [ #1.credit_score ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ customer ] Output [ cust_ID , credit_score ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ loan ] Output [ cust_ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'customer(2)' and 'customer(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "loan_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] Output [ AVG(credit_score) AS Avg_credit_score ]",
    "children": [
      {
        "line_num": 3,
        "op": "Except",
        "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.cust_ID IS NULL OR #1.cust_ID = #2.cust_ID ] Output [ #1.credit_score ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ customer ] Output [ cust_ID , credit_score ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ loan ] Output [ cust_ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'customer(2)' and 'customer(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "assets_maintenance",
    "line_num": 11,
    "op": "Union",
    "qpl_line": "#11 = Union [ #5 , #10 ] Output [ #5.company_id , #5.company_name ]",
    "children": [
      {
        "line_num": 5,
        "op": "Filter",
        "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ company_id , company_name ]",
        "children": [
          {
            "line_num": 4,
            "op": "Aggregate",
            "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ company_id ] Output [ company_id , countstar AS Count_Star , company_name ]",
            "children": [
              {
                "line_num": 3,
                "op": "Join",
                "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.company_id = #2.company_id ] Output [ #2.company_name , #2.company_id ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ Maintenance_Engineers ] Output [ company_id ]",
                    "children": []
                  },
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Third_Party_Companies ] Output [ company_id , company_name ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "line_num": 10,
        "op": "Filter",
        "qpl_line": "#10 = Filter [ #9 ] Predicate [ Count_Star >= 2 ] Output [ company_id , company_name ]",
        "children": [
          {
            "line_num": 9,
            "op": "Aggregate",
            "qpl_line": "#9 = Aggregate [ #8 ] GroupBy [ company_id ] Output [ company_id , countstar AS Count_Star , company_name ]",
            "children": [
              {
                "line_num": 8,
                "op": "Join",
                "qpl_line": "#8 = Join [ #6 , #7 ] Predicate [ #6.maintenance_contract_company_id = #7.company_id ] Output [ #7.company_name , #7.company_id ]",
                "children": [
                  {
                    "line_num": 6,
                    "op": "Scan",
                    "qpl_line": "#6 = Scan Table [ Maintenance_Contracts ] Output [ maintenance_contract_company_id ]",
                    "children": []
                  },
                  {
                    "line_num": 7,
                    "op": "Scan",
                    "qpl_line": "#7 = Scan Table [ Third_Party_Companies ] Output [ company_id , company_name ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'company_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "assets_maintenance",
    "line_num": 7,
    "op": "Except",
    "qpl_line": "#7 = Except [ #3 , #6 ] Predicate [ #3.staff_name = #6.staff_name ] Output [ #3.staff_name , #3.staff_id ]",
    "children": [
      {
        "line_num": 3,
        "op": "Intersect",
        "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #2.recorded_by_staff_id = #1.staff_id ] Output [ #1.staff_name , #1.staff_id ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Staff ] Output [ staff_name , staff_id ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Fault_Log ] Output [ recorded_by_staff_id ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 6,
        "op": "Intersect",
        "qpl_line": "#6 = Intersect [ #4 , #5 ] Predicate [ #5.contact_staff_id = #4.staff_id ] Output [ #4.staff_id , #4.staff_name ]",
        "children": [
          {
            "line_num": 4,
            "op": "Scan",
            "qpl_line": "#4 = Scan Table [ Staff ] Output [ staff_name , staff_id ]",
            "children": []
          },
          {
            "line_num": 5,
            "op": "Scan",
            "qpl_line": "#5 = Scan Table [ Engineer_Visits ] Output [ contact_staff_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'Staff(2)' and 'Staff(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "assets_maintenance",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.engineer_id = #1.engineer_id ] Output [ #1.last_name , #1.first_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Maintenance_Engineers ] Output [ last_name , engineer_id , first_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Engineer_Visits ] Output [ engineer_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Maintenance_Engineers(3)' and 'Maintenance_Engineers(1)' (must have the same number of columns in total: 3 != 1)."
  },
  {
    "split": "train",
    "db_id": "assets_maintenance",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ part_id , Count_Star , part_name ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ part_id ] Output [ countstar AS Count_Star , part_id , part_name ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.part_fault_id = #4.part_fault_id ] Output [ #4.part_id , #4.part_name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Skills_Required_To_Fix ] Output [ part_fault_id ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.part_id = #3.part_id ] Output [ #3.part_fault_id , #2.part_id , #2.part_name ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Parts ] Output [ part_id , part_name ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ Part_Faults ] Output [ part_id , part_fault_id ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #6: Column 'part_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "assets_maintenance",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.asset_id = #1.asset_id ] Output [ #1.asset_model ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Assets ] Output [ asset_model , asset_id ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Fault_Log ] Output [ asset_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Assets(2)' and 'Assets(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "college_1",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Sum_CRS_CREDIT DESC ] Output [ Sum_CRS_CREDIT , DEPT_NAME ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ DEPT_CODE ] Output [ SUM(CRS_CREDIT) AS Sum_CRS_CREDIT , DEPT_NAME ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.CRS_CODE = #4.CRS_CODE ] Output [ #3.DEPT_NAME , #3.DEPT_CODE , #3.CRS_CREDIT ]",
            "children": [
              {
                "line_num": 3,
                "op": "Join",
                "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.DEPT_CODE = #2.DEPT_CODE ] Output [ #2.DEPT_NAME , #1.CRS_CODE , #1.DEPT_CODE , #1.CRS_CREDIT ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ COURSE ] Output [ CRS_CREDIT , DEPT_CODE , CRS_CODE ]",
                    "children": []
                  },
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ DEPARTMENT ] Output [ DEPT_NAME , DEPT_CODE ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 4,
                "op": "Scan",
                "qpl_line": "#4 = Scan Table [ CLASS ] Output [ CRS_CODE ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #6: Column 'dept_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "college_1",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Sum_CRS_CREDIT DESC ] Output [ Sum_CRS_CREDIT , DEPT_NAME ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ DEPT_CODE ] Output [ SUM(CRS_CREDIT) AS Sum_CRS_CREDIT , DEPT_NAME ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.CRS_CODE = #4.CRS_CODE ] Output [ #3.DEPT_NAME , #3.DEPT_CODE , #3.CRS_CREDIT ]",
            "children": [
              {
                "line_num": 3,
                "op": "Join",
                "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.DEPT_CODE = #2.DEPT_CODE ] Output [ #2.DEPT_NAME , #1.CRS_CODE , #1.DEPT_CODE , #1.CRS_CREDIT ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ COURSE ] Output [ CRS_CREDIT , DEPT_CODE , CRS_CODE ]",
                    "children": []
                  },
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ DEPARTMENT ] Output [ DEPT_NAME , DEPT_CODE ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 4,
                "op": "Scan",
                "qpl_line": "#4 = Scan Table [ CLASS ] Output [ CRS_CODE ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #6: Column 'dept_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "college_1",
    "line_num": 9,
    "op": "TopSort",
    "qpl_line": "#9 = TopSort [ #8 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , DEPT_NAME ]",
    "children": [
      {
        "line_num": 8,
        "op": "Aggregate",
        "qpl_line": "#8 = Aggregate [ #7 ] GroupBy [ DEPT_CODE ] Output [ countstar AS Count_Star , DEPT_NAME ]",
        "children": [
          {
            "line_num": 7,
            "op": "Join",
            "qpl_line": "#7 = Join [ #5 , #6 ] Predicate [ #5.DEPT_CODE = #6.DEPT_CODE ] Output [ #5.DEPT_CODE , #6.DEPT_NAME ]",
            "children": [
              {
                "line_num": 5,
                "op": "Join",
                "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.CRS_CODE = #4.CRS_CODE ] Output [ #1.DEPT_CODE ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ COURSE ] Output [ DEPT_CODE , CRS_CODE ]",
                    "children": []
                  },
                  {
                    "line_num": 4,
                    "op": "Join",
                    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.CLASS_CODE = #3.CLASS_CODE ] Output [ #3.CRS_CODE ]",
                    "children": [
                      {
                        "line_num": 2,
                        "op": "Scan",
                        "qpl_line": "#2 = Scan Table [ ENROLL ] Output [ CLASS_CODE ]",
                        "children": []
                      },
                      {
                        "line_num": 3,
                        "op": "Scan",
                        "qpl_line": "#3 = Scan Table [ CLASS ] Output [ CLASS_CODE , CRS_CODE ]",
                        "children": []
                      }
                    ]
                  }
                ]
              },
              {
                "line_num": 6,
                "op": "Scan",
                "qpl_line": "#6 = Scan Table [ DEPARTMENT ] Output [ DEPT_NAME , DEPT_CODE ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #8: Column 'dept_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "college_1",
    "line_num": 9,
    "op": "TopSort",
    "qpl_line": "#9 = TopSort [ #8 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , DEPT_NAME ]",
    "children": [
      {
        "line_num": 8,
        "op": "Aggregate",
        "qpl_line": "#8 = Aggregate [ #7 ] GroupBy [ DEPT_CODE ] Output [ countstar AS Count_Star , DEPT_NAME ]",
        "children": [
          {
            "line_num": 7,
            "op": "Join",
            "qpl_line": "#7 = Join [ #5 , #6 ] Predicate [ #5.DEPT_CODE = #6.DEPT_CODE ] Output [ #5.DEPT_CODE , #6.DEPT_NAME ]",
            "children": [
              {
                "line_num": 5,
                "op": "Join",
                "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.CRS_CODE = #4.CRS_CODE ] Output [ #1.DEPT_CODE ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ COURSE ] Output [ DEPT_CODE , CRS_CODE ]",
                    "children": []
                  },
                  {
                    "line_num": 4,
                    "op": "Join",
                    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.CLASS_CODE = #3.CLASS_CODE ] Output [ #3.CRS_CODE ]",
                    "children": [
                      {
                        "line_num": 2,
                        "op": "Scan",
                        "qpl_line": "#2 = Scan Table [ ENROLL ] Output [ CLASS_CODE ]",
                        "children": []
                      },
                      {
                        "line_num": 3,
                        "op": "Scan",
                        "qpl_line": "#3 = Scan Table [ CLASS ] Output [ CLASS_CODE , CRS_CODE ]",
                        "children": []
                      }
                    ]
                  }
                ]
              },
              {
                "line_num": 6,
                "op": "Scan",
                "qpl_line": "#6 = Scan Table [ DEPARTMENT ] Output [ DEPT_NAME , DEPT_CODE ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #8: Column 'dept_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "college_1",
    "line_num": 5,
    "op": "Except",
    "qpl_line": "#5 = Except [ #1 , #4 ] Predicate [ #1.EMP_FNAME = #4.EMP_FNAME ] Output [ #1.EMP_FNAME ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ EMPLOYEE ] Predicate [ EMP_JOBCODE = 'PROF' ] Distinct [ true ] Output [ EMP_JOBCODE , EMP_FNAME ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.PROF_NUM = #3.EMP_NUM ] Output [ #3.EMP_FNAME ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ CLASS ] Output [ PROF_NUM ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ EMPLOYEE ] Output [ EMP_FNAME , EMP_NUM ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Except': 'EMPLOYEE(2)' and 'EMPLOYEE(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "college_1",
    "line_num": 5,
    "op": "Except",
    "qpl_line": "#5 = Except [ #1 , #4 ] Predicate [ #1.EMP_FNAME = #4.EMP_FNAME ] Output [ #1.EMP_FNAME ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ EMPLOYEE ] Predicate [ EMP_JOBCODE = 'PROF' ] Distinct [ true ] Output [ EMP_JOBCODE , EMP_FNAME ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.PROF_NUM = #3.EMP_NUM ] Output [ #3.EMP_FNAME ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ CLASS ] Output [ PROF_NUM ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ EMPLOYEE ] Output [ EMP_FNAME , EMP_NUM ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Except': 'EMPLOYEE(2)' and 'EMPLOYEE(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "sports_competition",
    "line_num": 3,
    "op": "Filter",
    "qpl_line": "#3 = Filter [ #2 ] Predicate [ Avg_Points >= 20.0 ] Output [ Position ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ name , Position ] Output [ Position , AVG(Points) AS Avg_Points ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ player ] Output [ name , Position , Points ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #2: GroupBy column 'name' not found in aggregate output: ['position', 'avg_points']."
  },
  {
    "split": "train",
    "db_id": "sports_competition",
    "line_num": 3,
    "op": "Filter",
    "qpl_line": "#3 = Filter [ #2 ] Predicate [ Avg_Points >= 20.0 ] Output [ Position ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ name , Position ] Output [ Position , AVG(Points) AS Avg_Points ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ player ] Output [ name , Position , Points ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #2: GroupBy column 'name' not found in aggregate output: ['position', 'avg_points']."
  },
  {
    "split": "train",
    "db_id": "sports_competition",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Club_ID IS NULL OR #1.Club_ID = #2.Club_ID ] Output [ #1.name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ club ] Output [ name , Club_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ player ] Output [ Club_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'club(2)' and 'club(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "sports_competition",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Club_ID IS NULL OR #1.Club_ID = #2.Club_ID ] Output [ #1.name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ club ] Output [ name , Club_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ player ] Output [ Club_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'club(2)' and 'club(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "sports_competition",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.Country = #2.Country ] Output [ #1.Country ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ competition ] Distinct [ true ] Output [ Country ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ competition ] Predicate [ Competition_type = 'Friendly' ] Output [ Country , Competition_type ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'competition(1)' and 'competition(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "sports_competition",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.Country = #2.Country ] Output [ #1.Country ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ competition ] Distinct [ true ] Output [ Country ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ competition ] Predicate [ Competition_type = 'Friendly' ] Output [ Country , Competition_type ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'competition(1)' and 'competition(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "manufacturer",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Manufacturer_ID ] Output [ countstar AS Count_Star , Name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Manufacturer_ID = #2.Manufacturer_ID ] Output [ #2.Manufacturer_ID , #2.Name ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ furniture_manufacte ] Output [ Manufacturer_ID ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ manufacturer ] Output [ Manufacturer_ID , Name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "manufacturer",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Furniture_ID = #1.Furniture_ID ] Output [ #1.Market_Rate , #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ furniture ] Output [ Name , Market_Rate , Furniture_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ furniture_manufacte ] Output [ Furniture_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'furniture(3)' and 'furniture(1)' (must have the same number of columns in total: 3 != 1)."
  },
  {
    "split": "train",
    "db_id": "hr_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ DEPARTMENT_ID ] Output [ DEPARTMENT_ID ]",
    "children": [
      {
        "line_num": 3,
        "op": "Filter",
        "qpl_line": "#3 = Filter [ #2 ] Predicate [ Count_Star >= 4 ] Output [ DEPARTMENT_ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ DEPARTMENT_ID , MANAGER_ID ] Output [ countstar AS Count_Star , DEPARTMENT_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ employees ] Output [ DEPARTMENT_ID , MANAGER_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #2: GroupBy column 'manager_id' not found in aggregate output: ['count_star', 'department_id']."
  },
  {
    "split": "train",
    "db_id": "hr_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ DEPARTMENT_ID ] Output [ DEPARTMENT_ID ]",
    "children": [
      {
        "line_num": 3,
        "op": "Filter",
        "qpl_line": "#3 = Filter [ #2 ] Predicate [ Count_Star >= 4 ] Output [ DEPARTMENT_ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ DEPARTMENT_ID , MANAGER_ID ] Output [ countstar AS Count_Star , DEPARTMENT_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ employees ] Output [ DEPARTMENT_ID , MANAGER_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #2: GroupBy column 'manager_id' not found in aggregate output: ['count_star', 'department_id']."
  },
  {
    "split": "train",
    "db_id": "hr_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ DEPARTMENT_ID ] Output [ DEPARTMENT_ID ]",
    "children": [
      {
        "line_num": 3,
        "op": "Filter",
        "qpl_line": "#3 = Filter [ #2 ] Predicate [ Count_Star >= 4 ] Output [ DEPARTMENT_ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ DEPARTMENT_ID , MANAGER_ID ] Output [ countstar AS Count_Star , DEPARTMENT_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ employees ] Output [ DEPARTMENT_ID , MANAGER_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #2: GroupBy column 'manager_id' not found in aggregate output: ['count_star', 'department_id']."
  },
  {
    "split": "train",
    "db_id": "hr_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ DEPARTMENT_ID ] Output [ DEPARTMENT_ID ]",
    "children": [
      {
        "line_num": 3,
        "op": "Filter",
        "qpl_line": "#3 = Filter [ #2 ] Predicate [ Count_Star >= 4 ] Output [ DEPARTMENT_ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ DEPARTMENT_ID , MANAGER_ID ] Output [ countstar AS Count_Star , DEPARTMENT_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ employees ] Output [ DEPARTMENT_ID , MANAGER_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #2: GroupBy column 'manager_id' not found in aggregate output: ['count_star', 'department_id']."
  },
  {
    "split": "train",
    "db_id": "hr_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.DEPARTMENT_ID IS NULL OR #1.DEPARTMENT_ID = #2.DEPARTMENT_ID ] Output [ #1.EMPLOYEE_ID , #1.DEPARTMENT_ID , #1.HIRE_DATE , #1.MANAGER_ID , #1.SALARY , #1.LAST_NAME , #1.PHONE_NUMBER , #1.FIRST_NAME , #1.COMMISSION_PCT , #1.EMAIL , #1.JOB_ID ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ employees ] Output [ PHONE_NUMBER , MANAGER_ID , COMMISSION_PCT , FIRST_NAME , EMAIL , JOB_ID , DEPARTMENT_ID , HIRE_DATE , EMPLOYEE_ID , SALARY , LAST_NAME ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ departments ] Predicate [ MANAGER_ID >= 100.0 AND MANAGER_ID <= 200.0 ] Output [ DEPARTMENT_ID , MANAGER_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'employees(9), jobs(1), departments(1)' and 'departments(2)' (must have the same number of columns in total: 11 != 2)."
  },
  {
    "split": "train",
    "db_id": "hr_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.DEPARTMENT_ID IS NULL OR #1.DEPARTMENT_ID = #2.DEPARTMENT_ID ] Output [ #1.EMPLOYEE_ID , #1.DEPARTMENT_ID , #1.HIRE_DATE , #1.MANAGER_ID , #1.SALARY , #1.LAST_NAME , #1.PHONE_NUMBER , #1.FIRST_NAME , #1.COMMISSION_PCT , #1.EMAIL , #1.JOB_ID ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ employees ] Output [ PHONE_NUMBER , MANAGER_ID , COMMISSION_PCT , FIRST_NAME , EMAIL , JOB_ID , DEPARTMENT_ID , HIRE_DATE , EMPLOYEE_ID , SALARY , LAST_NAME ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ departments ] Predicate [ MANAGER_ID >= 100.0 AND MANAGER_ID <= 200.0 ] Output [ DEPARTMENT_ID , MANAGER_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'employees(9), jobs(1), departments(1)' and 'departments(2)' (must have the same number of columns in total: 11 != 2)."
  },
  {
    "split": "train",
    "db_id": "hr_1",
    "line_num": 3,
    "op": "Intersect",
    "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #1.DEPARTMENT_ID = #2.DEPARTMENT_ID ] Output [ #1.EMPLOYEE_ID , #1.LAST_NAME , #1.FIRST_NAME ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ employees ] Output [ EMPLOYEE_ID , FIRST_NAME , DEPARTMENT_ID , LAST_NAME ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ employees ] Predicate [ FIRST_NAME like '%T%' ] Output [ FIRST_NAME , DEPARTMENT_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'employees(3), departments(1)' and 'employees(1), departments(1)' (must have the same number of columns in total: 4 != 2)."
  },
  {
    "split": "train",
    "db_id": "hr_1",
    "line_num": 3,
    "op": "Intersect",
    "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #1.DEPARTMENT_ID = #2.DEPARTMENT_ID ] Output [ #1.EMPLOYEE_ID , #1.LAST_NAME , #1.FIRST_NAME ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ employees ] Output [ EMPLOYEE_ID , FIRST_NAME , DEPARTMENT_ID , LAST_NAME ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ employees ] Predicate [ FIRST_NAME like '%T%' ] Output [ FIRST_NAME , DEPARTMENT_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'employees(3), departments(1)' and 'employees(1), departments(1)' (must have the same number of columns in total: 4 != 2)."
  },
  {
    "split": "train",
    "db_id": "hr_1",
    "line_num": 6,
    "op": "Intersect",
    "qpl_line": "#6 = Intersect [ #4 , #5 ] Predicate [ #4.DEPARTMENT_ID = #5.DEPARTMENT_ID ] Output [ #4.EMPLOYEE_ID , #4.LAST_NAME , #4.SALARY , #4.FIRST_NAME ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.SALARY > #2.Avg_SALARY ] Output [ #3.SALARY , #3.FIRST_NAME , #3.EMPLOYEE_ID , #3.LAST_NAME , #3.DEPARTMENT_ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(SALARY) AS Avg_SALARY ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ employees ] Output [ SALARY ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ employees ] Output [ FIRST_NAME , DEPARTMENT_ID , EMPLOYEE_ID , SALARY , LAST_NAME ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 5,
        "op": "Scan",
        "qpl_line": "#5 = Scan Table [ employees ] Predicate [ FIRST_NAME like '%J%' ] Output [ FIRST_NAME , DEPARTMENT_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #6: Incompatible types for operator 'Intersect': 'employees(4), departments(1)' and 'employees(1), departments(1)' (must have the same number of columns in total: 5 != 2)."
  },
  {
    "split": "train",
    "db_id": "hr_1",
    "line_num": 6,
    "op": "Intersect",
    "qpl_line": "#6 = Intersect [ #4 , #5 ] Predicate [ #4.DEPARTMENT_ID = #5.DEPARTMENT_ID ] Output [ #4.EMPLOYEE_ID , #4.LAST_NAME , #4.SALARY , #4.FIRST_NAME ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.SALARY > #2.Avg_SALARY ] Output [ #3.SALARY , #3.FIRST_NAME , #3.EMPLOYEE_ID , #3.LAST_NAME , #3.DEPARTMENT_ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(SALARY) AS Avg_SALARY ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ employees ] Output [ SALARY ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ employees ] Output [ FIRST_NAME , DEPARTMENT_ID , EMPLOYEE_ID , SALARY , LAST_NAME ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 5,
        "op": "Scan",
        "qpl_line": "#5 = Scan Table [ employees ] Predicate [ FIRST_NAME like '%J%' ] Output [ FIRST_NAME , DEPARTMENT_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #6: Incompatible types for operator 'Intersect': 'employees(4), departments(1)' and 'employees(1), departments(1)' (must have the same number of columns in total: 5 != 2)."
  },
  {
    "split": "train",
    "db_id": "music_1",
    "line_num": 5,
    "op": "Union",
    "qpl_line": "#5 = Union [ #3 , #4 ] Output [ #3.song_name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.f_id = #2.f_id ] Output [ #2.song_name ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ files ] Predicate [ duration like '4:%' ] Output [ f_id , duration ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ song ] Output [ song_name , f_id ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 4,
        "op": "Scan",
        "qpl_line": "#4 = Scan Table [ song ] Predicate [ languages = ' english' ] Output [ song_name , languages ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Union': 'song(1)' and 'song(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "music_1",
    "line_num": 5,
    "op": "Union",
    "qpl_line": "#5 = Union [ #3 , #4 ] Output [ #3.song_name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.f_id = #2.f_id ] Output [ #2.song_name ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ files ] Predicate [ duration like '4:%' ] Output [ f_id , duration ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ song ] Output [ song_name , f_id ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 4,
        "op": "Scan",
        "qpl_line": "#4 = Scan Table [ song ] Predicate [ languages = ' english' ] Output [ song_name , languages ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Union': 'song(1)' and 'song(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "music_1",
    "line_num": 3,
    "op": "TopSort",
    "qpl_line": "#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] WithTies [ True ] Output [ Count_Star , artist_name ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ languages , artist_name ] Output [ countstar AS Count_Star , artist_name ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ song ] Predicate [ resolution > 500 ] Output [ resolution , languages , artist_name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #2: GroupBy column 'languages' not found in aggregate output: ['count_star', 'artist_name']."
  },
  {
    "split": "train",
    "db_id": "music_1",
    "line_num": 3,
    "op": "TopSort",
    "qpl_line": "#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] WithTies [ True ] Output [ Count_Star , artist_name ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ languages , artist_name ] Output [ countstar AS Count_Star , artist_name ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ song ] Predicate [ resolution > 500 ] Output [ resolution , languages , artist_name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #2: GroupBy column 'languages' not found in aggregate output: ['count_star', 'artist_name']."
  },
  {
    "split": "train",
    "db_id": "music_1",
    "line_num": 5,
    "op": "Intersect",
    "qpl_line": "#5 = Intersect [ #1 , #4 ] Predicate [ #1.artist_name = #4.artist_name ] Output [ #1.artist_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ artist ] Predicate [ country = 'UK' ] Output [ country , artist_name ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.artist_name = #3.artist_name ] Output [ #3.artist_name ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ song ] Predicate [ languages = 'english' ] Output [ languages , artist_name ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ artist ] Output [ artist_name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Intersect': 'artist(2)' and 'artist(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "music_1",
    "line_num": 5,
    "op": "Intersect",
    "qpl_line": "#5 = Intersect [ #1 , #4 ] Predicate [ #1.artist_name = #4.artist_name ] Output [ #1.artist_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ artist ] Predicate [ country = 'UK' ] Output [ country , artist_name ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.artist_name = #3.artist_name ] Output [ #3.artist_name ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ song ] Predicate [ languages = 'english' ] Output [ languages , artist_name ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ artist ] Output [ artist_name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Intersect': 'artist(2)' and 'artist(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "music_1",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 1 ] Output [ country , artist_name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ artist_name ] Output [ countstar AS Count_Star , country , artist_name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.artist_name = #2.artist_name ] Output [ #2.country , #2.artist_name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ song ] Predicate [ resolution > 900 ] Output [ resolution , artist_name ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ artist ] Output [ country , artist_name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'country' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "music_1",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 1 ] Output [ country , artist_name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ artist_name ] Output [ countstar AS Count_Star , country , artist_name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.artist_name = #2.artist_name ] Output [ #2.country , #2.artist_name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ song ] Predicate [ resolution > 900 ] Output [ resolution , artist_name ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ artist ] Output [ country , artist_name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'country' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "baseball_1",
    "line_num": 9,
    "op": "Join",
    "qpl_line": "#9 = Join [ #4 , #8 ] Predicate [ #4.name_first = #8.name_first ] Distinct [ true ] Output [ #4.name_last , #4.name_first ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Distinct [ true ] Output [ #3.name_first , #3.name_last ]",
        "children": [
          {
            "line_num": 2,
            "op": "Top",
            "qpl_line": "#2 = Top [ #1 ] Rows [ 1 ] Output [ year ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ player_award ] Predicate [ year = 1961 ] Output [ year ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ player ] Output [ name_last , name_first ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 8,
        "op": "Join",
        "qpl_line": "#8 = Join [ #6 , #7 ] Distinct [ true ] Output [ #7.name_last , #7.name_first ]",
        "children": [
          {
            "line_num": 6,
            "op": "Top",
            "qpl_line": "#6 = Top [ #5 ] Rows [ 1 ] Output [ year ]",
            "children": [
              {
                "line_num": 5,
                "op": "Scan",
                "qpl_line": "#5 = Scan Table [ player_award ] Predicate [ year = 1960 ] Output [ year ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 7,
            "op": "Scan",
            "qpl_line": "#7 = Scan Table [ player ] Output [ name_last , name_first ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'player_award(1)' and 'player(2)'"
  },
  {
    "split": "train",
    "db_id": "baseball_1",
    "line_num": 9,
    "op": "Join",
    "qpl_line": "#9 = Join [ #4 , #8 ] Predicate [ #4.name_first = #8.name_first ] Distinct [ true ] Output [ #4.name_last , #4.name_first ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Distinct [ true ] Output [ #3.name_first , #3.name_last ]",
        "children": [
          {
            "line_num": 2,
            "op": "Top",
            "qpl_line": "#2 = Top [ #1 ] Rows [ 1 ] Output [ year ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ player_award ] Predicate [ year = 1961 ] Output [ year ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ player ] Output [ name_last , name_first ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 8,
        "op": "Join",
        "qpl_line": "#8 = Join [ #6 , #7 ] Distinct [ true ] Output [ #7.name_last , #7.name_first ]",
        "children": [
          {
            "line_num": 6,
            "op": "Top",
            "qpl_line": "#6 = Top [ #5 ] Rows [ 1 ] Output [ year ]",
            "children": [
              {
                "line_num": 5,
                "op": "Scan",
                "qpl_line": "#5 = Scan Table [ player_award ] Predicate [ year = 1960 ] Output [ year ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 7,
            "op": "Scan",
            "qpl_line": "#7 = Scan Table [ player ] Output [ name_last , name_first ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'player_award(1)' and 'player(2)'"
  },
  {
    "split": "train",
    "db_id": "insurance_policies",
    "line_num": 11,
    "op": "Except",
    "qpl_line": "#11 = Except [ #5 , #10 ] Predicate [ #5.Customer_Details = #10.Customer_Details ] Output [ #5.Customer_Details , #5.Customer_ID ]",
    "children": [
      {
        "line_num": 5,
        "op": "Filter",
        "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Customer_ID , Customer_Details ]",
        "children": [
          {
            "line_num": 4,
            "op": "Aggregate",
            "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Customer_ID ] Output [ countstar AS Count_Star , Customer_ID , Customer_Details ]",
            "children": [
              {
                "line_num": 3,
                "op": "Join",
                "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Customer_ID = #2.Customer_ID ] Output [ #2.Customer_ID , #2.Customer_Details ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ Customer_Policies ] Output [ Customer_ID ]",
                    "children": []
                  },
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Customers ] Output [ Customer_ID , Customer_Details ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "line_num": 10,
        "op": "Intersect",
        "qpl_line": "#10 = Intersect [ #6 , #9 ] Predicate [ #9.Customer_ID = #6.Customer_ID ] Output [ #6.Customer_Details , #6.Customer_ID ]",
        "children": [
          {
            "line_num": 6,
            "op": "Scan",
            "qpl_line": "#6 = Scan Table [ Customers ] Output [ Customer_ID , Customer_Details ]",
            "children": []
          },
          {
            "line_num": 9,
            "op": "Join",
            "qpl_line": "#9 = Join [ #7 , #8 ] Predicate [ #7.Policy_ID = #8.Policy_ID ] Output [ #8.Customer_ID ]",
            "children": [
              {
                "line_num": 7,
                "op": "Scan",
                "qpl_line": "#7 = Scan Table [ Claims ] Output [ Policy_ID ]",
                "children": []
              },
              {
                "line_num": 8,
                "op": "Scan",
                "qpl_line": "#8 = Scan Table [ Customer_Policies ] Output [ Customer_ID , Policy_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'customer_details' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "insurance_policies",
    "line_num": 11,
    "op": "Except",
    "qpl_line": "#11 = Except [ #5 , #10 ] Predicate [ #5.Customer_Details = #10.Customer_Details ] Output [ #5.Customer_Details , #5.Customer_ID ]",
    "children": [
      {
        "line_num": 5,
        "op": "Filter",
        "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Customer_ID , Customer_Details ]",
        "children": [
          {
            "line_num": 4,
            "op": "Aggregate",
            "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Customer_ID ] Output [ countstar AS Count_Star , Customer_ID , Customer_Details ]",
            "children": [
              {
                "line_num": 3,
                "op": "Join",
                "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Customer_ID = #2.Customer_ID ] Output [ #2.Customer_ID , #2.Customer_Details ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ Customer_Policies ] Output [ Customer_ID ]",
                    "children": []
                  },
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Customers ] Output [ Customer_ID , Customer_Details ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "line_num": 10,
        "op": "Intersect",
        "qpl_line": "#10 = Intersect [ #6 , #9 ] Predicate [ #9.Customer_ID = #6.Customer_ID ] Output [ #6.Customer_Details , #6.Customer_ID ]",
        "children": [
          {
            "line_num": 6,
            "op": "Scan",
            "qpl_line": "#6 = Scan Table [ Customers ] Output [ Customer_ID , Customer_Details ]",
            "children": []
          },
          {
            "line_num": 9,
            "op": "Join",
            "qpl_line": "#9 = Join [ #7 , #8 ] Predicate [ #7.Policy_ID = #8.Policy_ID ] Output [ #8.Customer_ID ]",
            "children": [
              {
                "line_num": 7,
                "op": "Scan",
                "qpl_line": "#7 = Scan Table [ Claims ] Output [ Policy_ID ]",
                "children": []
              },
              {
                "line_num": 8,
                "op": "Scan",
                "qpl_line": "#8 = Scan Table [ Customer_Policies ] Output [ Customer_ID , Policy_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'customer_details' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "insurance_policies",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Customer_ID , Customer_Details ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Customer_ID ] Output [ countstar AS Count_Star , Customer_ID , Customer_Details ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Customer_ID = #2.Customer_ID ] Output [ #2.Customer_ID , #2.Customer_Details ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Customer_Policies ] Output [ Customer_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Customers ] Output [ Customer_ID , Customer_Details ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'customer_details' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "insurance_policies",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Customer_ID , Customer_Details ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Customer_ID ] Output [ countstar AS Count_Star , Customer_ID , Customer_Details ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Customer_ID = #2.Customer_ID ] Output [ #2.Customer_ID , #2.Customer_Details ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Customer_Policies ] Output [ Customer_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Customers ] Output [ Customer_ID , Customer_Details ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'customer_details' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "hospital_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ EmployeeID ] Output [ countstar AS Count_Star , Name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.PCP = #2.EmployeeID ] Output [ #2.Name , #2.EmployeeID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Patient ] Output [ PCP ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Physician ] Output [ Name , EmployeeID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "hospital_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ EmployeeID ] Output [ countstar AS Count_Star , Name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.PCP = #2.EmployeeID ] Output [ #2.Name , #2.EmployeeID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Patient ] Output [ PCP ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Physician ] Output [ Name , EmployeeID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "hospital_1",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ EmployeeID ] Output [ countstar AS Count_Star , Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.PCP = #2.EmployeeID ] Output [ #2.Name , #2.EmployeeID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Patient ] Output [ PCP ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Physician ] Output [ Name , EmployeeID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "hospital_1",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ EmployeeID ] Output [ countstar AS Count_Star , Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.PCP = #2.EmployeeID ] Output [ #2.Name , #2.EmployeeID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Patient ] Output [ PCP ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Physician ] Output [ Name , EmployeeID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "hospital_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Brand , Name ] Output [ countstar AS Count_Star , Name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Medication = #2.Code ] Output [ #2.Name , #2.Brand ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Prescribes ] Output [ Medication ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Medication ] Output [ Code , Brand , Name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: GroupBy column 'brand' not found in aggregate output: ['count_star', 'name']."
  },
  {
    "split": "train",
    "db_id": "hospital_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Brand , Name ] Output [ countstar AS Count_Star , Name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Medication = #2.Code ] Output [ #2.Name , #2.Brand ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Prescribes ] Output [ Medication ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Medication ] Output [ Code , Brand , Name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: GroupBy column 'brand' not found in aggregate output: ['count_star', 'name']."
  },
  {
    "split": "train",
    "db_id": "hospital_1",
    "line_num": 7,
    "op": "Union",
    "qpl_line": "#7 = Union [ #1 , #6 ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Procedures ] Predicate [ Cost > 1000.0 ] Output [ Cost , Name ]",
        "children": []
      },
      {
        "line_num": 6,
        "op": "Join",
        "qpl_line": "#6 = Join [ #4 , #5 ] Predicate [ #4.Treatment = #5.Code ] Output [ #5.Name ]",
        "children": [
          {
            "line_num": 4,
            "op": "Join",
            "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.EmployeeID = #3.Physician ] Output [ #3.Treatment ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Physician ] Predicate [ Name = 'John Wen' ] Output [ Name , EmployeeID ]",
                "children": []
              },
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ Trained_In ] Output [ Treatment , Physician ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 5,
            "op": "Scan",
            "qpl_line": "#5 = Scan Table [ Procedures ] Output [ Code , Name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #7: Incompatible types for operator 'Union': 'Procedures(2)' and 'Procedures(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "hospital_1",
    "line_num": 7,
    "op": "Union",
    "qpl_line": "#7 = Union [ #1 , #6 ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Procedures ] Predicate [ Cost > 1000.0 ] Output [ Cost , Name ]",
        "children": []
      },
      {
        "line_num": 6,
        "op": "Join",
        "qpl_line": "#6 = Join [ #4 , #5 ] Predicate [ #4.Treatment = #5.Code ] Output [ #5.Name ]",
        "children": [
          {
            "line_num": 4,
            "op": "Join",
            "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.EmployeeID = #3.Physician ] Output [ #3.Treatment ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Physician ] Predicate [ Name = 'John Wen' ] Output [ Name , EmployeeID ]",
                "children": []
              },
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ Trained_In ] Output [ Treatment , Physician ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 5,
            "op": "Scan",
            "qpl_line": "#5 = Scan Table [ Procedures ] Output [ Code , Name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #7: Incompatible types for operator 'Union': 'Procedures(2)' and 'Procedures(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "hospital_1",
    "line_num": 7,
    "op": "Except",
    "qpl_line": "#7 = Except [ #1 , #6 ] Predicate [ #1.Name = #6.Name ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Procedures ] Predicate [ Cost > 1000.0 ] Distinct [ true ] Output [ Cost , Name ]",
        "children": []
      },
      {
        "line_num": 6,
        "op": "Join",
        "qpl_line": "#6 = Join [ #4 , #5 ] Predicate [ #4.Treatment = #5.Code ] Output [ #5.Name ]",
        "children": [
          {
            "line_num": 4,
            "op": "Join",
            "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.EmployeeID = #3.Physician ] Output [ #3.Treatment ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Physician ] Predicate [ Name = 'John Wen' ] Output [ Name , EmployeeID ]",
                "children": []
              },
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ Trained_In ] Output [ Treatment , Physician ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 5,
            "op": "Scan",
            "qpl_line": "#5 = Scan Table [ Procedures ] Output [ Code , Name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #7: Incompatible types for operator 'Except': 'Procedures(2)' and 'Procedures(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "hospital_1",
    "line_num": 7,
    "op": "Except",
    "qpl_line": "#7 = Except [ #1 , #6 ] Predicate [ #1.Name = #6.Name ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Procedures ] Predicate [ Cost > 1000.0 ] Distinct [ true ] Output [ Cost , Name ]",
        "children": []
      },
      {
        "line_num": 6,
        "op": "Join",
        "qpl_line": "#6 = Join [ #4 , #5 ] Predicate [ #4.Treatment = #5.Code ] Output [ #5.Name ]",
        "children": [
          {
            "line_num": 4,
            "op": "Join",
            "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.EmployeeID = #3.Physician ] Output [ #3.Treatment ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Physician ] Predicate [ Name = 'John Wen' ] Output [ Name , EmployeeID ]",
                "children": []
              },
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ Trained_In ] Output [ Treatment , Physician ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 5,
            "op": "Scan",
            "qpl_line": "#5 = Scan Table [ Procedures ] Output [ Code , Name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #7: Incompatible types for operator 'Except': 'Procedures(2)' and 'Procedures(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "hospital_1",
    "line_num": 7,
    "op": "Intersect",
    "qpl_line": "#7 = Intersect [ #1 , #6 ] Predicate [ #1.Name = #6.Name ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Procedures ] Predicate [ Cost < 5000.0 ] Distinct [ true ] Output [ Cost , Name ]",
        "children": []
      },
      {
        "line_num": 6,
        "op": "Join",
        "qpl_line": "#6 = Join [ #4 , #5 ] Predicate [ #4.Treatment = #5.Code ] Output [ #5.Name ]",
        "children": [
          {
            "line_num": 4,
            "op": "Join",
            "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.EmployeeID = #3.Physician ] Output [ #3.Treatment ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Physician ] Predicate [ Name = 'John Wen' ] Output [ Name , EmployeeID ]",
                "children": []
              },
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ Trained_In ] Output [ Treatment , Physician ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 5,
            "op": "Scan",
            "qpl_line": "#5 = Scan Table [ Procedures ] Output [ Code , Name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #7: Incompatible types for operator 'Intersect': 'Procedures(2)' and 'Procedures(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "hospital_1",
    "line_num": 7,
    "op": "Intersect",
    "qpl_line": "#7 = Intersect [ #1 , #6 ] Predicate [ #1.Name = #6.Name ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Procedures ] Predicate [ Cost < 5000.0 ] Distinct [ true ] Output [ Cost , Name ]",
        "children": []
      },
      {
        "line_num": 6,
        "op": "Join",
        "qpl_line": "#6 = Join [ #4 , #5 ] Predicate [ #4.Treatment = #5.Code ] Output [ #5.Name ]",
        "children": [
          {
            "line_num": 4,
            "op": "Join",
            "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.EmployeeID = #3.Physician ] Output [ #3.Treatment ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Physician ] Predicate [ Name = 'John Wen' ] Output [ Name , EmployeeID ]",
                "children": []
              },
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ Trained_In ] Output [ Treatment , Physician ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 5,
            "op": "Scan",
            "qpl_line": "#5 = Scan Table [ Procedures ] Output [ Code , Name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #7: Incompatible types for operator 'Intersect': 'Procedures(2)' and 'Procedures(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "ship_mission",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Ship_ID IS NULL OR #1.Ship_ID = #2.Ship_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ ship ] Output [ Name , Ship_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ mission ] Output [ Ship_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'ship(2)' and 'ship(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "ship_mission",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Ship_ID IS NULL OR #1.Ship_ID = #2.Ship_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ ship ] Output [ Name , Ship_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ mission ] Output [ Ship_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'ship(2)' and 'ship(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "student_1",
    "line_num": 7,
    "op": "Except",
    "qpl_line": "#7 = Except [ #3 , #6 ] Predicate [ #3.FirstName = #6.FirstName ] Output [ #3.LastName , #3.FirstName ]",
    "children": [
      {
        "line_num": 3,
        "op": "Intersect",
        "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #2.Classroom = #1.Classroom ] Output [ #1.FirstName , #1.LastName ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ list ] Predicate [ Grade = 1 ] Output [ Grade , Classroom , LastName , FirstName ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ teachers ] Output [ Classroom ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 6,
        "op": "Join",
        "qpl_line": "#6 = Join [ #4 , #5 ] Predicate [ #4.Classroom = #5.Classroom ] Output [ #5.FirstName , #5.LastName ]",
        "children": [
          {
            "line_num": 4,
            "op": "Scan",
            "qpl_line": "#4 = Scan Table [ teachers ] Predicate [ FirstName = 'OTHA' AND LastName = 'MOYER' ] Output [ LastName , Classroom , FirstName ]",
            "children": []
          },
          {
            "line_num": 5,
            "op": "Scan",
            "qpl_line": "#5 = Scan Table [ list ] Output [ Classroom , LastName , FirstName ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'list(3), classroom(1)' and 'classroom(1)' (must have the same number of columns in total: 4 != 1)."
  },
  {
    "split": "train",
    "db_id": "student_1",
    "line_num": 7,
    "op": "Except",
    "qpl_line": "#7 = Except [ #3 , #6 ] Predicate [ #3.FirstName = #6.FirstName ] Output [ #3.LastName , #3.FirstName ]",
    "children": [
      {
        "line_num": 3,
        "op": "Intersect",
        "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #2.Classroom = #1.Classroom ] Output [ #1.FirstName , #1.LastName ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ list ] Predicate [ Grade = 1 ] Output [ Grade , Classroom , LastName , FirstName ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ teachers ] Output [ Classroom ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 6,
        "op": "Join",
        "qpl_line": "#6 = Join [ #4 , #5 ] Predicate [ #4.Classroom = #5.Classroom ] Output [ #5.FirstName , #5.LastName ]",
        "children": [
          {
            "line_num": 4,
            "op": "Scan",
            "qpl_line": "#4 = Scan Table [ teachers ] Predicate [ FirstName = 'OTHA' AND LastName = 'MOYER' ] Output [ LastName , Classroom , FirstName ]",
            "children": []
          },
          {
            "line_num": 5,
            "op": "Scan",
            "qpl_line": "#5 = Scan Table [ list ] Output [ Classroom , LastName , FirstName ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'list(3), classroom(1)' and 'classroom(1)' (must have the same number of columns in total: 4 != 1)."
  },
  {
    "split": "train",
    "db_id": "company_employee",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.People_ID = #1.People_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ people ] Output [ People_ID , Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ employment ] Output [ People_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'people(2)' and 'people(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "film_rank",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Film_ID IS NULL OR #1.Film_ID = #2.Film_ID ] Output [ #1.Title ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ film ] Output [ Film_ID , Title ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ film_market_estimation ] Output [ Film_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'film(2)' and 'film(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "film_rank",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Film_ID IS NULL OR #1.Film_ID = #2.Film_ID ] Output [ #1.Title ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ film ] Output [ Film_ID , Title ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ film_market_estimation ] Output [ Film_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'film(2)' and 'film(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "film_rank",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.Studio = #2.Studio ] Output [ #1.Studio ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ film ] Distinct [ true ] Output [ Studio ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ film ] Predicate [ Director = 'Walter Hill' ] Output [ Studio , Director ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'film(1)' and 'film(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "film_rank",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.Studio = #2.Studio ] Output [ #1.Studio ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ film ] Distinct [ true ] Output [ Studio ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ film ] Predicate [ Director = 'Walter Hill' ] Output [ Studio , Director ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'film(1)' and 'film(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "film_rank",
    "line_num": 5,
    "op": "Except",
    "qpl_line": "#5 = Except [ #1 , #4 ] Predicate [ #4.Film_ID IS NULL OR #1.Film_ID = #4.Film_ID ] Output [ #1.Title , #1.Director ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ film ] Output [ Film_ID , Title , Director ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Market_ID = #2.Market_ID ] Output [ #2.Film_ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ film_market_estimation ] Output [ Film_ID , Market_ID ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ market ] Predicate [ Country = 'China' ] Output [ Country , Market_ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Except': 'film(3)' and 'film(1)' (must have the same number of columns in total: 3 != 1)."
  },
  {
    "split": "train",
    "db_id": "film_rank",
    "line_num": 5,
    "op": "Except",
    "qpl_line": "#5 = Except [ #1 , #4 ] Predicate [ #4.Film_ID IS NULL OR #1.Film_ID = #4.Film_ID ] Output [ #1.Title , #1.Director ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ film ] Output [ Film_ID , Title , Director ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Market_ID = #2.Market_ID ] Output [ #2.Film_ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ film_market_estimation ] Output [ Film_ID , Market_ID ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ market ] Predicate [ Country = 'China' ] Output [ Country , Market_ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Except': 'film(3)' and 'film(1)' (must have the same number of columns in total: 3 != 1)."
  },
  {
    "split": "train",
    "db_id": "tracking_grants_for_research",
    "line_num": 5,
    "op": "Intersect",
    "qpl_line": "#5 = Intersect [ #3 , #4 ] Predicate [ #3.grant_amount = #4.grant_amount ] Output [ #3.grant_amount ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.grant_id = #2.grant_id ] Distinct [ true ] Output [ #2.grant_amount ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Documents ] Predicate [ sent_date < '1986-08-26 20:49:27.000' ] Output [ sent_date , grant_id ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Grants ] Output [ grant_amount , grant_id ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 4,
        "op": "Scan",
        "qpl_line": "#4 = Scan Table [ Grants ] Predicate [ grant_end_date > '1989-03-16 18:27:16.000' ] Output [ grant_amount , grant_end_date ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Intersect': 'Grants(1)' and 'Grants(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "tracking_grants_for_research",
    "line_num": 5,
    "op": "Intersect",
    "qpl_line": "#5 = Intersect [ #3 , #4 ] Predicate [ #3.grant_amount = #4.grant_amount ] Output [ #3.grant_amount ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.grant_id = #2.grant_id ] Distinct [ true ] Output [ #2.grant_amount ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Documents ] Predicate [ sent_date < '1986-08-26 20:49:27.000' ] Output [ sent_date , grant_id ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Grants ] Output [ grant_amount , grant_id ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 4,
        "op": "Scan",
        "qpl_line": "#4 = Scan Table [ Grants ] Predicate [ grant_end_date > '1989-03-16 18:27:16.000' ] Output [ grant_amount , grant_end_date ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Intersect': 'Grants(1)' and 'Grants(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "tracking_grants_for_research",
    "line_num": 7,
    "op": "Union",
    "qpl_line": "#7 = Union [ #5 , #6 ] Output [ #5.date_to , #5.date_from ]",
    "children": [
      {
        "line_num": 5,
        "op": "Join",
        "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.project_id = #4.project_id ] Output [ #4.date_to , #4.date_from ]",
        "children": [
          {
            "line_num": 3,
            "op": "TopSort",
            "qpl_line": "#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ project_id , Count_Star ]",
            "children": [
              {
                "line_num": 2,
                "op": "Aggregate",
                "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ project_id ] Output [ project_id , countstar AS Count_Star ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ Project_Staff ] Output [ project_id ]",
                    "children": []
                  }
                ]
              }
            ]
          },
          {
            "line_num": 4,
            "op": "Scan",
            "qpl_line": "#4 = Scan Table [ Project_Staff ] Output [ project_id , date_from , date_to ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 6,
        "op": "Scan",
        "qpl_line": "#6 = Scan Table [ Project_Staff ] Predicate [ role_code = 'leader' ] Output [ date_to , role_code , date_from ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #7: Incompatible types for operator 'Union': 'Project_Staff(2)' and 'Project_Staff(2), Staff_Roles(1)' (must have the same number of columns in total: 2 != 3)."
  },
  {
    "split": "train",
    "db_id": "tracking_grants_for_research",
    "line_num": 7,
    "op": "Union",
    "qpl_line": "#7 = Union [ #5 , #6 ] Output [ #5.date_to , #5.date_from ]",
    "children": [
      {
        "line_num": 5,
        "op": "Join",
        "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.project_id = #4.project_id ] Output [ #4.date_to , #4.date_from ]",
        "children": [
          {
            "line_num": 3,
            "op": "TopSort",
            "qpl_line": "#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ project_id , Count_Star ]",
            "children": [
              {
                "line_num": 2,
                "op": "Aggregate",
                "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ project_id ] Output [ project_id , countstar AS Count_Star ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ Project_Staff ] Output [ project_id ]",
                    "children": []
                  }
                ]
              }
            ]
          },
          {
            "line_num": 4,
            "op": "Scan",
            "qpl_line": "#4 = Scan Table [ Project_Staff ] Output [ project_id , date_from , date_to ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 6,
        "op": "Scan",
        "qpl_line": "#6 = Scan Table [ Project_Staff ] Predicate [ role_code = 'leader' ] Output [ date_to , role_code , date_from ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #7: Incompatible types for operator 'Union': 'Project_Staff(2)' and 'Project_Staff(2), Staff_Roles(1)' (must have the same number of columns in total: 2 != 3)."
  },
  {
    "split": "train",
    "db_id": "tracking_grants_for_research",
    "line_num": 11,
    "op": "Union",
    "qpl_line": "#11 = Union [ #3 , #10 ] Output [ #3.task_id , #3.task_details , #3.project_id ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.project_id = #2.project_id ] Output [ #2.task_id , #1.project_id , #2.task_details ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Projects ] Predicate [ project_details = 'omnis' ] Output [ project_id , project_details ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Tasks ] Output [ project_id , task_details , task_id ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 10,
        "op": "Filter",
        "qpl_line": "#10 = Filter [ #9 ] Predicate [ Count_Star > 2 ] Output [ project_id , task_details , task_id ]",
        "children": [
          {
            "line_num": 9,
            "op": "Aggregate",
            "qpl_line": "#9 = Aggregate [ #8 ] GroupBy [ task_id ] Output [ project_id , countstar AS Count_Star , task_details , task_id ]",
            "children": [
              {
                "line_num": 8,
                "op": "Join",
                "qpl_line": "#8 = Join [ #4 , #7 ] Predicate [ #4.project_id = #7.project_id ] Output [ #7.task_details , #4.project_id , #7.task_id ]",
                "children": [
                  {
                    "line_num": 4,
                    "op": "Scan",
                    "qpl_line": "#4 = Scan Table [ Projects ] Output [ project_id ]",
                    "children": []
                  },
                  {
                    "line_num": 7,
                    "op": "Join",
                    "qpl_line": "#7 = Join [ #5 , #6 ] Predicate [ #5.project_id = #6.project_id ] Output [ #5.project_id , #6.task_details , #6.task_id ]",
                    "children": [
                      {
                        "line_num": 5,
                        "op": "Scan",
                        "qpl_line": "#5 = Scan Table [ Project_Outcomes ] Output [ project_id ]",
                        "children": []
                      },
                      {
                        "line_num": 6,
                        "op": "Scan",
                        "qpl_line": "#6 = Scan Table [ Tasks ] Output [ project_id , task_details , task_id ]",
                        "children": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #9: Column 'project_id' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "tracking_grants_for_research",
    "line_num": 11,
    "op": "Union",
    "qpl_line": "#11 = Union [ #3 , #10 ] Output [ #3.task_id , #3.task_details , #3.project_id ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.project_id = #2.project_id ] Output [ #2.task_id , #1.project_id , #2.task_details ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Projects ] Predicate [ project_details = 'omnis' ] Output [ project_id , project_details ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Tasks ] Output [ project_id , task_details , task_id ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 10,
        "op": "Filter",
        "qpl_line": "#10 = Filter [ #9 ] Predicate [ Count_Star > 2 ] Output [ project_id , task_details , task_id ]",
        "children": [
          {
            "line_num": 9,
            "op": "Aggregate",
            "qpl_line": "#9 = Aggregate [ #8 ] GroupBy [ task_id ] Output [ project_id , countstar AS Count_Star , task_details , task_id ]",
            "children": [
              {
                "line_num": 8,
                "op": "Join",
                "qpl_line": "#8 = Join [ #4 , #7 ] Predicate [ #4.project_id = #7.project_id ] Output [ #7.task_details , #4.project_id , #7.task_id ]",
                "children": [
                  {
                    "line_num": 4,
                    "op": "Scan",
                    "qpl_line": "#4 = Scan Table [ Projects ] Output [ project_id ]",
                    "children": []
                  },
                  {
                    "line_num": 7,
                    "op": "Join",
                    "qpl_line": "#7 = Join [ #5 , #6 ] Predicate [ #5.project_id = #6.project_id ] Output [ #5.project_id , #6.task_details , #6.task_id ]",
                    "children": [
                      {
                        "line_num": 5,
                        "op": "Scan",
                        "qpl_line": "#5 = Scan Table [ Project_Outcomes ] Output [ project_id ]",
                        "children": []
                      },
                      {
                        "line_num": 6,
                        "op": "Scan",
                        "qpl_line": "#6 = Scan Table [ Tasks ] Output [ project_id , task_details , task_id ]",
                        "children": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #9: Column 'project_id' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "tracking_grants_for_research",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.project_id = #1.project_id ] Output [ #1.project_details ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Projects ] Output [ project_id , project_details ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Project_Outcomes ] Output [ project_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Projects(2)' and 'Projects(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "tracking_grants_for_research",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.project_id = #1.project_id ] Output [ #1.project_details ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Projects ] Output [ project_id , project_details ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Project_Outcomes ] Output [ project_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Projects(2)' and 'Projects(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "tracking_grants_for_research",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ project_id ] Output [ countstar AS Count_Star , project_details ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.project_id = #2.project_id ] Output [ #2.project_id , #2.project_details ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Tasks ] Output [ project_id ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Projects ] Output [ project_id , project_details ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'project_details' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "tracking_grants_for_research",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ project_id ] Output [ countstar AS Count_Star , project_details ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.project_id = #2.project_id ] Output [ #2.project_id , #2.project_details ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Tasks ] Output [ project_id ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Projects ] Output [ project_id , project_details ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'project_details' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "decoration_competition",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Member_ID = #1.Member_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ member ] Output [ Name , Member_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ round ] Output [ Member_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'member(2)' and 'member(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "document_management",
    "line_num": 3,
    "op": "TopSort",
    "qpl_line": "#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Sum_access_count ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ document_type_code ] Output [ countstar AS Count_Star , SUM(access_count) AS Sum_access_count ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Documents ] Output [ document_type_code , access_count ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #2: GroupBy column 'document_type_code' not found in aggregate output: ['count_star', 'sum_access_count']."
  },
  {
    "split": "train",
    "db_id": "document_management",
    "line_num": 3,
    "op": "TopSort",
    "qpl_line": "#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Sum_access_count ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ document_type_code ] Output [ countstar AS Count_Star , SUM(access_count) AS Sum_access_count ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Documents ] Output [ document_type_code , access_count ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #2: GroupBy column 'document_type_code' not found in aggregate output: ['count_star', 'sum_access_count']."
  },
  {
    "split": "train",
    "db_id": "document_management",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.document_code = #1.document_code ] Output [ #1.document_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Documents ] Output [ document_code , document_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Document_Sections ] Output [ document_code ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Documents(2)' and 'Documents(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "document_management",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.document_code = #1.document_code ] Output [ #1.document_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Documents ] Output [ document_code , document_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Document_Sections ] Output [ document_code ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Documents(2)' and 'Documents(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "document_management",
    "line_num": 3,
    "op": "TopSort",
    "qpl_line": "#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] WithTies [ True ] Output [ Count_Star , user_name , password ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ user_name , password , role_code ] Output [ countstar AS Count_Star , user_name , password ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Users ] Output [ role_code , user_name , password ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #2: GroupBy column 'role_code' not found in aggregate output: ['count_star', 'user_name', 'password']."
  },
  {
    "split": "train",
    "db_id": "document_management",
    "line_num": 3,
    "op": "TopSort",
    "qpl_line": "#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] WithTies [ True ] Output [ Count_Star , user_name , password ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ user_name , password , role_code ] Output [ countstar AS Count_Star , user_name , password ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Users ] Output [ role_code , user_name , password ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #2: GroupBy column 'role_code' not found in aggregate output: ['count_star', 'user_name', 'password']."
  },
  {
    "split": "train",
    "db_id": "document_management",
    "line_num": 3,
    "op": "TopSort",
    "qpl_line": "#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , Avg_access_count ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ document_structure_code ] Output [ countstar AS Count_Star , AVG(access_count) AS Avg_access_count ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Documents ] Output [ access_count , document_structure_code ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #2: GroupBy column 'document_structure_code' not found in aggregate output: ['count_star', 'avg_access_count']."
  },
  {
    "split": "train",
    "db_id": "document_management",
    "line_num": 3,
    "op": "TopSort",
    "qpl_line": "#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , Avg_access_count ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ document_structure_code ] Output [ countstar AS Count_Star , AVG(access_count) AS Avg_access_count ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Documents ] Output [ access_count , document_structure_code ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #2: GroupBy column 'document_structure_code' not found in aggregate output: ['count_star', 'avg_access_count']."
  },
  {
    "split": "train",
    "db_id": "company_office",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ building_id ] Output [ name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.building_id ] Output [ #2.building_id , #1.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ buildings ] Output [ name , id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Office_locations ] Output [ building_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "company_office",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ building_id ] Output [ name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.building_id ] Output [ #2.building_id , #1.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ buildings ] Output [ name , id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Office_locations ] Output [ building_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "company_office",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.building_id = #1.id ] Output [ #1.name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ buildings ] Output [ name , id ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ building_id ] Output [ building_id ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Office_locations ] Output [ building_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'buildings(2)' and 'buildings(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "company_office",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.building_id = #1.id ] Output [ #1.name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ buildings ] Output [ name , id ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ building_id ] Output [ building_id ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Office_locations ] Output [ building_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'buildings(2)' and 'buildings(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "solvency_ii",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Product_ID = #1.Product_ID ] Output [ #1.Product_Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Products ] Output [ Product_ID , Product_Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Products_in_Events ] Output [ Product_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Products(2)' and 'Products(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "entertainment_awards",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Artwork_ID = #1.Artwork_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ artwork ] Output [ Artwork_ID , Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ nomination ] Output [ Artwork_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'artwork(2)' and 'artwork(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "customers_campaigns_ecommerce",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.customer_id = #1.customer_id ] Output [ #1.customer_phone , #1.customer_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Customers ] Output [ customer_id , customer_phone , customer_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Mailshot_Customers ] Output [ customer_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Customers(3)' and 'Customers(1)' (must have the same number of columns in total: 3 != 1)."
  },
  {
    "split": "train",
    "db_id": "customers_campaigns_ecommerce",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ customer_name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.customer_name , #1.customer_id ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Mailshot_Customers ] Predicate [ outcome_code = 'Order' ] Output [ outcome_code , customer_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Customers ] Output [ customer_id , customer_name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'customer_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "college_3",
    "line_num": 3,
    "op": "Union",
    "qpl_line": "#3 = Union [ #1 , #2 ] Output [ #1.DName ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Department ] Predicate [ Division = 'AS' ] Output [ Division , DName ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Department ] Predicate [ Division = 'EN' AND Building = 'NEB' ] Output [ Division , Building , DName ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Union': 'Department(2)' and 'Department(3)' (must have the same number of columns in total: 2 != 3)."
  },
  {
    "split": "train",
    "db_id": "college_3",
    "line_num": 3,
    "op": "Union",
    "qpl_line": "#3 = Union [ #1 , #2 ] Output [ #1.DName ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Department ] Predicate [ Division = 'AS' ] Output [ Division , DName ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Department ] Predicate [ Division = 'EN' AND Building = 'NEB' ] Output [ Division , Building , DName ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Union': 'Department(2)' and 'Department(3)' (must have the same number of columns in total: 2 != 3)."
  },
  {
    "split": "train",
    "db_id": "department_store",
    "line_num": 7,
    "op": "Filter",
    "qpl_line": "#7 = Filter [ #6 ] Predicate [ Count_Star >= 2 ] Distinct [ true ] Output [ product_name ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ product_id ] Output [ countstar AS Count_Star , product_name ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.product_id = #4.product_id ] Distinct [ true ] Output [ #4.product_id , #3.customer_id , #4.product_name ]",
            "children": [
              {
                "line_num": 3,
                "op": "Join",
                "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.order_id = #2.order_id ] Output [ #1.customer_id , #2.product_id ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ]",
                    "children": []
                  },
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Order_Items ] Output [ product_id , order_id ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 4,
                "op": "Scan",
                "qpl_line": "#4 = Scan Table [ Products ] Output [ product_name , product_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #6: Column 'product_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "department_store",
    "line_num": 7,
    "op": "Filter",
    "qpl_line": "#7 = Filter [ #6 ] Predicate [ Count_Star >= 2 ] Distinct [ true ] Output [ product_name ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ product_id ] Output [ countstar AS Count_Star , product_name ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.product_id = #4.product_id ] Distinct [ true ] Output [ #4.product_id , #3.customer_id , #4.product_name ]",
            "children": [
              {
                "line_num": 3,
                "op": "Join",
                "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.order_id = #2.order_id ] Output [ #1.customer_id , #2.product_id ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ]",
                    "children": []
                  },
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Order_Items ] Output [ product_id , order_id ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 4,
                "op": "Scan",
                "qpl_line": "#4 = Scan Table [ Products ] Output [ product_name , product_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #6: Column 'product_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "department_store",
    "line_num": 7,
    "op": "Filter",
    "qpl_line": "#7 = Filter [ #6 ] Predicate [ Count_Star >= 3 ] Distinct [ true ] Output [ customer_name ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_name ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.order_id = #4.order_id ] Distinct [ true ] Output [ #1.product_id , #4.customer_name , #4.customer_id ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Order_Items ] Output [ product_id , order_id ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #2.order_id , #3.customer_id , #3.customer_name ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ Customers ] Output [ customer_id , customer_name ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #6: Column 'customer_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "department_store",
    "line_num": 7,
    "op": "Filter",
    "qpl_line": "#7 = Filter [ #6 ] Predicate [ Count_Star >= 3 ] Distinct [ true ] Output [ customer_name ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_name ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.order_id = #4.order_id ] Distinct [ true ] Output [ #1.product_id , #4.customer_name , #4.customer_id ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Order_Items ] Output [ product_id , order_id ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #2.order_id , #3.customer_id , #3.customer_name ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ Customers ] Output [ customer_id , customer_name ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #6: Column 'customer_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "aircraft",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Winning_Aircraft ] Output [ countstar AS Count_Star , Aircraft ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Aircraft_ID = #2.Winning_Aircraft ] Output [ #2.Winning_Aircraft , #1.Aircraft , #1.Aircraft_ID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ aircraft ] Output [ Aircraft_ID , Aircraft ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ match ] Output [ Winning_Aircraft ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'aircraft' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "aircraft",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Winning_Aircraft ] Output [ countstar AS Count_Star , Aircraft ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Aircraft_ID = #2.Winning_Aircraft ] Output [ #2.Winning_Aircraft , #1.Aircraft , #1.Aircraft_ID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ aircraft ] Output [ Aircraft_ID , Aircraft ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ match ] Output [ Winning_Aircraft ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'aircraft' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "aircraft",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Aircraft ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Winning_Aircraft ] Output [ countstar AS Count_Star , Aircraft ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Aircraft_ID = #2.Winning_Aircraft ] Output [ #2.Winning_Aircraft , #1.Aircraft , #1.Aircraft_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ aircraft ] Output [ Aircraft_ID , Aircraft ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ match ] Output [ Winning_Aircraft ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'aircraft' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "aircraft",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ Aircraft ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Winning_Aircraft ] Output [ countstar AS Count_Star , Aircraft ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Aircraft_ID = #2.Winning_Aircraft ] Output [ #2.Winning_Aircraft , #1.Aircraft , #1.Aircraft_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ aircraft ] Output [ Aircraft_ID , Aircraft ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ match ] Output [ Winning_Aircraft ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'aircraft' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "aircraft",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Winning_Aircraft IS NULL OR #1.Aircraft_ID = #2.Winning_Aircraft ] Output [ #1.Aircraft ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ aircraft ] Output [ Aircraft_ID , Aircraft ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ match ] Output [ Winning_Aircraft ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'aircraft(2)' and 'aircraft(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "aircraft",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Winning_Aircraft IS NULL OR #1.Aircraft_ID = #2.Winning_Aircraft ] Output [ #1.Aircraft ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ aircraft ] Output [ Aircraft_ID , Aircraft ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ match ] Output [ Winning_Aircraft ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'aircraft(2)' and 'aircraft(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "aircraft",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Name , Age ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Winning_Pilot ] Output [ countstar AS Count_Star , Name , Age ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Winning_Pilot = #2.Pilot_Id ] Output [ #2.Pilot_Id , #2.Age , #2.Name , #1.Winning_Pilot ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ match ] Output [ Winning_Pilot ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ pilot ] Predicate [ Age < 30 ] Output [ Name , Pilot_Id , Age ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "aircraft",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Name , Age ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Winning_Pilot ] Output [ countstar AS Count_Star , Name , Age ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Winning_Pilot = #2.Pilot_Id ] Output [ #2.Pilot_Id , #2.Age , #2.Name , #1.Winning_Pilot ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ match ] Output [ Winning_Pilot ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ pilot ] Predicate [ Age < 30 ] Output [ Name , Pilot_Id , Age ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "local_govt_and_lot",
    "line_num": 4,
    "op": "Intersect",
    "qpl_line": "#4 = Intersect [ #1 , #3 ] Predicate [ #3.thing_id = #1.thing_id ] Output [ #1.thing_id , #1.Type_of_Thing_Code ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Things ] Output [ thing_id , Type_of_Thing_Code ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ thing_id ] Output [ thing_id ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Timed_Status_of_Things ] Predicate [ Status_of_Thing_Code = 'Close' OR Date_and_Date < '2017-06-19 02:59:21.000' ] Output [ Status_of_Thing_Code , Date_and_Date , thing_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Intersect': 'Things(2)' and 'Things(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "school_player",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.School_ID IS NULL OR #1.School_ID = #2.School_ID ] Output [ #1.Location ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ school ] Output [ Location , School_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ player ] Output [ School_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'school(2)' and 'school(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "school_player",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.School_ID IS NULL OR #1.School_ID = #2.School_ID ] Output [ #1.Location ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ school ] Output [ Location , School_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ player ] Output [ School_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'school(2)' and 'school(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "device",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Shop_Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Shop_ID ] Output [ countstar AS Count_Star , Shop_Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Shop_ID = #2.Shop_ID ] Output [ #2.Shop_Name , #1.Shop_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ stock ] Output [ Shop_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ shop ] Output [ Shop_Name , Shop_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'shop_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "device",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Shop_Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Shop_ID ] Output [ countstar AS Count_Star , Shop_Name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Shop_ID = #2.Shop_ID ] Output [ #2.Shop_Name , #1.Shop_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ stock ] Output [ Shop_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ shop ] Output [ Shop_Name , Shop_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'shop_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "device",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.Shop_ID = #1.Shop_ID ] Output [ #1.Shop_Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ shop ] Output [ Shop_Name , Shop_ID ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ Shop_ID ] Output [ Shop_ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ stock ] Output [ Shop_ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'shop(2)' and 'shop(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "device",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.Shop_ID = #1.Shop_ID ] Output [ #1.Shop_Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ shop ] Output [ Shop_Name , Shop_ID ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ Shop_ID ] Output [ Shop_ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ stock ] Output [ Shop_ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'shop(2)' and 'shop(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "device",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Device_ID = #1.Device_ID ] Output [ #1.Carrier ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ device ] Output [ Device_ID , Carrier ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ stock ] Output [ Device_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'device(2)' and 'device(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "device",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Device_ID = #1.Device_ID ] Output [ #1.Carrier ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ device ] Output [ Device_ID , Carrier ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ stock ] Output [ Device_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'device(2)' and 'device(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "shop_membership",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Member_ID = #1.Member_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ member ] Output [ Name , Member_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ membership_register_branch ] Output [ Member_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'member(2)' and 'member(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "shop_membership",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Member_ID = #1.Member_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ member ] Output [ Name , Member_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ membership_register_branch ] Output [ Member_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'member(2)' and 'member(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "shop_membership",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Branch_ID IS NULL OR #1.Branch_ID = #2.Branch_ID ] Output [ #1.City , #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ branch ] Output [ Branch_ID , City , Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ membership_register_branch ] Output [ Branch_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'branch(3)' and 'branch(1)' (must have the same number of columns in total: 3 != 1)."
  },
  {
    "split": "train",
    "db_id": "shop_membership",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Branch_ID IS NULL OR #1.Branch_ID = #2.Branch_ID ] Output [ #1.City , #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ branch ] Output [ Branch_ID , City , Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ membership_register_branch ] Output [ Branch_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'branch(3)' and 'branch(1)' (must have the same number of columns in total: 3 != 1)."
  },
  {
    "split": "train",
    "db_id": "shop_membership",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.City = #2.City ] Output [ #1.City ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ branch ] Distinct [ true ] Output [ City ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ branch ] Predicate [ membership_amount > 100 ] Output [ membership_amount , City ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'branch(1)' and 'branch(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "shop_membership",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.City = #2.City ] Output [ #1.City ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ branch ] Distinct [ true ] Output [ City ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ branch ] Predicate [ membership_amount > 100 ] Output [ membership_amount , City ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'branch(1)' and 'branch(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "voter_2",
    "line_num": 5,
    "op": "Except",
    "qpl_line": "#5 = Except [ #3 , #4 ] Predicate [ #3.Fname = #4.Fname ] Output [ #3.Fname ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Vice_President_Vote = #2.StuID ] Distinct [ true ] Output [ #2.Fname ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Voting_record ] Output [ Vice_President_Vote ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Student ] Output [ Fname , StuID ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 4,
        "op": "Scan",
        "qpl_line": "#4 = Scan Table [ Student ] Predicate [ city_code = 'PIT' ] Distinct [ true ] Output [ Fname , city_code ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Except': 'Student(1)' and 'Student(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "voter_2",
    "line_num": 5,
    "op": "Except",
    "qpl_line": "#5 = Except [ #3 , #4 ] Predicate [ #3.Fname = #4.Fname ] Output [ #3.Fname ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Vice_President_Vote = #2.StuID ] Distinct [ true ] Output [ #2.Fname ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Voting_record ] Output [ Vice_President_Vote ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Student ] Output [ Fname , StuID ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 4,
        "op": "Scan",
        "qpl_line": "#4 = Scan Table [ Student ] Predicate [ city_code = 'PIT' ] Distinct [ true ] Output [ Fname , city_code ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Except': 'Student(1)' and 'Student(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "voter_2",
    "line_num": 5,
    "op": "Except",
    "qpl_line": "#5 = Except [ #3 , #4 ] Predicate [ #3.LName = #4.LName ] Output [ #3.LName ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.President_Vote = #2.StuID ] Distinct [ true ] Output [ #2.LName ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Voting_record ] Output [ President_Vote ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Student ] Output [ LName , StuID ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 4,
        "op": "Scan",
        "qpl_line": "#4 = Scan Table [ Student ] Predicate [ Advisor = 2192 ] Distinct [ true ] Output [ LName , Advisor ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Except': 'Student(1)' and 'Student(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "voter_2",
    "line_num": 5,
    "op": "Except",
    "qpl_line": "#5 = Except [ #3 , #4 ] Predicate [ #3.LName = #4.LName ] Output [ #3.LName ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.President_Vote = #2.StuID ] Distinct [ true ] Output [ #2.LName ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Voting_record ] Output [ President_Vote ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Student ] Output [ LName , StuID ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 4,
        "op": "Scan",
        "qpl_line": "#4 = Scan Table [ Student ] Predicate [ Advisor = 2192 ] Distinct [ true ] Output [ LName , Advisor ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Except': 'Student(1)' and 'Student(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "swimming",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.Country = #2.Country ] Output [ #1.Country ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ stadium ] Distinct [ true ] Output [ Country ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ stadium ] Predicate [ Opening_year > 2006 ] Output [ Opening_year , Country ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'stadium(1)' and 'stadium(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "swimming",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Stadium_ID IS NULL OR #1.ID = #2.Stadium_ID ] Output [ #1.name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ stadium ] Output [ name , ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ event ] Output [ Stadium_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'stadium(2)' and 'stadium(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "swimming",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.Swimmer_ID = #1.ID ] Output [ #1.name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ swimmer ] Output [ name , ID ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ Swimmer_ID ] Output [ Swimmer_ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ record ] Output [ Swimmer_ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'swimmer(2)' and 'swimmer(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "swimming",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name , Count_Star ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ Stadium_ID ] Output [ name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.ID = #4.Event_ID ] Output [ #3.name , #3.Stadium_ID ]",
            "children": [
              {
                "line_num": 3,
                "op": "Join",
                "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Stadium_ID = #2.ID ] Output [ #1.ID , #2.name , #1.Stadium_ID ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ event ] Output [ Stadium_ID , ID ]",
                    "children": []
                  },
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ stadium ] Output [ name , ID ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 4,
                "op": "Scan",
                "qpl_line": "#4 = Scan Table [ record ] Output [ Event_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #6: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "railway",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Railway_ID IS NULL OR #1.Railway_ID = #2.Railway_ID ] Output [ #1.ObjectNumber ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ railway ] Output [ ObjectNumber , Railway_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ train ] Output [ Railway_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'railway(2)' and 'railway(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "customers_and_products_contacts",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.customer_id = #1.customer_id ] Output [ #1.customer_phone , #1.customer_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Customers ] Output [ customer_id , customer_phone , customer_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Customer_Address_History ] Output [ customer_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Customers(3)' and 'Customers(1)' (must have the same number of columns in total: 3 != 1)."
  },
  {
    "split": "train",
    "db_id": "customers_and_products_contacts",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 2 ] Output [ customer_name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ customer_id ] Output [ countstar AS Count_Star , customer_name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #1.customer_id , #1.customer_name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Customers ] Predicate [ payment_method_code = 'Credit Card' ] Output [ customer_id , payment_method_code , customer_name ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Customer_Orders ] Output [ customer_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'customer_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "dorm_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.dormid IS NULL OR #1.dormid = #2.dormid ] Output [ #1.dorm_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Dorm ] Output [ dormid , dorm_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Has_amenity ] Output [ dormid ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Dorm(2)' and 'Dorm(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "dorm_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.dormid IS NULL OR #1.dormid = #2.dormid ] Output [ #1.dorm_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Dorm ] Output [ dormid , dorm_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Has_amenity ] Output [ dormid ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Dorm(2)' and 'Dorm(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "dorm_1",
    "line_num": 7,
    "op": "Join",
    "qpl_line": "#7 = Join [ #5 , #6 ] Predicate [ #5.stuid = #6.StuID ] Output [ #6.Fname , #6.LName ]",
    "children": [
      {
        "line_num": 5,
        "op": "Intersect",
        "qpl_line": "#5 = Intersect [ #1 , #4 ] Predicate [ #4.dormid = #1.dormid ] Output [ #1.stuid ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Lives_in ] Output [ dormid , stuid ]",
            "children": []
          },
          {
            "line_num": 4,
            "op": "Join",
            "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.amenid = #3.amenid ] Output [ #3.dormid ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Dorm_amenity ] Predicate [ amenity_name = 'TV Lounge' ] Output [ amenid , amenity_name ]",
                "children": []
              },
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ Has_amenity ] Output [ dormid , amenid ]",
                "children": []
              }
            ]
          }
        ]
      },
      {
        "line_num": 6,
        "op": "Scan",
        "qpl_line": "#6 = Scan Table [ Student ] Output [ LName , Fname , StuID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Intersect': 'Dorm(1), Student(1)' and 'Dorm(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "dorm_1",
    "line_num": 7,
    "op": "Join",
    "qpl_line": "#7 = Join [ #5 , #6 ] Predicate [ #5.stuid = #6.StuID ] Output [ #6.Fname , #6.LName ]",
    "children": [
      {
        "line_num": 5,
        "op": "Intersect",
        "qpl_line": "#5 = Intersect [ #1 , #4 ] Predicate [ #4.dormid = #1.dormid ] Output [ #1.stuid ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Lives_in ] Output [ dormid , stuid ]",
            "children": []
          },
          {
            "line_num": 4,
            "op": "Join",
            "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.amenid = #3.amenid ] Output [ #3.dormid ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Dorm_amenity ] Predicate [ amenity_name = 'TV Lounge' ] Output [ amenid , amenity_name ]",
                "children": []
              },
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ Has_amenity ] Output [ dormid , amenid ]",
                "children": []
              }
            ]
          }
        ]
      },
      {
        "line_num": 6,
        "op": "Scan",
        "qpl_line": "#6 = Scan Table [ Student ] Output [ LName , Fname , StuID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Intersect': 'Dorm(1), Student(1)' and 'Dorm(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "dorm_1",
    "line_num": 7,
    "op": "Join",
    "qpl_line": "#7 = Join [ #1 , #6 ] Predicate [ #6.stuid = #1.StuID ] Output [ #1.Age , #1.Fname ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Student ] Output [ Fname , StuID , Age ]",
        "children": []
      },
      {
        "line_num": 6,
        "op": "Except",
        "qpl_line": "#6 = Except [ #2 , #5 ] Predicate [ #2.dormid IS NULL OR #5.dormid IS NULL ] Output [ #2.stuid ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Lives_in ] Output [ dormid , stuid ]",
            "children": []
          },
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #4.amenid = #3.amenid ] Output [ #3.dormid ]",
            "children": [
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ Has_amenity ] Output [ dormid , amenid ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Scan",
                "qpl_line": "#4 = Scan Table [ Dorm_amenity ] Predicate [ amenity_name = 'TV Lounge' ] Output [ amenid , amenity_name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #6: Incompatible types for operator 'Except': 'Dorm(1), Student(1)' and 'Dorm(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "dorm_1",
    "line_num": 7,
    "op": "Join",
    "qpl_line": "#7 = Join [ #1 , #6 ] Predicate [ #6.stuid = #1.StuID ] Output [ #1.Age , #1.Fname ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Student ] Output [ Fname , StuID , Age ]",
        "children": []
      },
      {
        "line_num": 6,
        "op": "Except",
        "qpl_line": "#6 = Except [ #2 , #5 ] Predicate [ #2.dormid IS NULL OR #5.dormid IS NULL ] Output [ #2.stuid ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Lives_in ] Output [ dormid , stuid ]",
            "children": []
          },
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #4.amenid = #3.amenid ] Output [ #3.dormid ]",
            "children": [
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ Has_amenity ] Output [ dormid , amenid ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Scan",
                "qpl_line": "#4 = Scan Table [ Dorm_amenity ] Predicate [ amenity_name = 'TV Lounge' ] Output [ amenid , amenity_name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #6: Incompatible types for operator 'Except': 'Dorm(1), Student(1)' and 'Dorm(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "customer_complaints",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.customer_id = #1.customer_id ] Output [ #1.email_address , #1.phone_number ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Customers ] Output [ email_address , customer_id , phone_number ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Complaints ] Output [ customer_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Customers(3)' and 'Customers(1)' (must have the same number of columns in total: 3 != 1)."
  },
  {
    "split": "train",
    "db_id": "customer_complaints",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.customer_id = #1.customer_id ] Output [ #1.email_address , #1.phone_number ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Customers ] Output [ email_address , customer_id , phone_number ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Complaints ] Output [ customer_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Customers(3)' and 'Customers(1)' (must have the same number of columns in total: 3 != 1)."
  },
  {
    "split": "train",
    "db_id": "customer_complaints",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #1.product_price ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Products ] Output [ product_id , product_price ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Complaints ] Output [ product_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Products(2)' and 'Products(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "customer_complaints",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.product_id = #2.product_id ] Output [ #1.product_price ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Products ] Output [ product_id , product_price ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Complaints ] Output [ product_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Products(2)' and 'Products(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "customer_complaints",
    "line_num": 3,
    "op": "TopSort",
    "qpl_line": "#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ customer_type_code ] Output [ countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Customers ] Output [ customer_type_code ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #2: GroupBy column 'customer_type_code' not found in aggregate output: ['count_star']."
  },
  {
    "split": "train",
    "db_id": "customer_complaints",
    "line_num": 3,
    "op": "TopSort",
    "qpl_line": "#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ customer_type_code ] Output [ countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Customers ] Output [ customer_type_code ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #2: GroupBy column 'customer_type_code' not found in aggregate output: ['count_star']."
  },
  {
    "split": "train",
    "db_id": "workshop_paper",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.Submission_ID = #1.Submission_ID ] Output [ #1.Author ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ submission ] Output [ Submission_ID , Author ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ Submission_ID ] Output [ Submission_ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Acceptance ] Output [ Submission_ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'submission(2)' and 'submission(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "workshop_paper",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.Submission_ID = #1.Submission_ID ] Output [ #1.Author ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ submission ] Output [ Submission_ID , Author ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ Submission_ID ] Output [ Submission_ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Acceptance ] Output [ Submission_ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'submission(2)' and 'submission(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "tracking_share_transactions",
    "line_num": 5,
    "op": "Join",
    "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.transaction_id = #4.transaction_id ] Output [ #3.lot_details ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.transaction_id = #2.lot_id ] Output [ #2.lot_details , #1.transaction_id ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Transactions ] Predicate [ share_count < 50 ] Output [ transaction_id , share_count ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Lots ] Output [ lot_id , lot_details ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 4,
        "op": "Scan",
        "qpl_line": "#4 = Scan Table [ Transactions_Lots ] Output [ transaction_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Join': 'Transactions(2)' and 'Lots(2)'"
  },
  {
    "split": "train",
    "db_id": "tracking_share_transactions",
    "line_num": 5,
    "op": "Join",
    "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.transaction_id = #4.transaction_id ] Output [ #3.lot_details ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.transaction_id = #2.lot_id ] Output [ #2.lot_details , #1.transaction_id ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Transactions ] Predicate [ share_count > 100 AND transaction_type_code = 'PUR' ] Output [ transaction_id , share_count , transaction_type_code ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Lots ] Output [ lot_id , lot_details ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 4,
        "op": "Scan",
        "qpl_line": "#4 = Scan Table [ Transactions_Lots ] Output [ transaction_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Join': 'Transactions(2), Ref_Transaction_Types(1)' and 'Lots(2)'"
  },
  {
    "split": "train",
    "db_id": "customers_and_addresses",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Sum_order_quantity ASC ] Output [ Sum_order_quantity , payment_method ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ customer_name , payment_method ] Output [ SUM(order_quantity) AS Sum_order_quantity , payment_method ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.order_id = #4.order_id ] Output [ #1.order_quantity , #4.customer_name , #4.payment_method ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Order_Items ] Output [ order_quantity , order_id ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #3.payment_method , #2.order_id , #3.customer_name ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ Customers ] Output [ customer_id , payment_method , customer_name ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #6: GroupBy column 'customer_name' not found in aggregate output: ['sum_order_quantity', 'payment_method']."
  },
  {
    "split": "train",
    "db_id": "customers_and_addresses",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Sum_order_quantity ASC ] Output [ Sum_order_quantity , payment_method ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ customer_name , payment_method ] Output [ SUM(order_quantity) AS Sum_order_quantity , payment_method ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.order_id = #4.order_id ] Output [ #1.order_quantity , #4.customer_name , #4.payment_method ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Order_Items ] Output [ order_quantity , order_id ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.customer_id = #3.customer_id ] Output [ #3.payment_method , #2.order_id , #3.customer_name ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Customer_Orders ] Output [ customer_id , order_id ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ Customers ] Output [ customer_id , payment_method , customer_name ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #6: GroupBy column 'customer_name' not found in aggregate output: ['sum_order_quantity', 'payment_method']."
  },
  {
    "split": "train",
    "db_id": "music_4",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Artist_ID IS NULL OR #1.Artist_ID = #2.Artist_ID ] Output [ #1.Famous_Title ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ artist ] Output [ Artist_ID , Famous_Title ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ volume ] Output [ Artist_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'artist(2)' and 'artist(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "music_4",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Artist_ID IS NULL OR #1.Artist_ID = #2.Artist_ID ] Output [ #1.Famous_Title ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ artist ] Output [ Artist_ID , Famous_Title ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ volume ] Output [ Artist_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'artist(2)' and 'artist(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "roller_coaster",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 3,
        "op": "Except",
        "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Country_ID IS NULL OR #1.Country_ID = #2.Country_ID ] Output [ #1.Country_ID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ country ] Output [ Country_ID ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ roller_coaster ] Predicate [ Length > 3000.0 ] Output [ Country_ID , Length ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'country(1)' and 'country(1), roller_coaster(1)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "ship_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.Rank = #2.Rank ] Output [ #1.Rank ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ captain ] Distinct [ true ] Output [ Rank ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ captain ] Predicate [ Class = 'Third-rate ship of the line' ] Output [ Rank , Class ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'captain(1)' and 'captain(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "ship_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.Rank = #2.Rank ] Output [ #1.Rank ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ captain ] Distinct [ true ] Output [ Rank ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ captain ] Predicate [ Class = 'Third-rate ship of the line' ] Output [ Rank , Class ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'captain(1)' and 'captain(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "ship_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Ship_ID IS NULL OR #1.Ship_ID = #2.Ship_ID ] Output [ #1.Name , #1.Class ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Ship ] Output [ Name , Ship_ID , Class ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ captain ] Output [ Ship_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Ship(3)' and 'Ship(1)' (must have the same number of columns in total: 3 != 1)."
  },
  {
    "split": "train",
    "db_id": "ship_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Ship_ID IS NULL OR #1.Ship_ID = #2.Ship_ID ] Output [ #1.Name , #1.Class ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Ship ] Output [ Name , Ship_ID , Class ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ captain ] Output [ Ship_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Ship(3)' and 'Ship(1)' (must have the same number of columns in total: 3 != 1)."
  },
  {
    "split": "train",
    "db_id": "ship_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Ship_ID IS NULL OR #1.Ship_ID = #2.Ship_ID ] Output [ #1.Flag , #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Ship ] Output [ Flag , Name , Ship_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ captain ] Predicate [ Rank = 'Midshipman' ] Output [ Rank , Ship_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Ship(3)' and 'captain(1), Ship(1)' (must have the same number of columns in total: 3 != 2)."
  },
  {
    "split": "train",
    "db_id": "ship_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Ship_ID IS NULL OR #1.Ship_ID = #2.Ship_ID ] Output [ #1.Flag , #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Ship ] Output [ Flag , Name , Ship_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ captain ] Predicate [ Rank = 'Midshipman' ] Output [ Rank , Ship_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Ship(3)' and 'captain(1), Ship(1)' (must have the same number of columns in total: 3 != 2)."
  },
  {
    "split": "train",
    "db_id": "city_record",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Regional_Population , GDP ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Host_City ] Output [ countstar AS Count_Star , Regional_Population , GDP ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Host_City = #2.City_ID ] Output [ #2.GDP , #1.Host_City , #2.Regional_Population , #2.City_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ hosting_city ] Output [ Host_City ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ city ] Output [ Regional_Population , GDP , City_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'regional_population' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "city_record",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Regional_Population , GDP ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Host_City ] Output [ countstar AS Count_Star , Regional_Population , GDP ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Host_City = #2.City_ID ] Output [ #2.GDP , #1.Host_City , #2.Regional_Population , #2.City_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ hosting_city ] Output [ Host_City ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ city ] Output [ Regional_Population , GDP , City_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'regional_population' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "school_bus",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.Home_city = #2.Home_city ] Output [ #1.Home_city ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ driver ] Distinct [ true ] Output [ Home_city ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ driver ] Predicate [ Age > 40 ] Output [ Home_city , Age ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'driver(1)' and 'driver(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "school_bus",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Driver_ID = #1.Driver_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ driver ] Output [ Driver_ID , Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ school_bus ] Output [ Driver_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'driver(2)' and 'driver(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "school_bus",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.School_ID = #1.School_ID ] Output [ #1.School , #1.Type ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ school ] Output [ Type , School , School_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ school_bus ] Output [ School_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'school(3)' and 'school(1)' (must have the same number of columns in total: 3 != 1)."
  },
  {
    "split": "train",
    "db_id": "flight_company",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ name , id ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ id ] Output [ name , countstar AS Count_Star , id ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.company_id = #2.id ] Output [ #2.id , #2.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ flight ] Output [ company_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ operate_company ] Output [ name , id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "flight_company",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 3,
        "op": "Except",
        "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.airport_id IS NULL OR #1.id = #2.airport_id ] Output [ #1.id ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ airport ] Output [ id ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ flight ] Predicate [ Pilot = 'Thompson' ] Output [ Pilot , airport_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'airport(1)' and 'flight(1), airport(1)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "cre_Docs_and_Epenses",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.Document_ID = #2.Document_ID ] Output [ #1.Document_ID ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Documents ] Predicate [ Document_Type_Code = 'CV' ] Output [ Document_Type_Code , Document_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Documents_with_Expenses ] Output [ Document_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Ref_Document_Types(1), Documents(1)' and 'Documents(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "cre_Docs_and_Epenses",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.Document_ID = #2.Document_ID ] Output [ #1.Document_ID ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Documents ] Predicate [ Document_Type_Code = 'CV' ] Output [ Document_Type_Code , Document_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Documents_with_Expenses ] Output [ Document_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Ref_Document_Types(1), Documents(1)' and 'Documents(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "scientist_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Project = #1.Code ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Projects ] Output [ Code , Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ AssignedTo ] Output [ Project ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Projects(2)' and 'Projects(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "scientist_1",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Project = #1.Code ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Projects ] Output [ Code , Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ AssignedTo ] Output [ Project ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Projects(2)' and 'Projects(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "scientist_1",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.Scientist = #1.SSN ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Scientists ] Output [ SSN , Name ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ Scientist ] Output [ Scientist ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ AssignedTo ] Output [ Scientist ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'Scientists(2)' and 'Scientists(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "scientist_1",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.Scientist = #1.SSN ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Scientists ] Output [ SSN , Name ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ Scientist ] Output [ Scientist ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ AssignedTo ] Output [ Scientist ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'Scientists(2)' and 'Scientists(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "wine_1",
    "line_num": 11,
    "op": "Aggregate",
    "qpl_line": "#11 = Aggregate [ #10 ] Output [ AVG(Price) AS Avg_Price ]",
    "children": [
      {
        "line_num": 10,
        "op": "Except",
        "qpl_line": "#10 = Except [ #6 , #9 ] Predicate [ #9.Appelation = #6.Appelation ] Output [ #6.Price ]",
        "children": [
          {
            "line_num": 6,
            "op": "Except",
            "qpl_line": "#6 = Except [ #1 , #5 ] Predicate [ #1.Appelation IS NULL ] Output [ #1.Appelation , #1.Price ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ wine ] Output [ Price , Appelation ]",
                "children": []
              },
              {
                "line_num": 5,
                "op": "Top",
                "qpl_line": "#5 = Top [ #4 ] Rows [ 1 ] Output [ Appelation , County ]",
                "children": [
                  {
                    "line_num": 4,
                    "op": "Join",
                    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Appelation = #2.Appelation ] Output [ #2.Appelation , #2.County ]",
                    "children": [
                      {
                        "line_num": 2,
                        "op": "Scan",
                        "qpl_line": "#2 = Scan Table [ appellations ] Predicate [ County = 'Sonoma' ] Output [ Appelation , County ]",
                        "children": []
                      },
                      {
                        "line_num": 3,
                        "op": "Scan",
                        "qpl_line": "#3 = Scan Table [ wine ] Output [ Appelation ]",
                        "children": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "line_num": 9,
            "op": "Intersect",
            "qpl_line": "#9 = Intersect [ #7 , #8 ] Predicate [ #8.Appelation = #7.Appelation ] Output [ #7.Appelation ]",
            "children": [
              {
                "line_num": 7,
                "op": "Scan",
                "qpl_line": "#7 = Scan Table [ appellations ] Predicate [ County = 'Sonoma' ] Output [ Appelation , County ]",
                "children": []
              },
              {
                "line_num": 8,
                "op": "Scan",
                "qpl_line": "#8 = Scan Table [ wine ] Output [ Appelation ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #9: Incompatible types for operator 'Intersect': 'appellations(2)' and 'appellations(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "wine_1",
    "line_num": 11,
    "op": "Aggregate",
    "qpl_line": "#11 = Aggregate [ #10 ] Output [ AVG(Price) AS Avg_Price ]",
    "children": [
      {
        "line_num": 10,
        "op": "Except",
        "qpl_line": "#10 = Except [ #6 , #9 ] Predicate [ #9.Appelation = #6.Appelation ] Output [ #6.Price ]",
        "children": [
          {
            "line_num": 6,
            "op": "Except",
            "qpl_line": "#6 = Except [ #1 , #5 ] Predicate [ #1.Appelation IS NULL ] Output [ #1.Appelation , #1.Price ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ wine ] Output [ Price , Appelation ]",
                "children": []
              },
              {
                "line_num": 5,
                "op": "Top",
                "qpl_line": "#5 = Top [ #4 ] Rows [ 1 ] Output [ Appelation , County ]",
                "children": [
                  {
                    "line_num": 4,
                    "op": "Join",
                    "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.Appelation = #2.Appelation ] Output [ #2.Appelation , #2.County ]",
                    "children": [
                      {
                        "line_num": 2,
                        "op": "Scan",
                        "qpl_line": "#2 = Scan Table [ appellations ] Predicate [ County = 'Sonoma' ] Output [ Appelation , County ]",
                        "children": []
                      },
                      {
                        "line_num": 3,
                        "op": "Scan",
                        "qpl_line": "#3 = Scan Table [ wine ] Output [ Appelation ]",
                        "children": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "line_num": 9,
            "op": "Intersect",
            "qpl_line": "#9 = Intersect [ #7 , #8 ] Predicate [ #8.Appelation = #7.Appelation ] Output [ #7.Appelation ]",
            "children": [
              {
                "line_num": 7,
                "op": "Scan",
                "qpl_line": "#7 = Scan Table [ appellations ] Predicate [ County = 'Sonoma' ] Output [ Appelation , County ]",
                "children": []
              },
              {
                "line_num": 8,
                "op": "Scan",
                "qpl_line": "#8 = Scan Table [ wine ] Output [ Appelation ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #9: Incompatible types for operator 'Intersect': 'appellations(2)' and 'appellations(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "train_station",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.Location = #2.Location ] Output [ #1.Location ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ station ] Distinct [ true ] Output [ Location ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ station ] Predicate [ Number_of_Platforms >= 15 ] Output [ Location , Number_of_Platforms ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'station(1)' and 'station(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "train_station",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Station_ID = #1.Station_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ station ] Output [ Station_ID , Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ train_station ] Output [ Station_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'station(2)' and 'station(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "train_station",
    "line_num": 7,
    "op": "Join",
    "qpl_line": "#7 = Join [ #5 , #6 ] Predicate [ #5.Train_ID = #6.Train_ID ] Output [ #6.Name ]",
    "children": [
      {
        "line_num": 5,
        "op": "Except",
        "qpl_line": "#5 = Except [ #1 , #4 ] Predicate [ #4.Station_ID = #1.Station_ID ] Output [ #1.Train_ID ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ train_station ] Output [ Train_ID , Station_ID ]",
            "children": []
          },
          {
            "line_num": 4,
            "op": "Intersect",
            "qpl_line": "#4 = Intersect [ #2 , #3 ] Predicate [ #2.Station_ID = #3.Station_ID ] Output [ #2.Station_ID ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ station ] Predicate [ Location = 'London' ] Output [ Location , Station_ID ]",
                "children": []
              },
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ train_station ] Output [ Station_ID ]",
                "children": []
              }
            ]
          }
        ]
      },
      {
        "line_num": 6,
        "op": "Scan",
        "qpl_line": "#6 = Scan Table [ train ] Output [ Train_ID , Name ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Intersect': 'station(2)' and 'station(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "train",
    "db_id": "driving_school",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 2 ] Output [ last_name , first_name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ customer_id ] Output [ last_name , countstar AS Count_Star , first_name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.first_name , #1.customer_id , #2.last_name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Customer_Payments ] Output [ customer_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Customers ] Output [ last_name , customer_id , first_name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'last_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "driving_school",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 2 ] Output [ last_name , first_name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ customer_id ] Output [ last_name , countstar AS Count_Star , first_name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.customer_id = #2.customer_id ] Output [ #2.first_name , #1.customer_id , #2.last_name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Customer_Payments ] Output [ customer_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Customers ] Output [ last_name , customer_id , first_name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'last_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "activity_1",
    "line_num": 5,
    "op": "Join",
    "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.FacID = #4.FacID ] Distinct [ true ] Output [ #4.Lname ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Faculty_Participates_in ] Output [ actid , FacID ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Output [ #3.Lname , #3.FacID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Activity ] Predicate [ activity_name = 'Canoeing' OR activity_name = 'Kayaking' ] Output [ activity_name ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ Faculty ] Output [ Lname , FacID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Activity(1)' and 'Faculty(2)'"
  },
  {
    "split": "train",
    "db_id": "activity_1",
    "line_num": 5,
    "op": "Join",
    "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.FacID = #4.FacID ] Distinct [ true ] Output [ #4.Lname ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Faculty_Participates_in ] Output [ actid , FacID ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Output [ #3.Lname , #3.FacID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Activity ] Predicate [ activity_name = 'Canoeing' OR activity_name = 'Kayaking' ] Output [ activity_name ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ Faculty ] Output [ Lname , FacID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Join': 'Activity(1)' and 'Faculty(2)'"
  },
  {
    "split": "train",
    "db_id": "flight_4",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 3,
        "op": "Filter",
        "qpl_line": "#3 = Filter [ #2 ] Predicate [ Count_Star > 3 ] Output [ 1 AS One ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ city ] Output [ countstar AS Count_Star ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ airports ] Output [ city ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #2: GroupBy column 'city' not found in aggregate output: ['count_star']."
  },
  {
    "split": "train",
    "db_id": "flight_4",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 3,
        "op": "Filter",
        "qpl_line": "#3 = Filter [ #2 ] Predicate [ Count_Star > 3 ] Output [ 1 AS One ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ city ] Output [ countstar AS Count_Star ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ airports ] Output [ city ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #2: GroupBy column 'city' not found in aggregate output: ['count_star']."
  },
  {
    "split": "train",
    "db_id": "architecture",
    "line_num": 11,
    "op": "Union",
    "qpl_line": "#11 = Union [ #5 , #10 ] Output [ #5.name , #5.id , #5.gender ]",
    "children": [
      {
        "line_num": 5,
        "op": "Filter",
        "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star = 2 ] Output [ name , gender , id ]",
        "children": [
          {
            "line_num": 4,
            "op": "Aggregate",
            "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ id ] Output [ name , countstar AS Count_Star , gender , id ]",
            "children": [
              {
                "line_num": 3,
                "op": "Join",
                "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.architect_id ] Output [ #1.gender , #1.name , #1.id ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ architect ] Output [ name , gender , id ]",
                    "children": []
                  },
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ bridge ] Output [ architect_id ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "line_num": 10,
        "op": "Filter",
        "qpl_line": "#10 = Filter [ #9 ] Predicate [ Count_Star = 1 ] Output [ name , gender , id ]",
        "children": [
          {
            "line_num": 9,
            "op": "Aggregate",
            "qpl_line": "#9 = Aggregate [ #8 ] GroupBy [ id ] Output [ name , countstar AS Count_Star , gender , id ]",
            "children": [
              {
                "line_num": 8,
                "op": "Join",
                "qpl_line": "#8 = Join [ #6 , #7 ] Predicate [ #6.id = #7.architect_id ] Output [ #6.gender , #6.id , #6.name ]",
                "children": [
                  {
                    "line_num": 6,
                    "op": "Scan",
                    "qpl_line": "#6 = Scan Table [ architect ] Output [ name , gender , id ]",
                    "children": []
                  },
                  {
                    "line_num": 7,
                    "op": "Scan",
                    "qpl_line": "#7 = Scan Table [ mill ] Output [ architect_id ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "train",
    "db_id": "architecture",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 3,
        "op": "Except",
        "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.architect_id IS NULL OR #1.id = #2.architect_id ] Output [ #1.id ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ architect ] Output [ id ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ mill ] Predicate [ built_year < 1850 ] Output [ architect_id , built_year ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'architect(1)' and 'architect(1), mill(1)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "culture_company",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.Publisher = #2.Publisher ] Output [ #1.Publisher ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ book_club ] Distinct [ true ] Output [ Publisher ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ book_club ] Predicate [ Year = 1989 ] Output [ Publisher , Year ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'book_club(1)' and 'book_club(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "train",
    "db_id": "culture_company",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #1.Publisher = #2.Publisher ] Output [ #1.Publisher ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ book_club ] Distinct [ true ] Output [ Publisher ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ book_club ] Predicate [ Year = 1989 ] Output [ Publisher , Year ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'book_club(1)' and 'book_club(2)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "validation",
    "db_id": "concert_singer",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Stadium_ID ] Output [ Name , countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Stadium_ID = #2.Stadium_ID ] Output [ #1.Stadium_ID , #2.Name ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ concert ] Output [ Stadium_ID ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ stadium ] Output [ Name , Stadium_ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "concert_singer",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Stadium_ID ] Output [ Name , countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Stadium_ID = #2.Stadium_ID ] Output [ #1.Stadium_ID , #2.Name ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ concert ] Output [ Stadium_ID ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ stadium ] Output [ Name , Stadium_ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "concert_singer",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Capacity , Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Stadium_ID ] Output [ Capacity , Name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Stadium_ID = #2.Stadium_ID ] Output [ #2.Stadium_ID , #2.Capacity , #2.Name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ concert ] Predicate [ Year >= 2014 ] Output [ Year , Stadium_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ stadium ] Output [ Capacity , Stadium_ID , Name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'capacity' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "concert_singer",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Capacity , Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Stadium_ID ] Output [ Capacity , Name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Stadium_ID = #2.Stadium_ID ] Output [ #2.Stadium_ID , #2.Capacity , #2.Name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ concert ] Predicate [ Year > 2013 ] Output [ Year , Stadium_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ stadium ] Output [ Capacity , Stadium_ID , Name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'capacity' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "concert_singer",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Stadium_ID IS NULL OR #1.Stadium_ID = #2.Stadium_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ stadium ] Output [ Name , Stadium_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ concert ] Output [ Stadium_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'stadium(2)' and 'stadium(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "concert_singer",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Stadium_ID IS NULL OR #1.Stadium_ID = #2.Stadium_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ stadium ] Output [ Name , Stadium_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ concert ] Output [ Stadium_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'stadium(2)' and 'stadium(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "pets_1",
    "line_num": 7,
    "op": "Except",
    "qpl_line": "#7 = Except [ #1 , #6 ] Predicate [ #1.StuID = #6.StuID ] Output [ #1.Major , #1.Age ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Student ] Output [ StuID , Major , Age ]",
        "children": []
      },
      {
        "line_num": 6,
        "op": "Intersect",
        "qpl_line": "#6 = Intersect [ #2 , #5 ] Predicate [ #5.StuID = #2.StuID ] Output [ #2.StuID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Student ] Output [ StuID ]",
            "children": []
          },
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.PetID = #4.PetID ] Output [ #4.StuID ]",
            "children": [
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ Pets ] Predicate [ PetType = 'cat' ] Output [ PetType , PetID ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Scan",
                "qpl_line": "#4 = Scan Table [ Has_Pet ] Output [ StuID , PetID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #7: Incompatible types for operator 'Except': 'Student(3)' and 'Student(1)' (must have the same number of columns in total: 3 != 1)."
  },
  {
    "split": "validation",
    "db_id": "pets_1",
    "line_num": 7,
    "op": "Except",
    "qpl_line": "#7 = Except [ #1 , #6 ] Predicate [ #1.StuID = #6.StuID ] Output [ #1.Major , #1.Age ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Student ] Output [ StuID , Major , Age ]",
        "children": []
      },
      {
        "line_num": 6,
        "op": "Intersect",
        "qpl_line": "#6 = Intersect [ #2 , #5 ] Predicate [ #5.StuID = #2.StuID ] Output [ #2.StuID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Student ] Output [ StuID ]",
            "children": []
          },
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.PetID = #4.PetID ] Output [ #4.StuID ]",
            "children": [
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ Pets ] Predicate [ PetType = 'cat' ] Output [ PetType , PetID ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Scan",
                "qpl_line": "#4 = Scan Table [ Has_Pet ] Output [ StuID , PetID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #7: Incompatible types for operator 'Except': 'Student(3)' and 'Student(1)' (must have the same number of columns in total: 3 != 1)."
  },
  {
    "split": "validation",
    "db_id": "pets_1",
    "line_num": 11,
    "op": "Except",
    "qpl_line": "#11 = Except [ #5 , #10 ] Predicate [ #5.StuID = #10.StuID ] Output [ #5.Age , #5.Fname ]",
    "children": [
      {
        "line_num": 5,
        "op": "Join",
        "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #4.Fname , #4.StuID , #4.Age ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.PetID = #2.PetID ] Output [ #2.StuID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Pets ] Predicate [ PetType = 'dog' ] Output [ PetType , PetID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Has_Pet ] Output [ StuID , PetID ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 4,
            "op": "Scan",
            "qpl_line": "#4 = Scan Table [ Student ] Output [ StuID , Fname , Age ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 10,
        "op": "Intersect",
        "qpl_line": "#10 = Intersect [ #6 , #9 ] Predicate [ #9.StuID = #6.StuID ] Output [ #6.StuID ]",
        "children": [
          {
            "line_num": 6,
            "op": "Scan",
            "qpl_line": "#6 = Scan Table [ Student ] Output [ StuID ]",
            "children": []
          },
          {
            "line_num": 9,
            "op": "Join",
            "qpl_line": "#9 = Join [ #7 , #8 ] Predicate [ #7.PetID = #8.PetID ] Output [ #8.StuID ]",
            "children": [
              {
                "line_num": 7,
                "op": "Scan",
                "qpl_line": "#7 = Scan Table [ Pets ] Predicate [ PetType = 'cat' ] Output [ PetType , PetID ]",
                "children": []
              },
              {
                "line_num": 8,
                "op": "Scan",
                "qpl_line": "#8 = Scan Table [ Has_Pet ] Output [ StuID , PetID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #11: Incompatible types for operator 'Except': 'Student(3)' and 'Student(1)' (must have the same number of columns in total: 3 != 1)."
  },
  {
    "split": "validation",
    "db_id": "pets_1",
    "line_num": 11,
    "op": "Except",
    "qpl_line": "#11 = Except [ #5 , #10 ] Predicate [ #5.StuID = #10.StuID ] Output [ #5.Age , #5.Fname ]",
    "children": [
      {
        "line_num": 5,
        "op": "Join",
        "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.StuID = #4.StuID ] Output [ #4.Fname , #4.StuID , #4.Age ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.PetID = #2.PetID ] Output [ #2.StuID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Pets ] Predicate [ PetType = 'dog' ] Output [ PetType , PetID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Has_Pet ] Output [ StuID , PetID ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 4,
            "op": "Scan",
            "qpl_line": "#4 = Scan Table [ Student ] Output [ StuID , Fname , Age ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 10,
        "op": "Intersect",
        "qpl_line": "#10 = Intersect [ #6 , #9 ] Predicate [ #9.StuID = #6.StuID ] Output [ #6.StuID ]",
        "children": [
          {
            "line_num": 6,
            "op": "Scan",
            "qpl_line": "#6 = Scan Table [ Student ] Output [ StuID ]",
            "children": []
          },
          {
            "line_num": 9,
            "op": "Join",
            "qpl_line": "#9 = Join [ #7 , #8 ] Predicate [ #7.PetID = #8.PetID ] Output [ #8.StuID ]",
            "children": [
              {
                "line_num": 7,
                "op": "Scan",
                "qpl_line": "#7 = Scan Table [ Pets ] Predicate [ PetType = 'cat' ] Output [ PetType , PetID ]",
                "children": []
              },
              {
                "line_num": 8,
                "op": "Scan",
                "qpl_line": "#8 = Scan Table [ Has_Pet ] Output [ StuID , PetID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #11: Incompatible types for operator 'Except': 'Student(3)' and 'Student(1)' (must have the same number of columns in total: 3 != 1)."
  },
  {
    "split": "validation",
    "db_id": "pets_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] Output [ AVG(Age) AS Avg_Age ]",
    "children": [
      {
        "line_num": 3,
        "op": "Except",
        "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.StuID IS NULL OR #1.StuID = #2.StuID ] Output [ #1.Age ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Student ] Output [ StuID , Age ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Has_Pet ] Output [ StuID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Student(2)' and 'Student(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "pets_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] Output [ AVG(Age) AS Avg_Age ]",
    "children": [
      {
        "line_num": 3,
        "op": "Except",
        "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.StuID IS NULL OR #1.StuID = #2.StuID ] Output [ #1.Age ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Student ] Output [ StuID , Age ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Has_Pet ] Output [ StuID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Student(2)' and 'Student(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "car_1",
    "line_num": 11,
    "op": "Union",
    "qpl_line": "#11 = Union [ #5 , #10 ] Output [ #5.CountryId , #5.CountryName ]",
    "children": [
      {
        "line_num": 5,
        "op": "Filter",
        "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 3 ] Output [ CountryId , CountryName ]",
        "children": [
          {
            "line_num": 4,
            "op": "Aggregate",
            "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ CountryId ] Output [ CountryId , countstar AS Count_Star , CountryName ]",
            "children": [
              {
                "line_num": 3,
                "op": "Join",
                "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.CountryId = #2.Country ] Output [ #1.CountryId , #1.CountryName ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ countries ] Output [ CountryId , CountryName ]",
                    "children": []
                  },
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ car_makers ] Output [ Country ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "line_num": 10,
        "op": "Join",
        "qpl_line": "#10 = Join [ #8 , #9 ] Predicate [ #8.Country = #9.CountryId ] Output [ #9.CountryId , #9.CountryName ]",
        "children": [
          {
            "line_num": 8,
            "op": "Join",
            "qpl_line": "#8 = Join [ #6 , #7 ] Predicate [ #6.Maker = #7.Id ] Output [ #7.Country ]",
            "children": [
              {
                "line_num": 6,
                "op": "Scan",
                "qpl_line": "#6 = Scan Table [ model_list ] Predicate [ Model = 'fiat' ] Output [ Model , Maker ]",
                "children": []
              },
              {
                "line_num": 7,
                "op": "Scan",
                "qpl_line": "#7 = Scan Table [ car_makers ] Output [ Country , Id ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 9,
            "op": "Scan",
            "qpl_line": "#9 = Scan Table [ countries ] Output [ CountryId , CountryName ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'countryname' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "car_1",
    "line_num": 11,
    "op": "Union",
    "qpl_line": "#11 = Union [ #5 , #10 ] Output [ #5.CountryId , #5.CountryName ]",
    "children": [
      {
        "line_num": 5,
        "op": "Filter",
        "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 3 ] Output [ CountryId , CountryName ]",
        "children": [
          {
            "line_num": 4,
            "op": "Aggregate",
            "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ CountryId ] Output [ CountryId , countstar AS Count_Star , CountryName ]",
            "children": [
              {
                "line_num": 3,
                "op": "Join",
                "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.CountryId = #2.Country ] Output [ #1.CountryId , #1.CountryName ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ countries ] Output [ CountryId , CountryName ]",
                    "children": []
                  },
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ car_makers ] Output [ Country ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "line_num": 10,
        "op": "Join",
        "qpl_line": "#10 = Join [ #8 , #9 ] Predicate [ #8.Country = #9.CountryId ] Output [ #9.CountryId , #9.CountryName ]",
        "children": [
          {
            "line_num": 8,
            "op": "Join",
            "qpl_line": "#8 = Join [ #6 , #7 ] Predicate [ #6.Maker = #7.Id ] Output [ #7.Country ]",
            "children": [
              {
                "line_num": 6,
                "op": "Scan",
                "qpl_line": "#6 = Scan Table [ model_list ] Predicate [ Model = 'fiat' ] Output [ Model , Maker ]",
                "children": []
              },
              {
                "line_num": 7,
                "op": "Scan",
                "qpl_line": "#7 = Scan Table [ car_makers ] Output [ Country , Id ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 9,
            "op": "Scan",
            "qpl_line": "#9 = Scan Table [ countries ] Output [ CountryId , CountryName ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'countryname' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "flight_2",
    "line_num": 6,
    "op": "TopSort",
    "qpl_line": "#6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Abbreviation , Country , Count_Star ]",
    "children": [
      {
        "line_num": 5,
        "op": "Aggregate",
        "qpl_line": "#5 = Aggregate [ #4 ] GroupBy [ Abbreviation , Country , Airline ] Output [ countstar AS Count_Star , Abbreviation , Country ]",
        "children": [
          {
            "line_num": 4,
            "op": "Join",
            "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.Airline = #3.uid ] Output [ #3.Country , #3.Abbreviation , #2.Count_Star , #3.Airline ]",
            "children": [
              {
                "line_num": 2,
                "op": "Aggregate",
                "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ Airline ] Output [ Airline , countstar AS Count_Star ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ flights ] Output [ Airline ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ airlines ] Output [ Airline , Abbreviation , uid , Country ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #5: GroupBy column 'airline' not found in aggregate output: ['count_star', 'abbreviation', 'country']."
  },
  {
    "split": "validation",
    "db_id": "flight_2",
    "line_num": 6,
    "op": "TopSort",
    "qpl_line": "#6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Abbreviation , Country , Count_Star ]",
    "children": [
      {
        "line_num": 5,
        "op": "Aggregate",
        "qpl_line": "#5 = Aggregate [ #4 ] GroupBy [ Abbreviation , Country , Airline ] Output [ countstar AS Count_Star , Abbreviation , Country ]",
        "children": [
          {
            "line_num": 4,
            "op": "Join",
            "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.Airline = #3.uid ] Output [ #3.Country , #3.Abbreviation , #2.Count_Star , #3.Airline ]",
            "children": [
              {
                "line_num": 2,
                "op": "Aggregate",
                "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ Airline ] Output [ Airline , countstar AS Count_Star ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ flights ] Output [ Airline ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ airlines ] Output [ Airline , Abbreviation , uid , Country ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #5: GroupBy column 'airline' not found in aggregate output: ['count_star', 'abbreviation', 'country']."
  },
  {
    "split": "validation",
    "db_id": "flight_2",
    "line_num": 5,
    "op": "Except",
    "qpl_line": "#5 = Except [ #1 , #4 ] ExceptColumns [ #1.AirportCode ] Output [ #1.AirportName ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ airports ] Output [ AirportCode , AirportName ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Union",
        "qpl_line": "#4 = Union [ #2 , #3 ] Output [ #2.AirportCode ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ flights ] Output [ SourceAirport AS AirportCode ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ flights ] Output [ DestAirport AS AirportCode ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Except': 'airports(2)' and 'airports(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "flight_2",
    "line_num": 5,
    "op": "Except",
    "qpl_line": "#5 = Except [ #1 , #4 ] ExceptColumns [ #1.AirportCode ] Output [ #1.AirportName ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ airports ] Output [ AirportCode , AirportName ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Union",
        "qpl_line": "#4 = Union [ #2 , #3 ] Output [ #2.AirportCode ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ flights ] Output [ SourceAirport AS AirportCode ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ flights ] Output [ DestAirport AS AirportCode ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Except': 'airports(2)' and 'airports(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "employee_hire_evaluation",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.Employee_ID = #1.Employee_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ employee ] Output [ Name , Employee_ID ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ Employee_ID ] Output [ Employee_ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ evaluation ] Output [ Employee_ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'employee(2)' and 'employee(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "employee_hire_evaluation",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.Employee_ID = #1.Employee_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ employee ] Output [ Name , Employee_ID ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ Employee_ID ] Output [ Employee_ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ evaluation ] Output [ Employee_ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'employee(2)' and 'employee(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "employee_hire_evaluation",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Name , Count_Star ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Shop_ID ] Output [ Name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Shop_ID = #2.Shop_ID ] Output [ #1.Shop_ID , #2.Name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ hiring ] Output [ Shop_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ shop ] Output [ Name , Shop_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "employee_hire_evaluation",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Name , Count_Star ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Shop_ID ] Output [ Name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.Shop_ID = #2.Shop_ID ] Output [ #1.Shop_ID , #2.Name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ hiring ] Output [ Shop_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ shop ] Output [ Name , Shop_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "employee_hire_evaluation",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Shop_ID IS NULL OR #1.Shop_ID = #2.Shop_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ shop ] Output [ Name , Shop_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ hiring ] Output [ Shop_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'shop(2)' and 'shop(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "employee_hire_evaluation",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Shop_ID IS NULL OR #1.Shop_ID = #2.Shop_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ shop ] Output [ Name , Shop_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ hiring ] Output [ Shop_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'shop(2)' and 'shop(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "course_teach",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Teacher_ID = #1.Teacher_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ teacher ] Output [ Name , Teacher_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ course_arrange ] Output [ Teacher_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'teacher(2)' and 'teacher(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "course_teach",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Teacher_ID = #1.Teacher_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ teacher ] Output [ Name , Teacher_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ course_arrange ] Output [ Teacher_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'teacher(2)' and 'teacher(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "museum_visit",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.Museum_ID = #1.Museum_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ museum ] Output [ Name , Museum_ID ]",
        "children": []
      },
      {
        "line_num": 3,
        "op": "Aggregate",
        "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ Museum_ID ] Output [ Museum_ID ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ visit ] Output [ Museum_ID ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'museum(2)' and 'museum(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "battle_death",
    "line_num": 7,
    "op": "Filter",
    "qpl_line": "#7 = Filter [ #6 ] Predicate [ Sum_killed > 10 ] Output [ name , id ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ id ] Output [ SUM(killed) AS Sum_killed , name , id ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.id = #4.caused_by_ship_id ] Output [ #3.id , #3.name , #4.killed ]",
            "children": [
              {
                "line_num": 3,
                "op": "Join",
                "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.lost_in_battle = #2.id ] Output [ #2.id , #2.name ]",
                "children": [
                  {
                    "line_num": 1,
                    "op": "Scan",
                    "qpl_line": "#1 = Scan Table [ ship ] Output [ lost_in_battle , id ]",
                    "children": []
                  },
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ battle ] Output [ name , id ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 4,
                "op": "Scan",
                "qpl_line": "#4 = Scan Table [ death ] Output [ caused_by_ship_id , killed ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Join': 'battle(2)' and 'ship(1), death(1)'"
  },
  {
    "split": "validation",
    "db_id": "battle_death",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]",
    "children": [
      {
        "line_num": 3,
        "op": "Except",
        "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.lost_in_battle IS NULL OR #1.id = #2.lost_in_battle ] Output [ #1.id ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ battle ] Output [ id ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ ship ] Predicate [ tonnage = '225' ] Output [ tonnage , lost_in_battle ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'battle(1)' and 'ship(1), battle(1)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "validation",
    "db_id": "student_transcripts_tracking",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star <= 2 ] Output [ course_id , course_name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ course_id ] Output [ countstar AS Count_Star , course_id , course_name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.course_id = #2.course_id ] Output [ #2.course_name , #2.course_id ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Sections ] Output [ course_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Courses ] Output [ course_id , course_name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'course_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "student_transcripts_tracking",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star <= 2 ] Output [ course_id , course_name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ course_id ] Output [ countstar AS Count_Star , course_id , course_name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.course_id = #2.course_id ] Output [ #2.course_name , #2.course_id ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Sections ] Output [ course_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Courses ] Output [ course_id , course_name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'course_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "student_transcripts_tracking",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.semester_id = #1.semester_id ] Output [ #1.semester_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Semesters ] Output [ semester_name , semester_id ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Student_Enrolment ] Output [ semester_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Semesters(2)' and 'Semesters(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "student_transcripts_tracking",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.semester_id = #1.semester_id ] Output [ #1.semester_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Semesters ] Output [ semester_name , semester_id ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Student_Enrolment ] Output [ semester_id ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'Semesters(2)' and 'Semesters(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "tvshow",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Channel = #1.id ] Output [ #1.id ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ TV_Channel ] Output [ id ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Directed_by , Channel ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'TV_Channel(1)' and 'Cartoon(1), TV_Channel(1)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "validation",
    "db_id": "tvshow",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Channel = #1.id ] Output [ #1.id ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ TV_Channel ] Output [ id ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Directed_by , Channel ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'TV_Channel(1)' and 'Cartoon(1), TV_Channel(1)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "validation",
    "db_id": "poker_player",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.People_ID IS NULL OR #1.People_ID = #2.People_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ people ] Output [ Name , People_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ poker_player ] Output [ People_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'people(2)' and 'people(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "poker_player",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.People_ID IS NULL OR #1.People_ID = #2.People_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ people ] Output [ Name , People_ID ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ poker_player ] Output [ People_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'people(2)' and 'people(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "voter_1",
    "line_num": 11,
    "op": "Intersect",
    "qpl_line": "#11 = Intersect [ #5 , #10 ] Predicate [ #5.area_code = #10.area_code ] Output [ #5.area_code ]",
    "children": [
      {
        "line_num": 5,
        "op": "Intersect",
        "qpl_line": "#5 = Intersect [ #1 , #4 ] Predicate [ #4.state = #1.state ] Output [ #1.area_code ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ AREA_CODE_STATE ] Output [ area_code , state ]",
            "children": []
          },
          {
            "line_num": 4,
            "op": "Join",
            "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.contestant_number = #3.contestant_number ] Output [ #3.state ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ CONTESTANTS ] Predicate [ contestant_name = 'Tabatha Gehling' ] Output [ contestant_name , contestant_number ]",
                "children": []
              },
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ VOTES ] Output [ contestant_number , state ]",
                "children": []
              }
            ]
          }
        ]
      },
      {
        "line_num": 10,
        "op": "Join",
        "qpl_line": "#10 = Join [ #8 , #9 ] Predicate [ #8.state = #9.state ] Output [ #9.area_code ]",
        "children": [
          {
            "line_num": 8,
            "op": "Join",
            "qpl_line": "#8 = Join [ #6 , #7 ] Predicate [ #6.contestant_number = #7.contestant_number ] Output [ #7.state ]",
            "children": [
              {
                "line_num": 6,
                "op": "Scan",
                "qpl_line": "#6 = Scan Table [ CONTESTANTS ] Predicate [ contestant_name = 'Kelly Clauss' ] Output [ contestant_name , contestant_number ]",
                "children": []
              },
              {
                "line_num": 7,
                "op": "Scan",
                "qpl_line": "#7 = Scan Table [ VOTES ] Output [ contestant_number , state ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 9,
            "op": "Scan",
            "qpl_line": "#9 = Scan Table [ AREA_CODE_STATE ] Output [ area_code , state ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Intersect': 'AREA_CODE_STATE(2)' and 'AREA_CODE_STATE(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "world_1",
    "line_num": 7,
    "op": "Aggregate",
    "qpl_line": "#7 = Aggregate [ #6 ] Output [ AVG(LifeExpectancy) AS Avg_LifeExpectancy ]",
    "children": [
      {
        "line_num": 6,
        "op": "Except",
        "qpl_line": "#6 = Except [ #1 , #5 ] Predicate [ #1.Name = #5.Name ] Output [ #1.LifeExpectancy ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ country ] Output [ Name , LifeExpectancy ]",
            "children": []
          },
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.CountryCode = #4.Code ] Output [ #4.Name ]",
            "children": [
              {
                "line_num": 3,
                "op": "Filter",
                "qpl_line": "#3 = Filter [ #2 ] Predicate [ IsOfficial = 'T' ] Output [ CountryCode ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ countrylanguage ] Predicate [ Language = 'English' ] Output [ Language , IsOfficial , CountryCode ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 4,
                "op": "Scan",
                "qpl_line": "#4 = Scan Table [ country ] Output [ Name , Code ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #6: Incompatible types for operator 'Except': 'country(2)' and 'country(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "world_1",
    "line_num": 7,
    "op": "Aggregate",
    "qpl_line": "#7 = Aggregate [ #6 ] Output [ AVG(LifeExpectancy) AS Avg_LifeExpectancy ]",
    "children": [
      {
        "line_num": 6,
        "op": "Except",
        "qpl_line": "#6 = Except [ #1 , #5 ] Predicate [ #1.Name = #5.Name ] Output [ #1.LifeExpectancy ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ country ] Output [ Name , LifeExpectancy ]",
            "children": []
          },
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #3 , #4 ] Predicate [ #3.CountryCode = #4.Code ] Output [ #4.Name ]",
            "children": [
              {
                "line_num": 3,
                "op": "Filter",
                "qpl_line": "#3 = Filter [ #2 ] Predicate [ IsOfficial = 'T' ] Output [ CountryCode ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ countrylanguage ] Predicate [ Language = 'English' ] Output [ Language , IsOfficial , CountryCode ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 4,
                "op": "Scan",
                "qpl_line": "#4 = Scan Table [ country ] Output [ Name , Code ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #6: Incompatible types for operator 'Except': 'country(2)' and 'country(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "world_1",
    "line_num": 6,
    "op": "Aggregate",
    "qpl_line": "#6 = Aggregate [ #5 ] Output [ SUM(Population) AS Sum_Population ]",
    "children": [
      {
        "line_num": 5,
        "op": "Except",
        "qpl_line": "#5 = Except [ #1 , #4 ] Predicate [ #1.Name = #4.Name ] Output [ #1.Population ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ country ] Output [ Name , Population ]",
            "children": []
          },
          {
            "line_num": 4,
            "op": "Join",
            "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.CountryCode = #3.Code ] Output [ #3.Name ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ countrylanguage ] Predicate [ Language = 'English' ] Output [ Language , CountryCode ]",
                "children": []
              },
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ country ] Output [ Name , Code ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Except': 'country(2)' and 'country(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "world_1",
    "line_num": 6,
    "op": "Aggregate",
    "qpl_line": "#6 = Aggregate [ #5 ] Output [ SUM(Population) AS Sum_Population ]",
    "children": [
      {
        "line_num": 5,
        "op": "Except",
        "qpl_line": "#5 = Except [ #1 , #4 ] Predicate [ #1.Name = #4.Name ] Output [ #1.Population ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ country ] Output [ Name , Population ]",
            "children": []
          },
          {
            "line_num": 4,
            "op": "Join",
            "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.CountryCode = #3.Code ] Output [ #3.Name ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ countrylanguage ] Predicate [ Language = 'English' ] Output [ Language , CountryCode ]",
                "children": []
              },
              {
                "line_num": 3,
                "op": "Scan",
                "qpl_line": "#3 = Scan Table [ country ] Output [ Name , Code ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Except': 'country(2)' and 'country(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "world_1",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #2 , #3 ] Predicate [ #2.CountryCode = #3.CountryCode ] Output [ #2.CountryCode ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ CountryCode ] Output [ CountryCode ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ countrylanguage ] Output [ CountryCode ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ countrylanguage ] Predicate [ Language = 'English' ] Output [ Language , CountryCode ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'country(1)' and 'countrylanguage(1), country(1)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "validation",
    "db_id": "world_1",
    "line_num": 4,
    "op": "Except",
    "qpl_line": "#4 = Except [ #2 , #3 ] Predicate [ #2.CountryCode = #3.CountryCode ] Output [ #2.CountryCode ]",
    "children": [
      {
        "line_num": 2,
        "op": "Aggregate",
        "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ CountryCode ] Output [ CountryCode ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ countrylanguage ] Output [ CountryCode ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 3,
        "op": "Scan",
        "qpl_line": "#3 = Scan Table [ countrylanguage ] Predicate [ Language = 'English' ] Output [ Language , CountryCode ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'country(1)' and 'countrylanguage(1), country(1)' (must have the same number of columns in total: 1 != 2)."
  },
  {
    "split": "validation",
    "db_id": "world_1",
    "line_num": 9,
    "op": "Join",
    "qpl_line": "#9 = Join [ #7 , #8 ] Predicate [ #7.Code = #8.CountryCode ] Distinct [ true ] Output [ #8.Name ]",
    "children": [
      {
        "line_num": 7,
        "op": "Except",
        "qpl_line": "#7 = Except [ #2 , #6 ] Predicate [ #2.Name = #6.Name ] Output [ #2.Code ]",
        "children": [
          {
            "line_num": 2,
            "op": "Filter",
            "qpl_line": "#2 = Filter [ #1 ] Predicate [ Continent = 'Europe' ] Output [ Name , Code ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ country ] Output [ Name , Code , Continent ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 6,
            "op": "Join",
            "qpl_line": "#6 = Join [ #4 , #5 ] Predicate [ #4.CountryCode = #5.Code ] Output [ #5.Name ]",
            "children": [
              {
                "line_num": 4,
                "op": "Filter",
                "qpl_line": "#4 = Filter [ #3 ] Predicate [ IsOfficial = 'T' ] Output [ CountryCode ]",
                "children": [
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ countrylanguage ] Predicate [ Language = 'English' ] Output [ Language , IsOfficial , CountryCode ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 5,
                "op": "Scan",
                "qpl_line": "#5 = Scan Table [ country ] Output [ Name , Code ]",
                "children": []
              }
            ]
          }
        ]
      },
      {
        "line_num": 8,
        "op": "Scan",
        "qpl_line": "#8 = Scan Table [ city ] Output [ Name , CountryCode ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #7: Incompatible types for operator 'Except': 'country(2)' and 'country(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "world_1",
    "line_num": 9,
    "op": "Join",
    "qpl_line": "#9 = Join [ #7 , #8 ] Predicate [ #7.Code = #8.CountryCode ] Distinct [ true ] Output [ #8.Name ]",
    "children": [
      {
        "line_num": 7,
        "op": "Except",
        "qpl_line": "#7 = Except [ #2 , #6 ] Predicate [ #2.Name = #6.Name ] Output [ #2.Code ]",
        "children": [
          {
            "line_num": 2,
            "op": "Filter",
            "qpl_line": "#2 = Filter [ #1 ] Predicate [ Continent = 'Europe' ] Output [ Name , Code ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ country ] Output [ Name , Code , Continent ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 6,
            "op": "Join",
            "qpl_line": "#6 = Join [ #4 , #5 ] Predicate [ #4.CountryCode = #5.Code ] Output [ #5.Name ]",
            "children": [
              {
                "line_num": 4,
                "op": "Filter",
                "qpl_line": "#4 = Filter [ #3 ] Predicate [ IsOfficial = 'T' ] Output [ CountryCode ]",
                "children": [
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ countrylanguage ] Predicate [ Language = 'English' ] Output [ Language , IsOfficial , CountryCode ]",
                    "children": []
                  }
                ]
              },
              {
                "line_num": 5,
                "op": "Scan",
                "qpl_line": "#5 = Scan Table [ country ] Output [ Name , Code ]",
                "children": []
              }
            ]
          }
        ]
      },
      {
        "line_num": 8,
        "op": "Scan",
        "qpl_line": "#8 = Scan Table [ city ] Output [ Name , CountryCode ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #7: Incompatible types for operator 'Except': 'country(2)' and 'country(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "world_1",
    "line_num": 2,
    "op": "Aggregate",
    "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ CountryCode ] Output [ countstar AS Count_Star , MAX(Percentage) AS Max_Percentage ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ countrylanguage ] Predicate [ Language = 'Spanish' ] Output [ Language , Percentage , CountryCode ]",
        "children": []
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #2: GroupBy column 'countrycode' not found in aggregate output: ['count_star', 'max_percentage']."
  },
  {
    "split": "validation",
    "db_id": "world_1",
    "line_num": 2,
    "op": "Aggregate",
    "qpl_line": "#2 = Aggregate [ #1 ] GroupBy [ CountryCode ] Output [ countstar AS Count_Star , MAX(Percentage) AS Max_Percentage ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ countrylanguage ] Predicate [ Language = 'Spanish' ] Output [ Language , Percentage , CountryCode ]",
        "children": []
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #2: GroupBy column 'countrycode' not found in aggregate output: ['count_star', 'max_percentage']."
  },
  {
    "split": "validation",
    "db_id": "orchestra",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Name, Conductor_ID ] Output [ Name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #2.Conductor_ID = #1.Conductor_ID ] Output [ #1.Name , #1.Conductor_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ conductor ] Output [ Conductor_ID , Name ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ orchestra ] Output [ Conductor_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: GroupBy column 'conductor_id' not found in aggregate output: ['name', 'count_star']."
  },
  {
    "split": "validation",
    "db_id": "orchestra",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Name, Conductor_ID ] Output [ Name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #2.Conductor_ID = #1.Conductor_ID ] Output [ #1.Name , #1.Conductor_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ conductor ] Output [ Conductor_ID , Name ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ orchestra ] Output [ Conductor_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: GroupBy column 'conductor_id' not found in aggregate output: ['name', 'count_star']."
  },
  {
    "split": "validation",
    "db_id": "orchestra",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Name, Conductor_ID ] Output [ Name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #2.Conductor_ID = #1.Conductor_ID ] Output [ #1.Name , #1.Conductor_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ conductor ] Output [ Conductor_ID , Name ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ orchestra ] Output [ Conductor_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: GroupBy column 'conductor_id' not found in aggregate output: ['name', 'count_star']."
  },
  {
    "split": "validation",
    "db_id": "orchestra",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Name, Conductor_ID ] Output [ Name , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #2.Conductor_ID = #1.Conductor_ID ] Output [ #1.Name , #1.Conductor_ID ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ conductor ] Output [ Conductor_ID , Name ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ orchestra ] Output [ Conductor_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: GroupBy column 'conductor_id' not found in aggregate output: ['name', 'count_star']."
  },
  {
    "split": "validation",
    "db_id": "orchestra",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Orchestra_ID IS NULL OR #1.Orchestra_ID = #2.Orchestra_ID ] Output [ #1.Orchestra ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ orchestra ] Output [ Orchestra_ID , Orchestra ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ performance ] Output [ Orchestra_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'orchestra(2)' and 'orchestra(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "orchestra",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Orchestra_ID IS NULL OR #1.Orchestra_ID = #2.Orchestra_ID ] Output [ #1.Orchestra ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ orchestra ] Output [ Orchestra_ID , Orchestra ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ performance ] Output [ Orchestra_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'orchestra(2)' and 'orchestra(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "orchestra",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Year_of_Founded ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Year_of_Founded, Orchestra_ID ] Output [ Year_of_Founded , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #2.Orchestra_ID = #1.Orchestra_ID ] Output [ #1.Orchestra_ID , #1.Year_of_Founded ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ orchestra ] Output [ Year_of_Founded , Orchestra_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ performance ] Output [ Orchestra_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: GroupBy column 'orchestra_id' not found in aggregate output: ['year_of_founded', 'count_star']."
  },
  {
    "split": "validation",
    "db_id": "orchestra",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Year_of_Founded ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ Year_of_Founded, Orchestra_ID ] Output [ Year_of_Founded , countstar AS Count_Star ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #2.Orchestra_ID = #1.Orchestra_ID ] Output [ #1.Orchestra_ID , #1.Year_of_Founded ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ orchestra ] Output [ Year_of_Founded , Orchestra_ID ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ performance ] Output [ Orchestra_ID ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: GroupBy column 'orchestra_id' not found in aggregate output: ['year_of_founded', 'count_star']."
  },
  {
    "split": "validation",
    "db_id": "network_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ countstar AS Count_Star , name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.ID = #2.student_id ] Output [ #2.student_id , #1.name ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Highschooler ] Output [ ID , name ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Friend ] Output [ student_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "network_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ countstar AS Count_Star , name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.ID = #2.student_id ] Output [ #2.student_id , #1.name ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Highschooler ] Output [ ID , name ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Friend ] Output [ student_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "network_1",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 3 ] Output [ name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ countstar AS Count_Star , name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.ID = #2.student_id ] Output [ #2.student_id , #1.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Highschooler ] Output [ ID , name ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Friend ] Output [ student_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "network_1",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 3 ] Output [ name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ countstar AS Count_Star , name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.ID = #2.student_id ] Output [ #2.student_id , #1.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Highschooler ] Output [ ID , name ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Friend ] Output [ student_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "network_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ countstar AS Count_Star , name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.ID ] Output [ #1.student_id , #2.name ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Likes ] Output [ student_id ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Highschooler ] Output [ ID , name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "network_1",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ countstar AS Count_Star , name ]",
    "children": [
      {
        "line_num": 3,
        "op": "Join",
        "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.ID ] Output [ #1.student_id , #2.name ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Likes ] Output [ student_id ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Highschooler ] Output [ ID , name ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "network_1",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] WithTies [ true ] Output [ name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ countstar AS Count_Star , name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #2.student_id = #1.ID ] Output [ #2.student_id , #1.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Highschooler ] Output [ ID , name ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Likes ] Output [ student_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "network_1",
    "line_num": 5,
    "op": "TopSort",
    "qpl_line": "#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] WithTies [ true ] Output [ name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ countstar AS Count_Star , name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #2.student_id = #1.ID ] Output [ #2.student_id , #1.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Highschooler ] Output [ ID , name ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Likes ] Output [ student_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "network_1",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ countstar AS Count_Star , name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.ID ] Output [ #1.student_id , #2.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Likes ] Output [ student_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Highschooler ] Output [ ID , name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "network_1",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ countstar AS Count_Star , name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.ID ] Output [ #1.student_id , #2.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Likes ] Output [ student_id ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Highschooler ] Output [ ID , name ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "network_1",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ countstar AS Count_Star , name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.ID = #2.student_id ] Output [ #2.student_id , #1.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Highschooler ] Predicate [ grade > 5 ] Output [ grade , ID , name ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Friend ] Output [ student_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "network_1",
    "line_num": 5,
    "op": "Filter",
    "qpl_line": "#5 = Filter [ #4 ] Predicate [ Count_Star >= 2 ] Output [ name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Aggregate",
        "qpl_line": "#4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ countstar AS Count_Star , name ]",
        "children": [
          {
            "line_num": 3,
            "op": "Join",
            "qpl_line": "#3 = Join [ #1 , #2 ] Predicate [ #1.ID = #2.student_id ] Output [ #2.student_id , #1.name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Highschooler ] Predicate [ grade > 5 ] Output [ grade , ID , name ]",
                "children": []
              },
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Friend ] Output [ student_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #4: Column 'name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "network_1",
    "line_num": 5,
    "op": "Aggregate",
    "qpl_line": "#5 = Aggregate [ #4 ] Output [ MIN(grade) AS Min_grade ]",
    "children": [
      {
        "line_num": 4,
        "op": "Except",
        "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.student_id = #1.ID ] Output [ #1.grade ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Highschooler ] Output [ grade , ID ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Aggregate",
            "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ student_id ] Output [ student_id ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Friend ] Output [ student_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'Highschooler(2)' and 'Highschooler(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "network_1",
    "line_num": 5,
    "op": "Aggregate",
    "qpl_line": "#5 = Aggregate [ #4 ] Output [ MIN(grade) AS Min_grade ]",
    "children": [
      {
        "line_num": 4,
        "op": "Except",
        "qpl_line": "#4 = Except [ #1 , #3 ] Predicate [ #3.student_id = #1.ID ] Output [ #1.grade ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Highschooler ] Output [ grade , ID ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Aggregate",
            "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ student_id ] Output [ student_id ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Friend ] Output [ student_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Except': 'Highschooler(2)' and 'Highschooler(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "dog_kennels",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] Output [ AVG(age) AS Avg_age ]",
    "children": [
      {
        "line_num": 3,
        "op": "Intersect",
        "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #2.dog_id = #1.dog_id ] Output [ #1.age ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Dogs ] Output [ age , dog_id ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Treatments ] Output [ dog_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'Dogs(2)' and 'Dogs(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "dog_kennels",
    "line_num": 4,
    "op": "Aggregate",
    "qpl_line": "#4 = Aggregate [ #3 ] Output [ AVG(age) AS Avg_age ]",
    "children": [
      {
        "line_num": 3,
        "op": "Intersect",
        "qpl_line": "#3 = Intersect [ #1 , #2 ] Predicate [ #2.dog_id = #1.dog_id ] Output [ #1.age ]",
        "children": [
          {
            "line_num": 1,
            "op": "Scan",
            "qpl_line": "#1 = Scan Table [ Dogs ] Output [ age , dog_id ]",
            "children": []
          },
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Treatments ] Output [ dog_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Intersect': 'Dogs(2)' and 'Dogs(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "dog_kennels",
    "line_num": 7,
    "op": "Union",
    "qpl_line": "#7 = Union [ #1 , #6 ] Output [ #1.last_name , #1.cell_number , #1.professional_id ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Professionals ] Predicate [ state = 'Indiana' ] Output [ cell_number , last_name , professional_id , state ]",
        "children": []
      },
      {
        "line_num": 6,
        "op": "Filter",
        "qpl_line": "#6 = Filter [ #5 ] Predicate [ Count_Star > 2 ] Output [ cell_number , last_name , professional_id ]",
        "children": [
          {
            "line_num": 5,
            "op": "Aggregate",
            "qpl_line": "#5 = Aggregate [ #4 ] GroupBy [ professional_id ] Output [ countstar AS Count_Star , cell_number , last_name , professional_id ]",
            "children": [
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.professional_id = #3.professional_id ] Output [ #3.last_name , #3.professional_id , #3.cell_number ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Treatments ] Output [ professional_id ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ Professionals ] Output [ cell_number , last_name , professional_id ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #5: Column 'cell_number' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "dog_kennels",
    "line_num": 7,
    "op": "Union",
    "qpl_line": "#7 = Union [ #1 , #6 ] Output [ #1.last_name , #1.cell_number , #1.professional_id ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Professionals ] Predicate [ state = 'Indiana' ] Output [ cell_number , last_name , professional_id , state ]",
        "children": []
      },
      {
        "line_num": 6,
        "op": "Filter",
        "qpl_line": "#6 = Filter [ #5 ] Predicate [ Count_Star > 2 ] Output [ cell_number , last_name , professional_id ]",
        "children": [
          {
            "line_num": 5,
            "op": "Aggregate",
            "qpl_line": "#5 = Aggregate [ #4 ] GroupBy [ professional_id ] Output [ countstar AS Count_Star , cell_number , last_name , professional_id ]",
            "children": [
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.professional_id = #3.professional_id ] Output [ #3.last_name , #3.professional_id , #3.cell_number ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Treatments ] Output [ professional_id ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ Professionals ] Output [ cell_number , last_name , professional_id ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #5: Column 'cell_number' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "dog_kennels",
    "line_num": 5,
    "op": "Except",
    "qpl_line": "#5 = Except [ #1 , #4 ] Predicate [ #4.dog_id = #1.dog_id ] Output [ #1.name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Dogs ] Output [ dog_id , name ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Filter",
        "qpl_line": "#4 = Filter [ #3 ] Predicate [ Sum_cost_of_treatment > 1000.0 ] Output [ dog_id ]",
        "children": [
          {
            "line_num": 3,
            "op": "Aggregate",
            "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ dog_id ] Output [ SUM(cost_of_treatment) AS Sum_cost_of_treatment , dog_id ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Treatments ] Output [ cost_of_treatment , dog_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Except': 'Dogs(2)' and 'Dogs(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "dog_kennels",
    "line_num": 5,
    "op": "Except",
    "qpl_line": "#5 = Except [ #1 , #4 ] Predicate [ #4.dog_id = #1.dog_id ] Output [ #1.name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Dogs ] Output [ dog_id , name ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Filter",
        "qpl_line": "#4 = Filter [ #3 ] Predicate [ Sum_cost_of_treatment > 1000.0 ] Output [ dog_id ]",
        "children": [
          {
            "line_num": 3,
            "op": "Aggregate",
            "qpl_line": "#3 = Aggregate [ #2 ] GroupBy [ dog_id ] Output [ SUM(cost_of_treatment) AS Sum_cost_of_treatment , dog_id ]",
            "children": [
              {
                "line_num": 2,
                "op": "Scan",
                "qpl_line": "#2 = Scan Table [ Treatments ] Output [ cost_of_treatment , dog_id ]",
                "children": []
              }
            ]
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #5: Incompatible types for operator 'Except': 'Dogs(2)' and 'Dogs(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "dog_kennels",
    "line_num": 5,
    "op": "Except",
    "qpl_line": "#5 = Except [ #1 , #4 ] Predicate [ #1.professional_id = #4.professional_id ] Output [ #1.email_address , #1.professional_id , #1.role_code ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Professionals ] Output [ professional_id , role_code , email_address ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Intersect",
        "qpl_line": "#4 = Intersect [ #2 , #3 ] Predicate [ #3.professional_id = #2.professional_id ] Output [ #2.professional_id , #2.email_address , #2.role_code ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Professionals ] Output [ professional_id , role_code , email_address ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ Treatments ] Output [ professional_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Intersect': 'Professionals(3)' and 'Professionals(1)' (must have the same number of columns in total: 3 != 1)."
  },
  {
    "split": "validation",
    "db_id": "dog_kennels",
    "line_num": 5,
    "op": "Except",
    "qpl_line": "#5 = Except [ #1 , #4 ] Predicate [ #1.professional_id = #4.professional_id ] Output [ #1.email_address , #1.professional_id , #1.role_code ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Professionals ] Output [ professional_id , role_code , email_address ]",
        "children": []
      },
      {
        "line_num": 4,
        "op": "Intersect",
        "qpl_line": "#4 = Intersect [ #2 , #3 ] Predicate [ #3.professional_id = #2.professional_id ] Output [ #2.professional_id , #2.email_address , #2.role_code ]",
        "children": [
          {
            "line_num": 2,
            "op": "Scan",
            "qpl_line": "#2 = Scan Table [ Professionals ] Output [ professional_id , role_code , email_address ]",
            "children": []
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ Treatments ] Output [ professional_id ]",
            "children": []
          }
        ]
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #4: Incompatible types for operator 'Intersect': 'Professionals(3)' and 'Professionals(1)' (must have the same number of columns in total: 3 != 1)."
  },
  {
    "split": "validation",
    "db_id": "dog_kennels",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ last_name , owner_id , Count_Star ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ owner_id ] Output [ countstar AS Count_Star , last_name , owner_id ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.dog_id = #4.dog_id ] Output [ #4.owner_id , #4.last_name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Treatments ] Output [ dog_id ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.owner_id = #3.owner_id ] Output [ #3.last_name , #3.owner_id , #2.dog_id ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Dogs ] Output [ owner_id , dog_id ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ Owners ] Output [ last_name , owner_id ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #6: Column 'last_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "dog_kennels",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ last_name , owner_id , Count_Star ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ owner_id ] Output [ countstar AS Count_Star , last_name , owner_id ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.dog_id = #4.dog_id ] Output [ #4.owner_id , #4.last_name ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Treatments ] Output [ dog_id ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.owner_id = #3.owner_id ] Output [ #3.last_name , #3.owner_id , #2.dog_id ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Dogs ] Output [ owner_id , dog_id ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ Owners ] Output [ last_name , owner_id ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #6: Column 'last_name' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "dog_kennels",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Sum_cost_of_treatment DESC ] Output [ Sum_cost_of_treatment , zip_code , owner_id ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ owner_id ] Output [ SUM(cost_of_treatment) AS Sum_cost_of_treatment , zip_code , owner_id ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.dog_id = #4.dog_id ] Output [ #4.owner_id , #4.zip_code , #1.cost_of_treatment ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Treatments ] Output [ cost_of_treatment , dog_id ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.owner_id = #3.owner_id ] Output [ #2.dog_id , #3.owner_id , #3.zip_code ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Dogs ] Output [ owner_id , dog_id ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ Owners ] Output [ zip_code , owner_id ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #6: Column 'zip_code' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "dog_kennels",
    "line_num": 7,
    "op": "TopSort",
    "qpl_line": "#7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Sum_cost_of_treatment DESC ] Output [ Sum_cost_of_treatment , zip_code , owner_id ]",
    "children": [
      {
        "line_num": 6,
        "op": "Aggregate",
        "qpl_line": "#6 = Aggregate [ #5 ] GroupBy [ owner_id ] Output [ SUM(cost_of_treatment) AS Sum_cost_of_treatment , zip_code , owner_id ]",
        "children": [
          {
            "line_num": 5,
            "op": "Join",
            "qpl_line": "#5 = Join [ #1 , #4 ] Predicate [ #1.dog_id = #4.dog_id ] Output [ #4.owner_id , #4.zip_code , #1.cost_of_treatment ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Treatments ] Output [ cost_of_treatment , dog_id ]",
                "children": []
              },
              {
                "line_num": 4,
                "op": "Join",
                "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #2.owner_id = #3.owner_id ] Output [ #2.dog_id , #3.owner_id , #3.zip_code ]",
                "children": [
                  {
                    "line_num": 2,
                    "op": "Scan",
                    "qpl_line": "#2 = Scan Table [ Dogs ] Output [ owner_id , dog_id ]",
                    "children": []
                  },
                  {
                    "line_num": 3,
                    "op": "Scan",
                    "qpl_line": "#3 = Scan Table [ Owners ] Output [ zip_code , owner_id ]",
                    "children": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "status": "Syntax Error",
    "error": "SyntaxError in line #6: Column 'zip_code' not in GroupBy and thus must be aggregated."
  },
  {
    "split": "validation",
    "db_id": "dog_kennels",
    "line_num": 6,
    "op": "Join",
    "qpl_line": "#6 = Join [ #4 , #5 ] Distinct [ true ] Output [ #5.last_name , #5.first_name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.cost_of_treatment < #2.Avg_cost_of_treatment ] Output [ #3.cost_of_treatment ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(cost_of_treatment) AS Avg_cost_of_treatment ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Treatments ] Output [ cost_of_treatment ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ Treatments ] Output [ cost_of_treatment ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 5,
        "op": "Scan",
        "qpl_line": "#5 = Scan Table [ Professionals ] Output [ first_name , last_name ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #6: Incompatible types for operator 'Join': 'Treatments(1)' and 'Professionals(2)'"
  },
  {
    "split": "validation",
    "db_id": "dog_kennels",
    "line_num": 6,
    "op": "Join",
    "qpl_line": "#6 = Join [ #4 , #5 ] Distinct [ true ] Output [ #5.last_name , #5.first_name ]",
    "children": [
      {
        "line_num": 4,
        "op": "Join",
        "qpl_line": "#4 = Join [ #2 , #3 ] Predicate [ #3.cost_of_treatment < #2.Avg_cost_of_treatment ] Output [ #3.cost_of_treatment ]",
        "children": [
          {
            "line_num": 2,
            "op": "Aggregate",
            "qpl_line": "#2 = Aggregate [ #1 ] Output [ AVG(cost_of_treatment) AS Avg_cost_of_treatment ]",
            "children": [
              {
                "line_num": 1,
                "op": "Scan",
                "qpl_line": "#1 = Scan Table [ Treatments ] Output [ cost_of_treatment ]",
                "children": []
              }
            ]
          },
          {
            "line_num": 3,
            "op": "Scan",
            "qpl_line": "#3 = Scan Table [ Treatments ] Output [ cost_of_treatment ]",
            "children": []
          }
        ]
      },
      {
        "line_num": 5,
        "op": "Scan",
        "qpl_line": "#5 = Scan Table [ Professionals ] Output [ first_name , last_name ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #6: Incompatible types for operator 'Join': 'Treatments(1)' and 'Professionals(2)'"
  },
  {
    "split": "validation",
    "db_id": "singer",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Singer_ID IS NULL OR #1.Singer_ID = #2.Singer_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ singer ] Output [ Singer_ID , Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ song ] Output [ Singer_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'singer(2)' and 'singer(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "singer",
    "line_num": 3,
    "op": "Except",
    "qpl_line": "#3 = Except [ #1 , #2 ] Predicate [ #2.Singer_ID IS NULL OR #1.Singer_ID = #2.Singer_ID ] Output [ #1.Name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ singer ] Output [ Singer_ID , Name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ song ] Output [ Singer_ID ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Except': 'singer(2)' and 'singer(1)' (must have the same number of columns in total: 2 != 1)."
  },
  {
    "split": "validation",
    "db_id": "real_estate_properties",
    "line_num": 3,
    "op": "Union",
    "qpl_line": "#3 = Union [ #1 , #2 ] Output [ #1.property_name ]",
    "children": [
      {
        "line_num": 1,
        "op": "Scan",
        "qpl_line": "#1 = Scan Table [ Properties ] Predicate [ property_type_code = 'House' ] Output [ property_type_code , property_name ]",
        "children": []
      },
      {
        "line_num": 2,
        "op": "Scan",
        "qpl_line": "#2 = Scan Table [ Properties ] Predicate [ room_count > 1 AND property_type_code = 'Apartment' ] Output [ property_type_code , property_name , room_count ]",
        "children": []
      }
    ],
    "status": "Operator Error",
    "error": "OperatorError in line #3: Incompatible types for operator 'Union': 'Ref_Property_Types(1), Properties(1)' and 'Ref_Property_Types(1), Properties(2)' (must have the same number of columns in total: 2 != 3)."
  }
]